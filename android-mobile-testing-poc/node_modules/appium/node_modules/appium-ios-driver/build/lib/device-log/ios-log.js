'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var EventEmitter = _events2['default'].EventEmitter;

var START_TIMEOUT = 10000;
var DEVICE_CONSOLE_PATH = _path2['default'].resolve(__dirname, '..', '..', '..', 'build', 'deviceconsole');
var SYSTEM_LOG_PATH = '/var/log/system.log';
// We keep only the most recent log entries to avoid out of memory error
var MAX_LOG_ENTRIES_COUNT = 10000;

var IOSLog = (function (_EventEmitter) {
  _inherits(IOSLog, _EventEmitter);

  function IOSLog(opts) {
    _classCallCheck(this, IOSLog);

    _get(Object.getPrototypeOf(IOSLog.prototype), 'constructor', this).call(this);
    this.sim = opts.sim;
    this.udid = opts.udid;
    this.showLogs = !!opts.showLogs;
    this.realDeviceLogger = opts.realDeviceLogger || 'idevicesyslog';
    this.xcodeVersion = opts.xcodeVersion;

    this.proc = null;
    this.logs = [];
    this.logRow = '';
    this.logIdxSinceLastRequest = -1;
    this.maxBufferSize = MAX_LOG_ENTRIES_COUNT;
  }

  _createClass(IOSLog, [{
    key: 'startCaptureRealDevice',
    value: function startCaptureRealDevice() {
      var cmd, args, env, deviceconsole, stat;
      return _regeneratorRuntime.async(function startCaptureRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = undefined, args = undefined, env = undefined;

            if (!((this.realDeviceLogger || '').indexOf('idevicesyslog') !== -1)) {
              context$2$0.next = 24;
              break;
            }

            _logger2['default'].debug('Attempting iOS device log capture via libimobiledevice idevicesyslog');

            if (!(this.realDeviceLogger.toLowerCase() === 'idevicesyslog')) {
              context$2$0.next = 15;
              break;
            }

            cmd = 'idevicesyslog';
            context$2$0.prev = 5;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevicesyslog'));

          case 8:
            context$2$0.next = 13;
            break;

          case 10:
            context$2$0.prev = 10;
            context$2$0.t0 = context$2$0['catch'](5);
            throw new Error('Unable to find system idevicesyslog: ' + context$2$0.t0.message);

          case 13:
            context$2$0.next = 20;
            break;

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.realDeviceLogger));

          case 17:
            if (context$2$0.sent) {
              context$2$0.next = 19;
              break;
            }

            throw new Error('Unable to find idevicesyslog from \'realDeviceLogger\' capability \'' + this.realDeviceLogger + '\'');

          case 19:
            cmd = this.realDeviceLogger;

          case 20:

            args = ['-u', this.udid];
            env = process.env;
            context$2$0.next = 57;
            break;

          case 24:
            if (!((this.realDeviceLogger || '').indexOf('deviceconsole') !== -1)) {
              context$2$0.next = 56;
              break;
            }

            _logger2['default'].debug('Attempting iOS device log capture via deviceconsole');
            deviceconsole = undefined;

            if (!(this.realDeviceLogger.toLowerCase() === 'deviceconsole')) {
              context$2$0.next = 31;
              break;
            }

            deviceconsole = DEVICE_CONSOLE_PATH;
            context$2$0.next = 48;
            break;

          case 31:
            stat = undefined;
            context$2$0.prev = 32;
            context$2$0.next = 35;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(this.realDeviceLogger));

          case 35:
            stat = context$2$0.sent;
            context$2$0.next = 41;
            break;

          case 38:
            context$2$0.prev = 38;
            context$2$0.t1 = context$2$0['catch'](32);
            throw new Error('Unable to find deviceconsole from \'realDeviceLogger\' capability \'' + this.realDeviceLogger + '\': ' + context$2$0.t1.message);

          case 41:
            if (!stat.isDirectory()) {
              context$2$0.next = 45;
              break;
            }

            deviceconsole = this.realDeviceLogger;
            context$2$0.next = 48;
            break;

          case 45:
            if (_lodash2['default'].endsWith(this.realDeviceLogger, 'deviceconsole')) {
              context$2$0.next = 47;
              break;
            }

            throw new Error('Unable to parse \'deviceconsole\' installation directory from \'' + this.realDeviceLogger + '\'');

          case 47:
            // remove the executable, and trailing `/`, to get the install directory
            deviceconsole = _path2['default'].dirname(this.realDeviceLogger);

          case 48:

            _logger2['default'].debug('Using \'deviceconsole\' from \'' + deviceconsole + '\'');

            cmd = deviceconsole + '/deviceconsole';
            args = ['-u', this.udid];

            // set up the environment to be able to run deviceconsole
            env = _lodash2['default'].clone(process.env);
            env.DYLD_LIBRARY_PATH = deviceconsole;
            if (process.env.DYLD_LIBRARY_PATH) {
              env.DYLD_LIBRARY_PATH = env.DYLD_LIBRARY_PATH + ':' + process.env.DYLD_LIBRARY_PATH;
            }
            context$2$0.next = 57;
            break;

          case 56:
            _logger2['default'].errorAndThrow('Unable to capture device log. Unknown \'realDeviceLogger\': \'' + this.realDeviceLogger + '\'');

          case 57:

            this.subprocessId = cmd + '_' + this.udid;

            _logger2['default'].debug('Starting iOS device log capture with: \'' + cmd + '\'');

            context$2$0.prev = 59;
            context$2$0.next = 62;
            return _regeneratorRuntime.awrap(this.killExistingSysLogProcesses(cmd, args));

          case 62:
            context$2$0.next = 66;
            break;

          case 64:
            context$2$0.prev = 64;
            context$2$0.t2 = context$2$0['catch'](59);

          case 66:

            // just use one instance of 'idevicesyslog' per udid
            this.proc = this.getIDeviceSysLogProcess(cmd, args, env);

            context$2$0.next = 69;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 69:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[5, 10], [32, 38], [59, 64]]);
    }
  }, {
    key: 'startCaptureSimulator',
    value: function startCaptureSimulator() {
      var logPath, systemLogPath, files, lastModifiedLogPath, lastModifiedLogTime, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, _ref, mtime, tailArgs;

      return _regeneratorRuntime.async(function startCaptureSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = _logger2['default'];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sim.getPlatformVersion());

          case 3:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = 'Starting iOS ' + context$2$0.t1;
            context$2$0.t3 = context$2$0.t2 + ' simulator log capture';
            context$2$0.t0.debug.call(context$2$0.t0, context$2$0.t3);

            if (!(this.xcodeVersion.major < 5)) {
              context$2$0.next = 12;
              break;
            }

            this.proc = new _teen_process.SubProcess('tail', ['-f', '-n', '1', SYSTEM_LOG_PATH]);
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 11:
            return context$2$0.abrupt('return');

          case 12:

            // this is xcode 6+
            if (_lodash2['default'].isUndefined(this.sim.udid)) {
              _logger2['default'].errorAndThrow('iOS log capture with Xcode ' + this.xcodeVersion.versionString + ' requires a sim udid');
            }

            logPath = this.sim.getLogDir();
            context$2$0.prev = 14;

            if (!(logPath.indexOf('*') >= 0)) {
              context$2$0.next = 18;
              break;
            }

            _logger2['default'].error('Log path has * in it. Unable to start log capture: ' + logPath);
            return context$2$0.abrupt('return');

          case 18:
            systemLogPath = _path2['default'].resolve(logPath, 'system.log');

            _logger2['default'].debug('System log path: ' + systemLogPath);
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(logPath));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(systemLogPath, 'A new Appium session is about to start!\n', { flag: 'a' }));

          case 24:
            files = undefined;
            context$2$0.prev = 25;
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(systemLogPath));

          case 28:
            files = context$2$0.sent;

            if (!(files.length < 1)) {
              context$2$0.next = 31;
              break;
            }

            throw new Error('Could not start log capture');

          case 31:
            context$2$0.next = 36;
            break;

          case 33:
            context$2$0.prev = 33;
            context$2$0.t4 = context$2$0['catch'](25);

            _logger2['default'].error('Could not start log capture because no iOS ' + ('simulator logs could be found at ' + systemLogPath + '. ') + 'Logging will not be functional for this run');

          case 36:
            lastModifiedLogPath = files[0];
            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(lastModifiedLogPath));

          case 39:
            lastModifiedLogTime = context$2$0.sent.mtime;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 43;
            _iterator = _getIterator(files);

          case 45:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 55;
              break;
            }

            file = _step.value;
            context$2$0.next = 49;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(file));

          case 49:
            _ref = context$2$0.sent;
            mtime = _ref.mtime;

            if (mtime > lastModifiedLogTime) {
              lastModifiedLogPath = file;
              lastModifiedLogTime = mtime;
            }

          case 52:
            _iteratorNormalCompletion = true;
            context$2$0.next = 45;
            break;

          case 55:
            context$2$0.next = 61;
            break;

          case 57:
            context$2$0.prev = 57;
            context$2$0.t5 = context$2$0['catch'](43);
            _didIteratorError = true;
            _iteratorError = context$2$0.t5;

          case 61:
            context$2$0.prev = 61;
            context$2$0.prev = 62;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 64:
            context$2$0.prev = 64;

            if (!_didIteratorError) {
              context$2$0.next = 67;
              break;
            }

            throw _iteratorError;

          case 67:
            return context$2$0.finish(64);

          case 68:
            return context$2$0.finish(61);

          case 69:
            tailArgs = ['-f', '-n', '1', lastModifiedLogPath];
            context$2$0.prev = 70;
            context$2$0.next = 73;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', ['-xf', ['tail'].concat(tailArgs).join(' ')]));

          case 73:
            context$2$0.next = 77;
            break;

          case 75:
            context$2$0.prev = 75;
            context$2$0.t6 = context$2$0['catch'](70);

          case 77:
            this.proc = new _teen_process.SubProcess('tail', tailArgs);
            context$2$0.next = 80;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 80:
            context$2$0.next = 85;
            break;

          case 82:
            context$2$0.prev = 82;
            context$2$0.t7 = context$2$0['catch'](14);

            _logger2['default'].errorAndThrow('Simulator log capture failed: ' + context$2$0.t7.message);

          case 85:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[14, 82], [25, 33], [43, 57, 61, 69], [62,, 64, 68], [70, 75]]);
    }
  }, {
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.udid) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.startCaptureRealDevice());

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.startCaptureSimulator());

          case 6:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'finishStartingLogCapture',
    value: function finishStartingLogCapture() {
      var firstLine, sd;
      return _regeneratorRuntime.async(function finishStartingLogCapture$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.proc) {
              _logger2['default'].errorAndThrow('Could not capture device log');
            }
            firstLine = true;

            this.proc.on('output', function (stdout, stderr) {
              if (stdout) {
                if (firstLine) {
                  if (stdout.substr(-1, 1) === '\n') {
                    // don't store the first line of the log because it came before the sim or device was launched
                    firstLine = false;
                  }
                } else {
                  _this.logRow += stdout;
                  if (stdout.substr(-1, 1) === '\n') {
                    _this.onOutput();
                    _this.logRow = '';
                  }
                }
              }
              if (stderr) {
                _this.onOutput('STDERR');
              }
            });

            sd = function sd(stdout, stderr) {
              if (/execvp\(\)/.test(stderr)) {
                throw new Error('iOS log capture process failed to start');
              }
              return stdout || stderr;
            };

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.proc.start(sd, START_TIMEOUT));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      var cachedSysLog;
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.proc) {
              context$2$0.next = 12;
              break;
            }

            if (!this.udid) {
              context$2$0.next = 10;
              break;
            }

            cachedSysLog = IOSLog.cachedIDeviceSysLogs[this.subprocessId];

            cachedSysLog.count--;

            if (!(cachedSysLog.count === 0)) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.killLogSubProcess());

          case 7:
            delete IOSLog.cachedIDeviceSysLogs[this.subprocessId];

          case 8:
            context$2$0.next = 12;
            break;

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.killLogSubProcess());

          case 12:
            this.proc = null;

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killLogSubProcess',
    value: function killLogSubProcess() {
      return _regeneratorRuntime.async(function killLogSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.proc.isRunning) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Stopping iOS log capture');
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proc.stop('SIGTERM', 1000));

          case 5:
            context$2$0.next = 12;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](2);

            _logger2['default'].error('Cannot stop log capture process. Sending SIGKILL...');
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.proc.stop('SIGKILL'));

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 7]]);
    }
  }, {
    key: 'onOutput',
    value: function onOutput() {
      var prefix = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      var logs = this.logRow.split('\n');
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _getIterator(logs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var log = _step2.value;

          if (!log) continue; // eslint-disable-line curly
          var logObj = {
            timestamp: Date.now(),
            level: 'ALL',
            message: log
          };
          this.logs.push(logObj);
          this.emit('output', logObj);
          if (this.logs.length > this.maxBufferSize) {
            this.logs.shift();
            if (this.logIdxSinceLastRequest > 0) {
              --this.logIdxSinceLastRequest;
            }
          }
          if (this.showLogs) {
            var space = prefix.length > 0 ? ' ' : '';
            _logger2['default'].info('[IOS_SYSLOG_ROW' + space + prefix + '] ' + log);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      var result;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.logs.length && this.logIdxSinceLastRequest < this.logs.length)) {
              context$2$0.next = 5;
              break;
            }

            result = this.logs;

            if (this.logIdxSinceLastRequest > 0) {
              result = result.slice(this.logIdxSinceLastRequest);
            }
            this.logIdxSinceLastRequest = this.logs.length;
            return context$2$0.abrupt('return', result);

          case 5:
            return context$2$0.abrupt('return', []);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', this.logs);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killExistingSysLogProcesses',
    value: function killExistingSysLogProcesses(cmd, args) {
      return _regeneratorRuntime.async(function killExistingSysLogProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (IOSLog.cachedIDeviceSysLogs[this.subprocessId]) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', ['-xf', [cmd].concat(_toConsumableArray(args)).join(' ')]));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get 'idevicesyslog' subprocess for a given udid.
     *
     * This function caches and re-uses instances so that there's
     * just one instance per device (cache by UDID)
     */
  }, {
    key: 'getIDeviceSysLogProcess',
    value: function getIDeviceSysLogProcess(cmd, args, env) {
      var _this2 = this;

      if (!IOSLog.cachedIDeviceSysLogs[this.subprocessId]) {
        var _IOSLog$cachedIDeviceSysLogs$subprocessId = IOSLog.cachedIDeviceSysLogs[this.subprocessId] = {
          proc: new _teen_process.SubProcess(cmd, args, { env: env }),
          count: 1
        };

        var proc = _IOSLog$cachedIDeviceSysLogs$subprocessId.proc;

        // If the process dies, remove it from the cache
        proc.on('exit', function () {
          return delete IOSLog.cachedIDeviceSysLogs[_this2.subprocessId];
        });
      } else {
        IOSLog.cachedIDeviceSysLogs[this.subprocessId].count++;
      }
      return IOSLog.cachedIDeviceSysLogs[this.subprocessId].proc;
    }
  }]);

  return IOSLog;
})(EventEmitter);

IOSLog.cachedIDeviceSysLogs = {};

exports.IOSLog = IOSLog;
exports.DEVICE_CONSOLE_PATH = DEVICE_CONSOLE_PATH;
exports['default'] = IOSLog;

// make sure it is available on the PATH

// make sure the executable exists

// make sure that we have the path to the directory,
// not the actual executable

// make sure they've passed in `deviceconsole` and not something random

// cleanup existing listeners if the previous session has not been terminated properly

// otherwise, if we have a simulator...

// cleanup existing listeners if the previous session has not been terminated properly

// if we have a real device

// If no other UDID's are using 'idevicesyslog' kill it
//# sourceMappingURL=data:application/json;charset=utf8;base64,
