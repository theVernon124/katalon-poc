'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deviceLogIosLog = require('../device-log/ios-log');

var _deviceLogIosLog2 = _interopRequireDefault(_deviceLogIosLog);

var _deviceLogIosCrashLog = require('../device-log/ios-crash-log');

var _deviceLogIosCrashLog2 = _interopRequireDefault(_deviceLogIosCrashLog);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

extensions.extractLogs = function callee$0$0(logType) {
  var logsContainer = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var logObject, logs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_lodash2['default'].isEmpty(logsContainer)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 2:
        logObject = logsContainer[logType];

        if (!logObject) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(logObject.getLogs());

      case 6:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 9:
        context$1$0.t0 = null;

      case 10:
        logs = context$1$0.t0;

        if (!logs) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 13:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.extractLogs('syslog', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.extractLogs('crashlog', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.extractLogs('performance', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  server: {
    description: 'Appium server logs',
    getter: function getter(self) {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to retrieve server logs');
      }
      return _logger2['default'].unwrap().record.map(function (x) {
        return {
          // npmlog does not keep timestamps in the history
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash2['default'].isEmpty(x.prefix) ? x.message : '[' + x.prefix + '] ' + x.message
        };
      });
    }
  }
};

helpers.startLogCapture = function callee$0$0(sim) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn("Trying to start iOS log capture but it's already started!");
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _deviceLogIosCrashLog2['default']();
        this.logs.syslog = new _deviceLogIosLog2['default']({
          sim: sim,
          udid: this.opts.udid,
          showLogs: this.opts.showIOSLog,
          realDeviceLogger: this.opts.realDeviceLogger,
          xcodeVersion: this.xcodeVersion
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7K0JBQ0gsdUJBQXVCOzs7O29DQUNsQiw2QkFBNkI7Ozs7c0JBQ2xDLFdBQVc7Ozs7QUFHOUIsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsVUFBVSxDQUFDLFdBQVcsR0FBRyxvQkFBZ0IsT0FBTztNQUFFLGFBQWEseURBQUcsRUFBRTtNQVE1RCxTQUFTLEVBQ1QsSUFBSTs7OzthQU5OLG9CQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7Ozs7O2NBQ3BCLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDOzs7QUFJNUUsaUJBQVMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDOzthQUMzQixTQUFTOzs7Ozs7eUNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRTs7Ozs7Ozs7eUJBQUcsSUFBSTs7O0FBQW5ELFlBQUk7O2FBQ04sSUFBSTs7Ozs7NENBQ0MsSUFBSTs7O2NBRVAsSUFBSSxLQUFLLHdCQUFxQixPQUFPLGVBQVc7Ozs7Ozs7Q0FDdkQsQ0FBQzs7QUFFRixVQUFVLENBQUMsaUJBQWlCLEdBQUc7QUFDN0IsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFLCtFQUErRTtBQUM1RixVQUFNLEVBQUUsZ0JBQU8sSUFBSTs7Ozs7NkNBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7OztLQUFBO0dBQ3BFO0FBQ0QsVUFBUSxFQUFFO0FBQ1IsZUFBVyxFQUFFLGdGQUFnRjtBQUM3RixVQUFNLEVBQUUsZ0JBQU8sSUFBSTs7Ozs7NkNBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7OztLQUFBO0dBQ3RFO0FBQ0QsYUFBVyxFQUFFO0FBQ1gsZUFBVyxFQUFFLG1FQUFtRTtBQUNoRixVQUFNLEVBQUUsZ0JBQU8sSUFBSTs7Ozs7NkNBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7OztLQUFBO0dBQ3pFO0FBQ0QsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFLG9CQUFvQjtBQUNqQyxVQUFNLEVBQUUsZ0JBQUMsSUFBSSxFQUFLO0FBQ2hCLFVBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUU7QUFDaEMsY0FBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsR0FDcEQsa0NBQWtDLENBQUMsQ0FBQztPQUNyRDtBQUNELGFBQU8sb0JBQU8sTUFBTSxFQUFFLENBQUMsTUFBTSxDQUMxQixHQUFHLENBQUMsVUFBQyxDQUFDLEVBQUs7QUFDVixlQUFPOztBQUVMLG1CQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNyQixlQUFLLEVBQUUsS0FBSztBQUNaLGlCQUFPLEVBQUUsb0JBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxTQUFPLENBQUMsQ0FBQyxNQUFNLFVBQUssQ0FBQyxDQUFDLE9BQU8sQUFBRTtTQUN4RSxDQUFDO09BQ0gsQ0FBQyxDQUFDO0tBQ047R0FDRjtDQUNGLENBQUM7O0FBRUYsT0FBTyxDQUFDLGVBQWUsR0FBRyxvQkFBZ0IsR0FBRzs7OztZQUN0QyxvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7QUFDdkIsNEJBQU8sSUFBSSxDQUFDLDJEQUEyRCxDQUFDLENBQUM7Ozs7QUFHM0UsWUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsdUNBQWlCLENBQUM7QUFDdkMsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsaUNBQVc7QUFDNUIsYUFBRyxFQUFILEdBQUc7QUFDSCxjQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO0FBQ3BCLGtCQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO0FBQzlCLDBCQUFnQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO0FBQzVDLHNCQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDaEMsQ0FBQyxDQUFDOzs7eUNBRUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0FBRXJDLDRCQUFPLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDOzs7Ozt5Q0FHbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFOzs7Ozs7O0NBQ3hDLENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvbG9nZ2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgSU9TTG9nIGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWxvZyc7XG5pbXBvcnQgSU9TQ3Jhc2hMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtY3Jhc2gtbG9nJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmV4dGVuc2lvbnMuZXh0cmFjdExvZ3MgPSBhc3luYyBmdW5jdGlvbiAobG9nVHlwZSwgbG9nc0NvbnRhaW5lciA9IHt9KSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgbG9ncyBhdCBhbGxcbiAgLy8gb3RoZXJ3aXNlIGl0J3Mgbm90IGJlZW4gaW5pdGlhbGl6ZWRcbiAgaWYgKF8uaXNFbXB0eShsb2dzQ29udGFpbmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbG9ncyBjdXJyZW50bHkgYXZhaWxhYmxlLiBJcyB0aGUgZGV2aWNlL3NpbXVsYXRvciBzdGFydGVkPycpO1xuICB9XG5cbiAgLy8gSWYgbG9ncyBjYXB0dXJlZCBzdWNjZXNzZnVsbHkgc2VuZCByZXNwb25zZSB3aXRoIGRhdGEsIGVsc2Ugc2VuZCBlcnJvclxuICBjb25zdCBsb2dPYmplY3QgPSBsb2dzQ29udGFpbmVyW2xvZ1R5cGVdO1xuICBjb25zdCBsb2dzID0gbG9nT2JqZWN0ID8gYXdhaXQgbG9nT2JqZWN0LmdldExvZ3MoKSA6IG51bGw7XG4gIGlmIChsb2dzKSB7XG4gICAgcmV0dXJuIGxvZ3M7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyBsb2dzIG9mIHR5cGUgJyR7bG9nVHlwZX0nIGZvdW5kLmApO1xufTtcblxuZXh0ZW5zaW9ucy5zdXBwb3J0ZWRMb2dUeXBlcyA9IHtcbiAgc3lzbG9nOiB7XG4gICAgZGVzY3JpcHRpb246ICdTeXN0ZW0gTG9ncyAtIERldmljZSBsb2dzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygnc3lzbG9nJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgY3Jhc2hsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NyYXNoIExvZ3MgLSBDcmFzaCByZXBvcnRzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygnY3Jhc2hsb2cnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBwZXJmb3JtYW5jZToge1xuICAgIGRlc2NyaXB0aW9uOiAnUGVyZm9ybWFuY2UgTG9ncyAtIERlYnVnIFRpbWVsaW5lcyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnLFxuICAgIGdldHRlcjogYXN5bmMgKHNlbGYpID0+IGF3YWl0IHNlbGYuZXh0cmFjdExvZ3MoJ3BlcmZvcm1hbmNlJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgZGVzY3JpcHRpb246ICdBcHBpdW0gc2VydmVyIGxvZ3MnLFxuICAgIGdldHRlcjogKHNlbGYpID0+IHtcbiAgICAgIGlmICghc2VsZi5yZWxheGVkU2VjdXJpdHlFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbiBvcmRlciB0byByZXRyaWV2ZSBzZXJ2ZXIgbG9ncycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvZ2dlci51bndyYXAoKS5yZWNvcmRcbiAgICAgICAgLm1hcCgoeCkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBucG1sb2cgZG9lcyBub3Qga2VlcCB0aW1lc3RhbXBzIGluIHRoZSBoaXN0b3J5XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBsZXZlbDogJ0FMTCcsXG4gICAgICAgICAgICBtZXNzYWdlOiBfLmlzRW1wdHkoeC5wcmVmaXgpID8geC5tZXNzYWdlIDogYFske3gucHJlZml4fV0gJHt4Lm1lc3NhZ2V9YCxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9LFxuICB9LFxufTtcblxuaGVscGVycy5zdGFydExvZ0NhcHR1cmUgPSBhc3luYyBmdW5jdGlvbiAoc2ltKSB7XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2dnZXIud2FybihcIlRyeWluZyB0byBzdGFydCBpT1MgbG9nIGNhcHR1cmUgYnV0IGl0J3MgYWxyZWFkeSBzdGFydGVkIVwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW0sXG4gICAgdWRpZDogdGhpcy5vcHRzLnVkaWQsXG4gICAgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nLFxuICAgIHJlYWxEZXZpY2VMb2dnZXI6IHRoaXMub3B0cy5yZWFsRGV2aWNlTG9nZ2VyLFxuICAgIHhjb2RlVmVyc2lvbjogdGhpcy54Y29kZVZlcnNpb24sXG4gIH0pO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMubG9ncy5zeXNsb2cuc3RhcnRDYXB0dXJlKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKFwiQ291bGQgbm90IGNhcHR1cmUgbG9ncyBmcm9tIGRldmljZS4gQ29udGludWluZyB3aXRob3V0IGNhcHR1cmluZyBsb2dzLlwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgdGhpcy5sb2dzLmNyYXNobG9nLnN0YXJ0Q2FwdHVyZSgpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
