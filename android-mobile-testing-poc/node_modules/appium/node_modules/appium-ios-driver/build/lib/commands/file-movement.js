'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var commands = {},
    helpers = {},
    extensions = {};

// TODO: more explicit error message for all the file-movement commands

/*
 *  Get the full path to an iOS simulator file.
 *  Calls cb(err, fullFilePath)
 *  /Some/Path                           fetches a file relative to the root of the device's filesystem.
 *  /Applications/AppName.app/Some/Path  fetches a file relative to the root of that Application's .app directory, adding in the GUID.
 *  So it looks something like: /Applications/GUID-GUID-GUID-GUID/Some/Path
 */
helpers.getSimFileFullPath = function callee$0$0(remotePath) {
  var basePath, appName, appNameRegex, appNameMatches, findPath, _ref, stdout, appRoot, subPath;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        basePath = this.sim.getDir();
        appName = null;

        if (this.opts.app) {
          appNameRegex = new RegExp('\\' + _path2['default'].sep + '([\\w-]+\\.app)');
          appNameMatches = appNameRegex.exec(this.opts.app);

          if (appNameMatches) {
            appName = appNameMatches[1];
          }
        }
        // de-absolutize the path
        if (_appiumSupport.system.isWindows()) {
          if (remotePath.indexof("://") === 1) {
            remotePath = remotePath.slice(4);
          }
        } else {
          if (remotePath.indexOf("/") === 0) {
            remotePath = remotePath.slice(1);
          }
        }

        if (!(remotePath.indexOf(appName) === 0)) {
          context$1$0.next = 18;
          break;
        }

        _logger2['default'].debug("We want an app-relative file");

        findPath = basePath;

        if (this.opts.platformVersion >= 8) {
          // the .app file appears in /Containers/Data and /Containers/Bundle both. We only want /Bundle
          findPath = _path2['default'].resolve(basePath, "Containers", "Bundle");
        }
        findPath = findPath.replace(/\s/g, '\\ ');

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('find', [findPath, '-name', appName]));

      case 11:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        appRoot = stdout.replace(/\n$/, '');
        subPath = remotePath.substring(appName.length + 1);
        return context$1$0.abrupt('return', _path2['default'].resolve(appRoot, subPath));

      case 18:
        _logger2['default'].debug("We want a sim-relative file");
        return context$1$0.abrupt('return', _path2['default'].resolve(basePath, remotePath));

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pushFile = function callee$0$0(remotePath, base64Data) {
  var fullPath, content;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Pushing ' + remotePath + ' to iOS simulator');

        if (!this.isRealDevice()) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].debug("Unsupported: cannot write files to physical device");
        throw new _appiumBaseDriver.errors.NotYetImplementedError();

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getSimFileFullPath(remotePath));

      case 6:
        fullPath = context$1$0.sent;

        _logger2['default'].debug('Attempting to write ' + fullPath + '...');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(fullPath));

      case 10:
        if (!context$1$0.sent) {
          context$1$0.next = 14;
          break;
        }

        _logger2['default'].debug(fullPath + ' already exists, deleting...');
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(fullPath));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(fullPath)));

      case 16:
        content = Buffer.from(base64Data, 'base64');
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(fullPath, content));

      case 19:
        _logger2['default'].debug('Wrote ' + content.length + ' bytes to ' + fullPath);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFile = function callee$0$0(remotePath) {
  var fullPath, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Pulling ' + remotePath + ' from sim');

        if (!this.isRealDevice()) {
          context$1$0.next = 3;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError();

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getSimFileFullPath(remotePath));

      case 5:
        fullPath = context$1$0.sent;

        _logger2['default'].debug('Attempting to read ' + fullPath);
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(fullPath, { encoding: 'base64' }));

      case 9:
        data = context$1$0.sent;
        return context$1$0.abrupt('return', data);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFolder = function callee$0$0(remotePath) {
  var fullPath, buffer, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Pulling \'' + remotePath + '\' from sim');

        if (!this.isRealDevice()) {
          context$1$0.next = 3;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError();

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getSimFileFullPath(remotePath));

      case 5:
        fullPath = context$1$0.sent;

        _logger2['default'].debug('Adding ' + fullPath + ' to an in-memory zip archive');
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.toInMemoryZip(fullPath));

      case 9:
        buffer = context$1$0.sent;

        _logger2['default'].debug("Converting in-memory zip file to base64 encoded string");
        data = buffer.toString('base64');

        _logger2['default'].debug("Returning in-memory zip file as base54 encoded string");
        return context$1$0.abrupt('return', data);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
