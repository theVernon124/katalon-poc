'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _appiumRemoteDebugger = require('appium-remote-debugger');

var _deviceLogIosPerformanceLog = require('../device-log/ios-performance-log');

var _deviceLogIosPerformanceLog2 = _interopRequireDefault(_deviceLogIosPerformanceLog);

var _appiumBaseDriver = require('appium-base-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var NATIVE_WIN = 'NATIVE_APP';
var WEBVIEW_WIN = 'WEBVIEW';
var WEBVIEW_BASE = WEBVIEW_WIN + '_';

var commands = {},
    helpers = {},
    extensions = {};

commands.getCurrentContext = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.curContext && this.curContext !== NATIVE_WIN)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', '' + WEBVIEW_BASE + this.curContext);

      case 4:
        return context$1$0.abrupt('return', NATIVE_WIN);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  var contexts, mapFn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Getting list of available contexts');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getContextsAndViews(false));

      case 3:
        contexts = context$1$0.sent;

        mapFn = function mapFn(context) {
          return context.id.toString();
        };

        if (this.opts.fullContextList) {
          mapFn = function (context) {
            return {
              id: context.id.toString(),
              title: context.view.title,
              url: context.view.url
            };
          };
        }
        return context$1$0.abrupt('return', contexts.map(mapFn));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setContext = function callee$0$0(name, callback, skipReadyCheck) {
  var alreadyInContext, contextId, _$map, _$map2, appIdKey, pageIdKey;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        alreadyInContext = function alreadyInContext(desired, current) {
          return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
        };

        _logger2['default'].debug('Attempting to set context to \'' + name + '\'');

        if (!alreadyInContext(name, this.curContext)) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 33;
        break;

      case 5:
        if (!(name === NATIVE_WIN || name === null)) {
          context$1$0.next = 10;
          break;
        }

        // switching into the native context
        this.curContext = null;
        if (this.isRealDevice()) {
          this.remote.disconnect();
        }
        context$1$0.next = 33;
        break;

      case 10:
        if (!_lodash2['default'].isUndefined(this.contexts)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.getContexts());

      case 13:
        contextId = name.replace(WEBVIEW_BASE, '');

        if (contextId === '') {
          // allow user to pass in "WEBVIEW" without an index
          // the second context will be the first webview as
          // the first is always NATIVE_APP
          contextId = this.contexts[1];
        }

        if (_lodash2['default'].includes(this.contexts, contextId)) {
          context$1$0.next = 17;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchContextError();

      case 17:
        if (!this.isRealDevice()) {
          context$1$0.next = 26;
          break;
        }

        if (!this.remote) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 21:
        this.curContext = contextId;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.remote.connect(contextId));

      case 24:
        context$1$0.next = 33;
        break;

      case 26:
        _$map = _lodash2['default'].map(contextId.split('.'), function (id) {
          return parseInt(id, 10);
        });
        _$map2 = _slicedToArray(_$map, 2);
        appIdKey = _$map2[0];
        pageIdKey = _$map2[1];
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck));

      case 32:
        this.curContext = contextId;

      case 33:
        if (!(this.opts.enablePerformanceLogging && this.remote)) {
          context$1$0.next = 38;
          break;
        }

        _logger2['default'].debug('Starting performance log on \'' + this.curContext + '\'');
        this.logs.performance = new _deviceLogIosPerformanceLog2['default'](this.remote);
        context$1$0.next = 38;
        return _regeneratorRuntime.awrap(this.logs.performance.startCapture());

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowHandle = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        return context$1$0.abrupt('return', this.curContext.toString());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowHandles = function callee$0$0() {
  var pageArray, idArray;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.listWebFrames());

      case 4:
        pageArray = context$1$0.sent;

        this.windowHandleCache = _lodash2['default'].map(pageArray, this.massagePage);
        idArray = _lodash2['default'].map(this.windowHandleCache, 'id');

        // since we use this.contexts to manage selecting debugger pages, make
        // sure it gets populated even if someone did not use the
        // getContexts method
        if (!this.contexts) {
          this.contexts = idArray;
        }
        return context$1$0.abrupt('return', _lodash2['default'].map(idArray, function (id) {
          return id.toString();
        }));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setWindow = function callee$0$0(name, skipReadyCheck) {
  var pageIdKey;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        if (_lodash2['default'].includes(_lodash2['default'].map(this.windowHandleCache, 'id'), name)) {
          context$1$0.next = 4;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchWindowError();

      case 4:
        pageIdKey = parseInt(name, 10);

        if (this.isRealDevice()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.remote.selectPage(pageIdKey, skipReadyCheck));

      case 8:
        this.curContext = this.curWindowHandle = name;
        context$1$0.next = 24;
        break;

      case 11:
        if (!(name === this.curWindowHandle)) {
          context$1$0.next = 15;
          break;
        }

        _logger2['default'].debug('Remote debugger is already connected to window \'' + name + '\'');
        context$1$0.next = 24;
        break;

      case 15:
        if (_lodash2['default'].includes(_lodash2['default'].map(this.windowHandleCache, 'id'), name)) {
          context$1$0.next = 19;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchWindowError();

      case 19:
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 21:
        this.curContext = this.curWindowHandle = name;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.remote.connect(name));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.webContextIndex = function () {
  return this.curContext.replace(WEBVIEW_BASE, '') - 1;
};

extensions.initAutoWebview = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.opts.autoWebview) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].debug('Setting auto webview');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.navToInitialWebview(this));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.getContextsAndViews = function callee$0$0() {
  var useUrl = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

  var webviews, ctxs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, view;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving contexts and views');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.listWebFrames(useUrl));

      case 3:
        webviews = context$1$0.sent;
        ctxs = [{ id: NATIVE_WIN, view: {} }];

        this.contexts = [NATIVE_WIN];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 9;
        for (_iterator = _getIterator(webviews); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          view = _step.value;

          ctxs.push({ id: '' + WEBVIEW_BASE + view.id, view: view });
          this.contexts.push(view.id.toString());
        }
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 17:
        context$1$0.prev = 17;
        context$1$0.prev = 18;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 20:
        context$1$0.prev = 20;

        if (!_didIteratorError) {
          context$1$0.next = 23;
          break;
        }

        throw _iteratorError;

      case 23:
        return context$1$0.finish(20);

      case 24:
        return context$1$0.finish(17);

      case 25:
        return context$1$0.abrupt('return', ctxs);

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 13, 17, 25], [18,, 20, 24]]);
};

extensions.getNewRemoteDebugger = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', new _appiumRemoteDebugger.RemoteDebugger({
          bundleId: this.opts.bundleId,
          useNewSafari: this.useNewSafari(),
          pageLoadMs: this.pageLoadMs,
          platformVersion: this.opts.platformVersion
        }));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.listWebFrames = function callee$0$0() {
  var useUrl = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  var currentUrl, pageArray, appInfo, tryClosingAlert;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.opts.bundleId) {
          _logger2['default'].errorAndThrow('Cannot enter web frame without a bundle ID');
        }

        useUrl = useUrl && !!this.getCurrentUrl();
        _logger2['default'].debug('Selecting by url: ' + useUrl + ' ' + (useUrl ? '(expected url: \'' + this.getCurrentUrl() + '\')' : ''));

        currentUrl = useUrl ? this.getCurrentUrl() : undefined;
        pageArray = undefined;

        if (!(this.isRealDevice() && this.remote && this.opts.bundleId)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl));

      case 8:
        pageArray = context$1$0.sent;
        context$1$0.next = 56;
        break;

      case 11:
        if (!(this.remote && this.remote.appIdKey)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl));

      case 14:
        pageArray = context$1$0.sent;
        context$1$0.next = 56;
        break;

      case 17:
        if (!this.isRealDevice()) {
          context$1$0.next = 34;
          break;
        }

        context$1$0.prev = 18;

        this.remote = new _appiumRemoteDebugger.WebKitRemoteDebugger({
          port: this.opts.webkitDebugProxyPort,
          webkitResponseTimeout: this.opts.webkitResponseTimeout
        });
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl));

      case 22:
        pageArray = context$1$0.sent;
        context$1$0.next = 32;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](18);

        if (_lodash2['default'].includes(context$1$0.t0.message, 'connect ECONNREFUSED')) {
          context$1$0.next = 29;
          break;
        }

        throw context$1$0.t0;

      case 29:
        // eslint-disable-line curly

        _logger2['default'].warn('Attempted to get a list of webview contexts but could not connect to ' + 'ios-webkit-debug-proxy. If you expect to find webviews, please ensure ' + 'that the proxy is running and accessible');
        this.remote = null;
        pageArray = [];

      case 32:
        context$1$0.next = 56;
        break;

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(this.getNewRemoteDebugger());

      case 36:
        this.remote = context$1$0.sent;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.remote.connect());

      case 39:
        appInfo = context$1$0.sent;

        if (appInfo) {
          context$1$0.next = 43;
          break;
        }

        _logger2['default'].debug('Unable to connect to the remote debugger.');
        return context$1$0.abrupt('return', []);

      case 43:
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap(this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl));

      case 45:
        pageArray = context$1$0.sent;

        this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));

        tryClosingAlert = function tryClosingAlert() {
          var didDismiss;
          return _regeneratorRuntime.async(function tryClosingAlert$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.closeAlertBeforeTest());

              case 2:
                didDismiss = context$2$0.sent;

                if (didDismiss) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Close alert failed. Retry.');

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.prev = 48;
        context$1$0.next = 51;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(3, 4000, tryClosingAlert));

      case 51:
        context$1$0.next = 56;
        break;

      case 53:
        context$1$0.prev = 53;
        context$1$0.t1 = context$1$0['catch'](48);

        // if the loop to close alerts failed to dismiss, ignore,
        // otherwise log and throw the error
        if (context$1$0.t1.message !== 'Close alert failed. Retry.') {
          _logger2['default'].errorAndThrow(context$1$0.t1);
        }

      case 56:

        if (pageArray.length === 0) {
          // we have no web frames, but continue anyway
          _logger2['default'].debug('No web frames found.');
        }
        return context$1$0.abrupt('return', pageArray);

      case 58:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 25], [48, 53]]);
};

extensions.onPageChange = function callee$0$0(pageChangeNotification) {
  var appIdKey, pageArray, newIds, newPages, keyId, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, page, id, contextId, newPage, _curContext$split, _curContext$split2, curAppIdKey, curPageIdKey, needsPageLoad;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Remote debugger notified us of a new page listing: ' + JSON.stringify(pageChangeNotification));

        if (!this.selectingNewPage) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].debug('We are in the middle of selecting a page, ignoring');
        return context$1$0.abrupt('return');

      case 4:
        if (this.remote.appIdKey) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].debug('We have not yet connected, ignoring');
        return context$1$0.abrupt('return');

      case 7:
        appIdKey = pageChangeNotification.appIdKey;
        pageArray = pageChangeNotification.pageArray;
        newIds = [];
        newPages = [];
        keyId = null;
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 15;

        for (_iterator2 = _getIterator(pageArray); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          page = _step2.value;
          id = page.id.toString();

          newIds.push(id);
          if (page.isKey) {
            keyId = id;
          }
          contextId = appIdKey + '.' + id;

          if (!_lodash2['default'].includes(this.contexts, contextId)) {
            newPages.push(id);
            this.contexts.push(contextId);
          }
        }

        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](15);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError2) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError2;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        if (!keyId) {
          // if there is no key id, pull the first id from the page array and use that
          // as a stand in
          _logger2['default'].debug('No key id found. Choosing first id from page array');
          keyId = newIds[0] || null;
        }

        newPage = null;

        if (!(this.curContext === null)) {
          context$1$0.next = 37;
          break;
        }

        _logger2['default'].debug('We do not appear to have window set yet, ignoring');
        context$1$0.next = 69;
        break;

      case 37:
        _curContext$split = this.curContext.split('.');
        _curContext$split2 = _slicedToArray(_curContext$split, 2);
        curAppIdKey = _curContext$split2[0];
        curPageIdKey = _curContext$split2[1];

        if (!(curAppIdKey !== appIdKey)) {
          context$1$0.next = 44;
          break;
        }

        _logger2['default'].debug('Page change not referring to currently selected app, ignoring.');
        return context$1$0.abrupt('return');

      case 44:
        if (!newPages.length) {
          context$1$0.next = 49;
          break;
        }

        newPage = _lodash2['default'].last(newPages);
        _logger2['default'].debug('We have new pages, going to select page \'' + newPage + '\'');
        context$1$0.next = 69;
        break;

      case 49:
        if (_lodash2['default'].includes(newIds, curPageIdKey)) {
          context$1$0.next = 62;
          break;
        }

        _logger2['default'].debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

        if (!(keyId !== null)) {
          context$1$0.next = 55;
          break;
        }

        _logger2['default'].debug('Debugger already selected page \'' + keyId + '\', ' + 'confirming that choice.');
        context$1$0.next = 58;
        break;

      case 55:
        _logger2['default'].error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');
        this.setCurrentUrl(undefined);
        return context$1$0.abrupt('return');

      case 58:
        this.curContext = appIdKey + '.' + keyId;
        newPage = keyId;
        context$1$0.next = 69;
        break;

      case 62:
        _logger2['default'].debug('Checking if page needs to load');
        // If a window navigates to an anchor it doesn't always fire a page
        // callback event. Let's check if we wound up in such a situation.

        needsPageLoad = (function () {
          // need to map the page ids to context ids
          var contextArray = _lodash2['default'].map(pageArray, function (arr) {
            return appIdKey + '.' + arr.id;
          });
          return !_lodash2['default'].isEqual(_lodash2['default'].find(_this2.contexts, _this2.curContext), _lodash2['default'].find(contextArray, _this2.curContext));
        })();

        if (!needsPageLoad) {
          context$1$0.next = 68;
          break;
        }

        _logger2['default'].debug('Page load needed. Loading...');
        context$1$0.next = 68;
        return _regeneratorRuntime.awrap(this.remote.pageLoad());

      case 68:

        _logger2['default'].debug('New page listing is same as old, doing nothing');

      case 69:

        // make sure that the page listing isn't indicating a redirect
        if (_appiumSupport.util.hasValue(this.curContext)) {
          (function () {
            var currentPageId = parseInt(_lodash2['default'].last(_this2.curContext.split('.')), 10);
            var page = _lodash2['default'].find(pageArray, function (p) {
              return parseInt(p.id, 10) === currentPageId;
            });
            if (page && page.url !== _this2.getCurrentUrl()) {
              _logger2['default'].debug('Redirected from \'' + _this2.getCurrentUrl() + '\' to \'' + page.url + '\'');
              _this2.setCurrentUrl(page.url);
            }
          })();
        }

        if (!_appiumSupport.util.hasValue(newPage)) {
          context$1$0.next = 76;
          break;
        }

        this.selectingNewPage = true;
        context$1$0.next = 74;
        return _regeneratorRuntime.awrap(this.remote.selectPage(appIdKey, parseInt(newPage, 10)));

      case 74:
        this.selectingNewPage = false;
        this.curContext = appIdKey + '.' + newPage;

      case 76:
        this.windowHandleCache = _lodash2['default'].map(pageArray, this.massagePage);

      case 77:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[15, 19, 23, 31], [24,, 26, 30]]);
};

extensions.getLatestWebviewContextForTitle = function callee$0$0(regExp) {
  var contexts, matchingCtx, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, ctx;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getContextsAndViews());

      case 2:
        contexts = context$1$0.sent;
        matchingCtx = undefined;
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 7;
        _iterator3 = _getIterator(contexts);

      case 9:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 17;
          break;
        }

        ctx = _step3.value;

        if (!(ctx.view && (ctx.view.title && ctx.view.title.match(regExp) || ctx.view.url && ctx.view.url.match(regExp)))) {
          context$1$0.next = 14;
          break;
        }

        if (ctx.view.url !== 'about:blank') {
          matchingCtx = ctx;
        } else {
          // in the cases of Xcode < 5 (i.e., iOS SDK Version less than 7)
          // iOS 7.1, iOS 9.0 & iOS 9.1 in a webview (not in Safari)
          // we can have the url be `about:blank`
          if (parseFloat(this.iosSdkVersion) < 7 || parseFloat(this.iosSdkVersion) >= 9 || this.opts.platformVersion === '7.1' && this.opts.app && this.opts.app.toLowerCase() !== 'safari') {
            matchingCtx = ctx;
          }
        }
        return context$1$0.abrupt('break', 17);

      case 14:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 9;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError3) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError3;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', matchingCtx ? matchingCtx.id : undefined);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 19, 23, 31], [24,, 26, 30]]);
};

// Right now we don't necessarily wait for webview
// and frame to load, which leads to race conditions and flakiness,
// let's see if we can transition to something better
extensions.useNewSafari = function () {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.navToInitialWebview = function callee$0$0() {
  var timeout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        timeout = 0;

        if (this.isRealDevice()) {
          timeout = 3000;
          _logger2['default'].debug('Waiting for ' + timeout + ' ms before navigating to view.');
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(timeout));

      case 4:
        if (!this.useNewSafari()) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.typeAndNavToUrl());

      case 7:
        context$1$0.next = 16;
        break;

      case 9:
        if (!(parseInt(this.iosSdkVersion, 10) >= 7 && !this.isRealDevice() && this.opts.safari)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.navToViewThroughFavorites());

      case 12:
        context$1$0.next = 16;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/.*/));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function openNewPage() {
  var newPageButton;
  return _regeneratorRuntime.async(function openNewPage$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findElement('xpath', "//UIAButton[contains(@name,'New page')]"));

      case 2:
        newPageButton = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.nativeTap(newPageButton.ELEMENT));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

extensions.typeAndNavToUrl = function callee$0$0() {
  var address, tries, MAX_TRIES, navigate;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        address = this.opts.address ? this.opts.address : '127.0.0.1';

        this.setCurrentUrl(this.caps.safariInitialUrl || 'http://' + address + ':' + this.opts.port + '/welcome');

        tries = 0;
        MAX_TRIES = 2;

        navigate = function navigate() {
          var oldImpWait, el, _el;

          return _regeneratorRuntime.async(function navigate$(context$2$0) {
            var _this3 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                oldImpWait = this.implicitWaitMs;

                this.implicitWaitMs = 7000;

                // find the url bar, and tap on it. retry to make sure we don't try
                // too soon while the view is still loading
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(3, 1000, function callee$2$0() {
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        context$3$0.next = 2;
                        return _regeneratorRuntime.awrap(this.findElement('accessibility id', 'URL'));

                      case 2:
                        return context$3$0.abrupt('return', context$3$0.sent);

                      case 3:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this3);
                }));

              case 4:
                el = context$2$0.sent;

                this.implicitWaitMs = oldImpWait;

                context$2$0.prev = 6;
                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

              case 9:
                context$2$0.next = 24;
                break;

              case 11:
                context$2$0.prev = 11;
                context$2$0.t0 = context$2$0['catch'](6);

                if (!_lodash2['default'].includes(context$2$0.t0.message, 'could not be tapped')) {
                  context$2$0.next = 23;
                  break;
                }

                if (!(tries++ >= MAX_TRIES)) {
                  context$2$0.next = 16;
                  break;
                }

                throw context$2$0.t0;

              case 16:
                context$2$0.next = 18;
                return _regeneratorRuntime.awrap(openNewPage());

              case 18:
                context$2$0.next = 20;
                return _regeneratorRuntime.awrap(navigate());

              case 20:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 23:
                throw context$2$0.t0;

              case 24:
                context$2$0.prev = 24;
                context$2$0.next = 27;
                return _regeneratorRuntime.awrap(this.findElement('class name', 'UIATextField'));

              case 27:
                _el = context$2$0.sent;
                context$2$0.next = 30;
                return _regeneratorRuntime.awrap(this.setValueImmediate(this.getCurrentUrl(), _el));

              case 30:
                context$2$0.next = 39;
                break;

              case 32:
                context$2$0.prev = 32;
                context$2$0.t1 = context$2$0['catch'](24);

                if (!(tries++ >= MAX_TRIES)) {
                  context$2$0.next = 36;
                  break;
                }

                throw context$2$0.t1;

              case 36:
                context$2$0.next = 38;
                return _regeneratorRuntime.awrap(navigate());

              case 38:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 39:
                context$2$0.prev = 39;
                context$2$0.next = 42;
                return _regeneratorRuntime.awrap(this.findElement('accessibility id', 'Go'));

              case 42:
                el = context$2$0.sent;
                context$2$0.next = 45;
                return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

              case 45:
                context$2$0.next = 51;
                break;

              case 47:
                context$2$0.prev = 47;
                context$2$0.t2 = context$2$0['catch'](39);

                if (_lodash2['default'].includes(context$2$0.t2.message, 'could not be tapped')) {
                  _logger2['default'].error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
                }
                throw context$2$0.t2;

              case 51:
                context$2$0.next = 53;
                return _regeneratorRuntime.awrap(this.navToViewWithTitle(undefined, new RegExp(this.getCurrentUrl(), 'i')));

              case 53:
                context$2$0.next = 55;
                return _regeneratorRuntime.awrap(this.remote.pageUnload());

              case 55:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4, [[6, 11], [24, 32], [39, 47]]);
        };

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(navigate());

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.navToViewThroughFavorites = function callee$0$0() {
  var oldImpWait, el, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('We are on iOS7+ simulator: clicking apple button to get into a webview');
        oldImpWait = this.implicitWaitMs;

        this.implicitWaitMs = 7000; // wait 7s for apple button to exist

        el = undefined;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.findElement('xpath', '//UIAScrollView[1]/UIAButton[1]'));

      case 7:
        el = context$1$0.sent;
        context$1$0.next = 18;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](4);
        msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

        _logger2['default'].error(msg);
        this.implicitWaitMs = oldImpWait;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/.*/i));

      case 17:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 18:
        this.implicitWaitMs = oldImpWait;
        context$1$0.prev = 19;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

      case 22:
        context$1$0.next = 28;
        break;

      case 24:
        context$1$0.prev = 24;
        context$1$0.t1 = context$1$0['catch'](19);
        msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

        _logger2['default'].error(msg);

      case 28:
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/apple/i));

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 10], [19, 24]]);
};

extensions.navToViewWithTitle = function callee$0$0(titleRegex, urlRegExp) {
  var start, spinTime, spinHandles;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this5 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Navigating to most recently opened webview');
        start = Date.now();
        spinTime = 500;

        spinHandles = function spinHandles() {
          var res, latestWindow, element;
          return _regeneratorRuntime.async(function spinHandles$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                res = undefined;
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(this.getLatestWebviewContextForTitle(titleRegex || urlRegExp));

              case 4:
                res = context$2$0.sent;
                context$2$0.next = 12;
                break;

              case 7:
                context$2$0.prev = 7;
                context$2$0.t0 = context$2$0['catch'](1);

                if (!(context$2$0.t0.message.indexOf('Could not connect to a valid app after') === -1)) {
                  context$2$0.next = 11;
                  break;
                }

                throw new Error('Could not navigate to webview! Err: ' + context$2$0.t0.message);

              case 11:
                _logger2['default'].debug('Could not navigate to webview. Retrying if possible.');

              case 12:
                if (!res) {
                  context$2$0.next = 20;
                  break;
                }

                latestWindow = res;

                _logger2['default'].debug('Picking webview \'' + latestWindow + '\'');
                context$2$0.next = 17;
                return _regeneratorRuntime.awrap(this.setContext(latestWindow));

              case 17:
                context$2$0.next = 19;
                return _regeneratorRuntime.awrap(this.remote.cancelPageLoad());

              case 19:
                return context$2$0.abrupt('return');

              case 20:
                if (!(Date.now() - start >= 90000)) {
                  context$2$0.next = 22;
                  break;
                }

                throw new Error('Could not navigate to webview; there are none!');

              case 22:

                _logger2['default'].warn("Could not find any webviews yet, refreshing/retrying");

                if (!(this.isRealDevice() || !this.opts.safari)) {
                  context$2$0.next = 29;
                  break;
                }

                context$2$0.next = 26;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(spinTime));

              case 26:
                context$2$0.next = 28;
                return _regeneratorRuntime.awrap(spinHandles());

              case 28:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 29:
                element = undefined;
                context$2$0.prev = 30;

                _logger2['default'].debug('Finding and tapping reload button');
                context$2$0.next = 34;
                return _regeneratorRuntime.awrap(this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false));

              case 34:
                element = context$2$0.sent;
                context$2$0.next = 37;
                return _regeneratorRuntime.awrap(this.nativeTap(element.ELEMENT));

              case 37:
                context$2$0.next = 45;
                break;

              case 39:
                context$2$0.prev = 39;
                context$2$0.t1 = context$2$0['catch'](30);

                _logger2['default'].warn('Error finding and tapping reload button: ' + context$2$0.t1.message);
                _logger2['default'].warn('Retrying.');
                context$2$0.next = 45;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(spinTime));

              case 45:
                context$2$0.next = 47;
                return _regeneratorRuntime.awrap(spinHandles());

              case 47:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 48:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this5, [[1, 7], [30, 39]]);
        };

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(spinHandles());

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.closeAlertBeforeTest = function callee$0$0() {
  var present;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.alertIsPresent()'));

      case 2:
        present = context$1$0.sent;

        if (present) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 5:

        _logger2['default'].debug('Alert present before starting test, let us banish it');
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.dismissAlert()'));

      case 8:
        _logger2['default'].debug('Alert banished!');
        return context$1$0.abrupt('return', true);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.stopRemote = function callee$0$0() {
  var closeWindowBeforeDisconnecting = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.remote) {
          _logger2['default'].errorAndThrow('Tried to leave a web frame but were not in one');
        }

        if (!closeWindowBeforeDisconnecting) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.closeWindow());

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 6:
        this.curContext = null;
        this.curWebFrames = [];
        this.curWebCoords = null;
        this.remote = null;

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.isWebContext = function () {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

helpers.setCurrentUrl = function (url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function () {
  return this._currentUrl;
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.NATIVE_WIN = NATIVE_WIN;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
exports['default'] = extensions;

// already in the named context, no need to do anything

// switching into a webview context

// if contexts have not already been retrieved, get them

// `contextId` will be in the form of `appId.pageId` in this case

// attempt to start performance logging, if requested

// real device, and already connected

// simulator, and already connected

// real device, and not connected

// it is reasonable to expect that this might be called when there is no
// webkit remote debugger to connect to

// simulator, and not connected
// eslint-disable-line curly

// generally this means that Safari is in page viewing mode
// so try to open a new page and then redo the navigation

// get the last address element and set the url

// this is flakey on certain systems so we retry until we get something
// ios sims: safari opens but the text field can't be found
// eslint-disable-line curly

// make it happen

// wait for page to finish loading.

// no webview was found

// too slow, get out

// on a real device, when not using Safari, we just want to try again

// find the reload button and tap it, if possible

// try it all again
//# sourceMappingURL=data:application/json;charset=utf8;base64,
