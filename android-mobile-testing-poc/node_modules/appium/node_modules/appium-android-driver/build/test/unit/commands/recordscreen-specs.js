'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = new _2['default']();
var adb = new _appiumAdb2['default']();
driver.adb = adb;
describe('recording the screen', function () {
  this.timeout(60000);

  describe('basic', (0, _appiumTestSupport.withMocks)({ adb: adb, driver: driver, fs: _appiumSupport.fs, temp: _temp2['default'] }, function (mocks) {
    var localFile = '/path/to/local.mp4';
    var mediaContent = Buffer.from('appium');

    it('should fail to recording the screen on an older emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isEmulator').returns(true);
            mocks.adb.expects('getApiLevel').returns(26);

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/Screen recording does not work on emulators/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should fail to recording the screen on a device with API level 18', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isEmulator').returns(false);
            mocks.adb.expects('getApiLevel').returns(18);

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/Screen recording not available on API Level 18. Minimum API Level is 19/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('beginning the recording', function () {
      beforeEach(function () {
        driver._recentScreenRecordingPath = null;
        mocks.driver.expects('isEmulator').atLeast(1).returns(false);
        mocks.adb.expects('getApiLevel').atLeast(1).returns(19);
        mocks.adb.expects('getPIDsByName').atLeast(1).withExactArgs('screenrecord').returns([]);
      });
      afterEach(function () {
        mocks.driver.verify();
        mocks.adb.verify();
        mocks.fs.verify();
        mocks.temp.verify();
      });

      it('should call adb to start screen recording', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects('shell').once().returns(new _bluebird2['default'](function () {}));
              mocks.adb.expects('fileSize').once().returns(39571);

              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(driver.startRecordingScreen());

            case 4:
              driver._recentScreenRecordingPath.should.not.be.empty;

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should return previous capture before starting a new recording', function callee$3$0() {
        var remotePath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              remotePath = '/sdcard/video.mp4';

              mocks.adb.expects('shell').returns(new _bluebird2['default'](function () {}));
              mocks.adb.expects('fileSize').once().returns(39571);
              mocks.adb.expects('pull').once().withExactArgs(remotePath, localFile);
              mocks.fs.expects('readFile').once().withExactArgs(localFile).returns(mediaContent);
              mocks.adb.expects('rimraf').once().withExactArgs(remotePath);
              mocks.fs.expects('rimraf').withExactArgs(localFile).once();
              mocks.fs.expects('stat').once().withExactArgs(localFile).returns({ size: 100 });
              mocks.temp.expects('path').once().returns(localFile);

              driver._recentScreenRecordingPath = remotePath;
              context$4$0.next = 12;
              return _regeneratorRuntime.awrap(driver.startRecordingScreen());

            case 12:
              context$4$0.t0 = mediaContent.toString('base64');
              context$4$0.sent.should.be.eql(context$4$0.t0);

              driver._recentScreenRecordingPath.should.not.be.empty;
              driver._recentScreenRecordingPath.should.not.be.eql(localFile);

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should fail if adb screen recording errors out', function callee$3$0() {
        var shellStub;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects('fileSize').returns(31);
              shellStub = _sinon2['default'].stub(adb, 'shell');
              context$4$0.prev = 2;

              shellStub.returns(_bluebird2['default'].reject(new Error('shell command failed')));

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/shell command failed/));

            case 6:
              context$4$0.prev = 6;

              shellStub.restore();
              return context$4$0.finish(6);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[2,, 6, 9]]);
      });

      it('should call ls multiple times until size is big enough', function callee$3$0() {
        var fileSizeStub;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects('shell').once().returns(new _bluebird2['default'](function () {}));
              fileSizeStub = _sinon2['default'].stub(adb, 'fileSize');
              context$4$0.prev = 2;

              fileSizeStub.onCall(0).returns(31).onCall(1).returns(42);

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(driver.startRecordingScreen());

            case 6:
              context$4$0.prev = 6;

              fileSizeStub.restore();
              return context$4$0.finish(6);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[2,, 6, 9]]);
      });

      it('should call ls multiple times and fail if size never gets big enough', function callee$3$0() {
        var fileSizeStub;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects('shell').once().returns(new _bluebird2['default'](function () {}));
              fileSizeStub = _sinon2['default'].stub(adb, 'fileSize');
              context$4$0.prev = 2;

              fileSizeStub.withArgs().returns(31);

              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/is still too small: 31 bytes/));

            case 6:
              context$4$0.prev = 6;

              fileSizeStub.restore();
              return context$4$0.finish(6);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[2,, 6, 9]]);
      });
    });

    describe('stopRecordingScreen', function () {
      var psOutput = '\n      USER           PID  PPID     VSZ    RSS WCHAN            ADDR S NAME\n      root          8384     2       0      0 worker_thread       0 S [kworker/0:1]\n      u0_a43        8400  1510 1449772  90992 ep_poll             0 S com.google.android.apps.messaging:rcs\n      root          8423     2       0      0 worker_thread       0 S [kworker/u4:2]\n      u0_a43        8435  1510 1452544  93576 ep_poll             0 S com.google.android.apps.messaging\n      u0_a7         8471  1510 1427536  79804 ep_poll             0 S android.process.acore\n      root          8669     2       0      0 worker_thread       0 S [kworker/u5:1]\n      u0_a35        8805  1510 1426428  61540 ep_poll             0 S com.google.android.apps.wallpaper\n      u0_a10        8864  1510 1427412  69752 ep_poll             0 S android.process.media\n      root          8879     2       0      0 worker_thread       0 S [kworker/1:1]\n      u0_a60        8897  1510 1490420 108852 ep_poll             0 S com.google.android.apps.photos\n      shell         9136  1422    7808   2784 0            ebddfaf0 R ps\n      ';

      beforeEach(function () {
        mocks.driver.expects('isEmulator').atLeast(1).returns(false);
        mocks.adb.expects('getApiLevel').atLeast(1).returns(19);
      });
      afterEach(function () {
        mocks.driver.verify();
        mocks.adb.verify();
        mocks.fs.verify();
        mocks.temp.verify();
      });

      it('should kill the process and get the content of the created mp4 file using lsof', function callee$3$0() {
        var pids, remotePath;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              pids = ['1'];

              driver._recentScreenRecordingPath = null;
              remotePath = '/sdcard/file.mp4';

              mocks.adb.expects('getPIDsByName').withExactArgs('screenrecord').atLeast(1).returns(pids);
              mocks.adb.expects('shell').withExactArgs(['lsof', '-p', pids.join(',')]).returns({ output: '\n          screenrec 11328      shell  mem       REG              253,0   1330160        554 /system/bin/linker64\n          screenrec 11328      shell    0u     unix                          0t0      99935 socket\n          screenrec 11328      shell    1u     unix                          0t0      99935 socket\n          screenrec 11328      shell    2u     unix                          0t0      99937 socket\n          screenrec 11328      shell    3u      CHR              10,64       0t0      12300 /dev/binder\n          screenrec 11328      shell    4u     unix                          0t0     101825 socket\n          screenrec 11328      shell    5w      CHR              254,0       0t0       2923 /dev/pmsg0\n          screenrec 11328      shell    6u      CHR              10,62       0t0      11690 /dev/ashmem\n          screenrec 11328      shell    7u      CHR              10,62       0t0      11690 /dev/ashmem\n          screenrec 11328      shell    8w      REG                0,5         0       6706 /sys/kernel/debug/tracing/trace_marker\n          screenrec 11328      shell    9u      REG               0,19     11521     294673 ' + remotePath + '\n        ' });
              mocks.adb.expects('shell').withExactArgs(['kill', '-2'].concat(pids));
              mocks.adb.expects('shell').withExactArgs(['ps']).returns(psOutput);
              mocks.adb.expects('pull').once().withExactArgs(remotePath, localFile);
              mocks.fs.expects('readFile').once().withExactArgs(localFile).returns(mediaContent);
              mocks.adb.expects('rimraf').once().withExactArgs(remotePath);
              mocks.fs.expects('rimraf').once().withExactArgs(localFile);
              mocks.fs.expects('stat').once().withExactArgs(localFile).returns({ size: 100 });
              mocks.temp.expects('path').once().returns(localFile);

              context$4$0.next = 15;
              return _regeneratorRuntime.awrap(driver.stopRecordingScreen());

            case 15:
              context$4$0.t0 = mediaContent.toString('base64');
              context$4$0.sent.should.eql(context$4$0.t0);

            case 17:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should use the remembered file path if present', function callee$3$0() {
        var pids;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              pids = ['1'];

              driver._recentScreenRecordingPath = '/sdcard/file.mp4';
              mocks.adb.expects('getPIDsByName').withExactArgs('screenrecord').atLeast(1).returns(pids);
              mocks.adb.expects('shell').withExactArgs(['kill', '-2'].concat(pids));
              mocks.adb.expects('shell').withExactArgs(['ps']).returns(psOutput);
              mocks.adb.expects('pull').once().withExactArgs(driver._recentScreenRecordingPath, localFile);
              mocks.fs.expects('readFile').once().withExactArgs(localFile).returns(mediaContent);
              mocks.adb.expects('rimraf').once().withExactArgs(driver._recentScreenRecordingPath);
              mocks.fs.expects('rimraf').withExactArgs(localFile).once();
              mocks.fs.expects('stat').once().withExactArgs(localFile).returns({ size: 100 });
              mocks.temp.expects('path').once().returns(localFile);

              context$4$0.next = 13;
              return _regeneratorRuntime.awrap(driver.stopRecordingScreen());

            case 13:
              context$4$0.t0 = mediaContent.toString('base64');
              context$4$0.sent.should.eql(context$4$0.t0);

            case 15:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should fail if the recorded file is too large', function callee$3$0() {
        var pids;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              pids = ['1'];

              driver._recentScreenRecordingPath = '/sdcard/file.mp4';
              mocks.adb.expects('getPIDsByName').withExactArgs('screenrecord').atLeast(1).returns(pids);
              mocks.adb.expects('shell').withExactArgs(['kill', '-2'].concat(pids));
              mocks.adb.expects('shell').withExactArgs(['ps']).returns(psOutput);
              mocks.adb.expects('pull').once().withExactArgs(driver._recentScreenRecordingPath, localFile);
              mocks.adb.expects('rimraf').once().withExactArgs(driver._recentScreenRecordingPath);
              mocks.fs.expects('rimraf').withExactArgs(localFile).once();
              mocks.fs.expects('stat').once().withExactArgs(localFile).returns({ size: process.memoryUsage().heapTotal });
              mocks.temp.expects('path').once().returns(localFile);

              context$4$0.next = 12;
              return _regeneratorRuntime.awrap(driver.stopRecordingScreen().should.eventually.be.rejectedWith(/is too large/));

            case 12:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should return empty string if no recording processes are running', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              driver._recentScreenRecordingPath = null;
              mocks.adb.expects('getPIDsByName').atLeast(1).withExactArgs('screenrecord').returns([]);

              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(driver.stopRecordingScreen());

            case 4:
              context$4$0.sent.should.eql('');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
