'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _libAndroidHelpers = require('../../lib/android-helpers');

var _libAndroidHelpers2 = _interopRequireDefault(_libAndroidHelpers);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumSupport = require('appium-support');

var _appiumUnlock = require('appium-unlock');

var _libUnlockHelpers = require('../../lib/unlock-helpers');

var _libUnlockHelpers2 = _interopRequireDefault(_libUnlockHelpers);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var should = _chai2['default'].should();
var REMOTE_TEMP_PATH = "/data/local/tmp";
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Android Helpers', function () {
  var adb = new _appiumAdb2['default']();
  describe('parseJavaVersion', function () {
    it('should correctly parse java version', function () {
      _libAndroidHelpers2['default'].parseJavaVersion('java version "1.8.0_40"\n        Java(TM) SE Runtime Environment (build 1.8.0_40-b27)').should.be.equal("1.8.0_40");
    });
    it('should return null if it cannot parse java verstion', function () {
      should.not.exist(_libAndroidHelpers2['default'].parseJavaVersion('foo bar'));
    });
    it('should parse OpenJDK versioning', function () {
      _libAndroidHelpers2['default'].parseJavaVersion('openjdk version 1.8').should.be.equal('1.8');
    });
  });

  describe('getJavaVersion', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process }, function (mocks) {
    it('should correctly get java version', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.teen_process.expects('exec').withExactArgs('java', ['-version']).returns({ stderr: 'java version "1.8.0_40"' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getJavaVersion());

          case 3:
            context$3$0.sent.should.equal('1.8.0_40');

            mocks.teen_process.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return null if it cannot parse java verstion', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.teen_process.expects('exec').withExactArgs('java', ['-version']).returns({ stderr: 'foo bar' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getJavaVersion().should.eventually.be.rejectedWith('Java'));

          case 3:
            mocks.teen_process.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('prepareEmulator', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    var opts = { avd: "foo@bar", avdArgs: "", language: "en", locale: "us" };
    it('should not launch avd if one is already running', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getRunningAVD').withExactArgs('foobar').returns("foo");
            mocks.adb.expects('launchAVD').never();
            mocks.adb.expects('killEmulator').never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].prepareEmulator(adb, opts));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should launch avd if one is already running', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getRunningAVD').withExactArgs('foobar').returns(null);
            mocks.adb.expects('launchAVD').withExactArgs('foo@bar', '', 'en', 'us', undefined, undefined).returns("");
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].prepareEmulator(adb, opts));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should kill emulator if avdArgs contains -wipe-data', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { avd: "foo@bar", avdArgs: "-wipe-data" };

            mocks.adb.expects('getRunningAVD').withExactArgs('foobar').returns('foo');
            mocks.adb.expects('killEmulator').withExactArgs('foobar').once();
            mocks.adb.expects('launchAVD').once();
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].prepareEmulator(adb, opts));

          case 6:
            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail if avd name is not specified', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].prepareEmulator(adb, {}).should.eventually.be.rejected);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('prepareAVDArgs', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    it('should set the correct avdArgs', function callee$2$0() {
      var avdArgs;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            avdArgs = '-wipe-data';

            _libAndroidHelpers2['default'].prepareAVDArgs({}, adb, avdArgs).should.equal(avdArgs);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should add headless arg', function callee$2$0() {
      var avdArgs, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            avdArgs = '-wipe-data';
            args = _libAndroidHelpers2['default'].prepareAVDArgs({ isHeadless: true }, adb, avdArgs);

            args.should.have.string('-wipe-data');
            args.should.have.string('-no-window');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should add network speed arg', function callee$2$0() {
      var avdArgs, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            avdArgs = '-wipe-data';

            mocks.helpers.expects('ensureNetworkSpeed').once().returns('edge');
            args = _libAndroidHelpers2['default'].prepareAVDArgs({ networkSpeed: 'edge' }, adb, avdArgs);

            args.should.have.string('-wipe-data');
            args.should.have.string('-netspeed edge');
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not include empty avdArgs', function callee$2$0() {
      var avdArgs, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            avdArgs = '';
            args = _libAndroidHelpers2['default'].prepareAVDArgs({ isHeadless: true }, adb, avdArgs);

            args.should.eql('-no-window');

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('ensureNetworkSpeed', function () {
    it('should return value if network speed is valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.NETWORK_SPEED = { GSM: 'gsm' };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].ensureNetworkSpeed(adb, 'gsm').should.be.equal('gsm'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return ADB.NETWORK_SPEED.FULL if network speed is invalid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.NETWORK_SPEED = { FULL: 'full' };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].ensureNetworkSpeed(adb, 'invalid').should.be.equal('full'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('ensureDeviceLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call setDeviceLanguageCountry', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('setDeviceLanguageCountry').withExactArgs('en', 'US').once();
            mocks.adb.expects('ensureCurrentLocale').withExactArgs('en', 'US').once().returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].ensureDeviceLocale(adb, 'en', 'US'));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should never call setDeviceLanguageCountry', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('setDeviceLanguageCountry').never();
            mocks.adb.expects('getApiLevel').never();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].ensureDeviceLocale(adb));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call setDeviceLanguageCountry with throw', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('setDeviceLanguageCountry').withExactArgs('fr', 'FR').once();
            mocks.adb.expects('ensureCurrentLocale').withExactArgs('fr', 'FR').once().returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].ensureDeviceLocale(adb, 'fr', 'FR').should.eventually.be.rejectedWith(Error, 'Failed to set language: fr and country: FR'));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));

  describe('getDeviceInfoFromCaps', function () {
    // list of device/emu udids to their os versions
    // using list instead of map to preserve order
    var devices = [{ udid: 'emulator-1234', os: '4.9.2' }, { udid: 'rotalume-1339', os: '5.1.5' }, { udid: 'rotalume-1338', os: '5.0.1' }, { udid: 'rotalume-1337', os: '5.0.1' }, { udid: 'roamulet-9000', os: '6.0' }, { udid: 'roamulet-0', os: '2.3' }, { udid: '0123456789', os: 'wellhellothere' }];
    var curDeviceId = '';

    before(function () {
      _sinon2['default'].stub(_appiumAdb2['default'], 'createADB').callsFake(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          var _this = this;

          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              return context$4$0.abrupt('return', {
                getDevicesWithRetry: function getDevicesWithRetry() {
                  return _regeneratorRuntime.async(function getDevicesWithRetry$(context$5$0) {
                    while (1) switch (context$5$0.prev = context$5$0.next) {
                      case 0:
                        return context$5$0.abrupt('return', _lodash2['default'].map(devices, function (device) {
                          return { udid: device.udid };
                        }));

                      case 1:
                      case 'end':
                        return context$5$0.stop();
                    }
                  }, null, _this);
                },
                getPortFromEmulatorString: function getPortFromEmulatorString() {
                  return 1234;
                },
                getRunningAVD: function getRunningAVD() {
                  return { udid: 'emulator-1234', port: 1234 };
                },
                setDeviceId: function setDeviceId(udid) {
                  curDeviceId = udid;
                },
                getPlatformVersion: function getPlatformVersion() {
                  return _lodash2['default'].filter(devices, { udid: curDeviceId })[0].os;
                },
                curDeviceId: 'emulator-1234',
                emulatorPort: 1234
              });

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    after(function () {
      _appiumAdb2['default'].createADB.restore();
    });

    it('should throw error when udid not in list', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              udid: 'foomulator'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps).should.be.rejectedWith('foomulator'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get deviceId and emPort when udid is present', function callee$2$0() {
      var caps, _ref, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              udid: 'emulator-1234'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref = context$3$0.sent;
            udid = _ref.udid;
            emPort = _ref.emPort;

            udid.should.equal('emulator-1234');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get first deviceId and emPort if avd, platformVersion, and udid aren\'t given', function callee$2$0() {
      var _ref2, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps());

          case 2:
            _ref2 = context$3$0.sent;
            udid = _ref2.udid;
            emPort = _ref2.emPort;

            udid.should.equal('emulator-1234');
            emPort.should.equal(1234);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get deviceId and emPort when avd is present', function callee$2$0() {
      var caps, _ref3, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              avd: 'AVD_NAME'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref3 = context$3$0.sent;
            udid = _ref3.udid;
            emPort = _ref3.emPort;

            udid.should.equal('emulator-1234');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail if the given platformVersion is not found', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              platformVersion: '1234567890'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps).should.be.rejectedWith('Unable to find an active device or emulator with OS 1234567890'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get deviceId and emPort if platformVersion is found and unique', function callee$2$0() {
      var caps, _ref4, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              platformVersion: '6.0'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref4 = context$3$0.sent;
            udid = _ref4.udid;
            emPort = _ref4.emPort;

            udid.should.equal('roamulet-9000');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the first deviceId and emPort if platformVersion is found multiple times', function callee$2$0() {
      var caps, _ref5, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              platformVersion: '5.0.1'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref5 = context$3$0.sent;
            udid = _ref5.udid;
            emPort = _ref5.emPort;

            udid.should.equal('rotalume-1338');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the first deviceId and emPort if platformVersion is found multiple times and is a partial match', function callee$2$0() {
      var caps, _ref6, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              platformVersion: '5.0'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref6 = context$3$0.sent;
            udid = _ref6.udid;
            emPort = _ref6.emPort;

            udid.should.equal('rotalume-1338');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get deviceId and emPort by udid if udid and platformVersion are given', function callee$2$0() {
      var caps, _ref7, udid, emPort;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = {
              udid: '0123456789',
              platformVersion: '2.3'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getDeviceInfoFromCaps(caps));

          case 3:
            _ref7 = context$3$0.sent;
            udid = _ref7.udid;
            emPort = _ref7.emPort;

            udid.should.equal('0123456789');
            emPort.should.equal(1234);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('createADB', function () {
    var curDeviceId = '';
    var emulatorPort = -1;
    before(function () {
      _sinon2['default'].stub(_appiumAdb2['default'], 'createADB').callsFake(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              return context$4$0.abrupt('return', {
                setDeviceId: function setDeviceId(udid) {
                  curDeviceId = udid;
                },
                setEmulatorPort: function setEmulatorPort(emPort) {
                  emulatorPort = emPort;
                }
              });

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    after(function () {
      _appiumAdb2['default'].createADB.restore();
    });
    it('should create adb and set device id and emulator port', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].createADB("1.7", "111222", "111", "222", true, "remote_host", true));

          case 2:
            _appiumAdb2['default'].createADB.calledWithExactly({
              javaVersion: "1.7",
              adbPort: "222",
              suppressKillServer: true,
              remoteAdbHost: "remote_host",
              clearDeviceLogsOnStart: true
            }).should.be['true'];
            curDeviceId.should.equal("111222");
            emulatorPort.should.equal("111");

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not set emulator port if emPort is undefined', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            emulatorPort = 5555;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].createADB());

          case 3:
            emulatorPort.should.equal(5555);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLaunchInfoFromManifest', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should return when no app present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('packageAndLaunchActivityFromManifest').never();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getLaunchInfo(adb, {}));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return when appPackage & appActivity are already present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('packageAndLaunchActivityFromManifest').never();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getLaunchInfo(adb, { app: "foo", appPackage: "bar",
              appActivity: "act" }));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return package and launch activity from manifest', function callee$2$0() {
      var result;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('packageAndLaunchActivityFromManifest').withExactArgs('foo').returns({ apkPackage: 'pkg', apkActivity: 'ack' });
            result = { appPackage: 'pkg', appWaitPackage: 'pkg',
              appActivity: 'ack', appWaitActivity: 'ack' };
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getLaunchInfo(adb, { app: "foo" }));

          case 4:
            context$3$0.t0 = result;
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not override appPackage, appWaitPackage, appActivity, appWaitActivity ' + 'from manifest if they are allready defined in opts', function callee$2$0() {
      var optsFromManifest, inOpts, outOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            optsFromManifest = { apkPackage: 'mpkg', apkActivity: 'mack' };

            mocks.adb.expects('packageAndLaunchActivityFromManifest').withExactArgs('foo').twice().returns(optsFromManifest);

            inOpts = { app: 'foo', appActivity: 'ack', appWaitPackage: 'wpkg', appWaitActivity: 'wack' };
            outOpts = { appPackage: 'mpkg', appActivity: 'ack', appWaitPackage: 'wpkg', appWaitActivity: 'wack' };
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getLaunchInfo(adb, inOpts));

          case 6:
            context$3$0.t0 = outOpts;
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            inOpts = { app: 'foo', appPackage: 'pkg', appWaitPackage: 'wpkg', appWaitActivity: 'wack' };
            outOpts = { appPackage: 'pkg', appActivity: 'mack', appWaitPackage: 'wpkg', appWaitActivity: 'wack' };
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].getLaunchInfo(adb, inOpts));

          case 12:
            context$3$0.t1 = outOpts;
            context$3$0.sent.should.deep.equal(context$3$0.t1);

            mocks.adb.verify();

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('resetApp', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    var localApkPath = 'local';
    var pkg = 'pkg';
    it('should complain if opts arent passed correctly', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].resetApp(adb, {}).should.eventually.be.rejectedWith(/appPackage/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to do full reset', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('install').once().withArgs(localApkPath);
            mocks.adb.expects('forceStop').withExactArgs(pkg).once();
            mocks.adb.expects('isAppInstalled').once().withExactArgs(pkg).returns(true);
            mocks.adb.expects('uninstallApk').once().withExactArgs(pkg);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].resetApp(adb, { app: localApkPath, appPackage: pkg }));

          case 6:
            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to do fast reset', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().withExactArgs(pkg).returns(true);
            mocks.adb.expects('forceStop').withExactArgs(pkg).once();
            mocks.adb.expects('clear').withExactArgs(pkg).once().returns('Success');
            mocks.adb.expects('grantAllPermissions').once().withExactArgs(pkg);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].resetApp(adb, { app: localApkPath, appPackage: pkg, fastReset: true, autoGrantPermissions: true }));

          case 6:
            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should perform reinstall if app is not installed and fast reset is requested', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().withExactArgs(pkg).returns(false);
            mocks.adb.expects('forceStop').withExactArgs(pkg).never();
            mocks.adb.expects('clear').withExactArgs(pkg).never();
            mocks.adb.expects('uninstallApk').never();
            mocks.adb.expects('install').once().withArgs(localApkPath);
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].resetApp(adb, { app: localApkPath, appPackage: pkg, fastReset: true }));

          case 7:
            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));

  describe('installApk', (0, _appiumTestSupport.withMocks)({ adb: adb, fs: _appiumSupport.fs, helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    //use mock appium capabilities for this test
    var opts = {
      app: 'local',
      appPackage: 'pkg',
      androidInstallTimeout: 90000
    };
    it('should complain if appPackage is not passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installApk(adb, {}).should.eventually.be.rejectedWith(/appPackage/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should install/upgrade and reset app if fast reset is set to true', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().returns(true);
            mocks.adb.expects('installOrUpgrade').once().withArgs(opts.app, opts.appPackage);
            mocks.helpers.expects('resetApp').once().withArgs(adb);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installApk(adb, _Object$assign({}, opts, { fastReset: true })));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should reinstall app if full reset is set to true', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').never();
            mocks.helpers.expects('resetApp').once().withArgs(adb);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installApk(adb, _Object$assign({}, opts, { fastReset: true, fullReset: true })));

          case 4:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not run reset if the corresponding option is not set', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').once().withArgs(opts.app, opts.appPackage);
            mocks.helpers.expects('resetApp').never();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installApk(adb, opts));

          case 4:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should install/upgrade and skip fast reseting the app if this was the fresh install', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().returns(false);
            mocks.adb.expects('installOrUpgrade').once().withArgs(opts.app, opts.appPackage);
            mocks.helpers.expects('resetApp').never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installApk(adb, _Object$assign({}, opts, { fastReset: true })));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('installOtherApks', (0, _appiumTestSupport.withMocks)({ adb: adb, fs: _appiumSupport.fs, helpers: _libAndroidHelpers2['default'] }, function (mocks) {
    var opts = {
      app: 'local',
      appPackage: 'pkg',
      androidInstallTimeout: 90000
    };

    var fakeApk = '/path/to/fake/app.apk';
    var otherFakeApk = '/path/to/other/fake/app.apk';

    var expectedADBInstallOpts = {
      grantPermissions: undefined,
      timeout: opts.androidInstallTimeout
    };

    it('should not call adb.installOrUpgrade if otherApps is empty', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').never();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installOtherApks([], adb, opts));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call adb.installOrUpgrade once if otherApps has one item', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').once().withArgs(fakeApk, null, expectedADBInstallOpts);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installOtherApks([fakeApk], adb, opts));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call adb.installOrUpgrade twice if otherApps has two item', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').twice();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].installOtherApks([fakeApk, otherFakeApk], adb, opts));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('initUnicodeKeyboard', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should install and enable unicodeIME', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('install').once().returns('');
            mocks.adb.expects('defaultIME').once().returns('defaultIME');
            mocks.adb.expects('enableIME').once().returns('');
            mocks.adb.expects('setIME').once().returns('');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initUnicodeKeyboard(adb));

          case 6:
            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('pushSettingsApp', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should skip granting permissions if the app is already running', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').once().returns(true);
            mocks.adb.expects('processExists').withExactArgs('io.appium.settings').once().returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushSettingsApp(adb));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should launch settings app if it isnt running', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').once().returns(true);
            mocks.adb.expects('processExists').once().returns(false);
            mocks.adb.expects('startApp').once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushSettingsApp(adb));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('setMockLocationApp', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should enable mock location for api level below 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').returns(_bluebird2['default'].resolve(18));
            mocks.adb.expects('shell').withExactArgs(['settings', 'put', 'secure', 'mock_location', '1']).once().returns('');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].setMockLocationApp(adb, 'io.appium.settings'));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should enable mock location for api level 23 and above', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').returns(_bluebird2['default'].resolve(23));
            mocks.adb.expects('shell').withExactArgs(['appops', 'set', 'io.appium.settings', 'android:mock_location', 'allow']).once().returns('');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].setMockLocationApp(adb, 'io.appium.settings'));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('pushUnlock', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should install unlockApp', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('installOrUpgrade').withArgs(_appiumUnlock.path, 'io.appium.unlock').once().returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushUnlock(adb));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('pushStrings', (0, _appiumTestSupport.withMocks)({ adb: adb, fs: _appiumSupport.fs }, function (mocks) {
    var opts = { app: 'app', tmpDir: '/tmp_dir', appPackage: 'pkg' };
    it('should extracts string.xml and converts it to string.json and pushes it', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('rimraf').withExactArgs(REMOTE_TEMP_PATH + '/strings.json').once();
            mocks.fs.expects('exists').withExactArgs(opts.app).returns(true);
            mocks.fs.expects('rimraf').once();
            mocks.adb.expects('extractStringsFromApk').withArgs(opts.app, 'en').returns({ apkStrings: { id: 'string' }, localPath: 'local_path' });
            mocks.adb.expects('push').withExactArgs('local_path', REMOTE_TEMP_PATH).once();
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushStrings('en', adb, opts));

          case 7:
            context$3$0.t0 = { id: 'string' };
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            mocks.adb.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should delete remote strings.json if app is not present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('rimraf').withExactArgs(REMOTE_TEMP_PATH + '/strings.json').once();
            mocks.fs.expects('exists').withExactArgs(opts.app).returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushStrings('en', adb, opts));

          case 4:
            context$3$0.t0 = {};
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            mocks.adb.verify();
            mocks.fs.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should push an empty json object if app does not have strings.xml', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('rimraf').withExactArgs(REMOTE_TEMP_PATH + '/strings.json').once();
            mocks.fs.expects('exists').withExactArgs(opts.app).returns(true);
            mocks.fs.expects('rimraf').once();
            mocks.adb.expects('extractStringsFromApk').throws();
            mocks.adb.expects('shell').withExactArgs('echo', ['\'{}\' > ' + REMOTE_TEMP_PATH + '/strings.json']);
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].pushStrings('en', adb, opts));

          case 7:
            context$3$0.t0 = {};
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            mocks.adb.verify();
            mocks.fs.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('unlock', (0, _appiumTestSupport.withMocks)({ adb: adb, helpers: _libAndroidHelpers2['default'], unlocker: _libUnlockHelpers2['default'] }, function (mocks) {
    it('should return if screen is already unlocked', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').withExactArgs().once().returns(false);
            mocks.adb.expects('getApiLevel').never();
            mocks.adb.expects('startApp').never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, {}));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should start unlock app', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('forceStop').once().returns('');
            mocks.adb.expects('startApp').once().returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, {}));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should raise an error on undefined unlockKey when unlockType is defined', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').once().returns(true);
            mocks.unlocker.expects('isValidKey').once();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "pin" }).should.be.rejectedWith('unlockKey'));

          case 4:
            mocks.adb.verify();
            mocks.unlocker.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call pinUnlock if unlockType is pin', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('isScreenLocked').returns(false);
            mocks.unlocker.expects('pinUnlock').once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "pin", unlockKey: "1111" }));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call passwordUnlock if unlockType is password', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('isScreenLocked').returns(false);
            mocks.unlocker.expects('passwordUnlock').once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "password", unlockKey: "appium" }));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call patternUnlock if unlockType is pattern', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('isScreenLocked').returns(false);
            mocks.unlocker.expects('patternUnlock').once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "pattern", unlockKey: "123456789" }));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call fingerprintUnlock if unlockType is fingerprint', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('isScreenLocked').returns(false);
            mocks.unlocker.expects('fingerprintUnlock').once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "fingerprint", unlockKey: "1111" }));

          case 5:
            mocks.adb.verify();
            mocks.unlocker.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error is api is lower than 23 and trying to use fingerprintUnlock', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isScreenLocked').onCall(0).returns(true);
            mocks.adb.expects('isScreenLocked').returns(false);
            mocks.adb.expects('getApiLevel').once().returns(21);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].unlock(_libAndroidHelpers2['default'], adb, { unlockType: "fingerprint", unlockKey: "1111" }).should.eventually.be.rejectedWith('Fingerprint'));

          case 5:
            mocks.helpers.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('initDevice', (0, _appiumTestSupport.withMocks)({ helpers: _libAndroidHelpers2['default'], adb: adb }, function (mocks) {
    it('should init device', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { language: "en", locale: "us" };

            mocks.adb.expects('waitForDevice').once();
            mocks.adb.expects('startLogcat').once();
            mocks.helpers.expects('pushSettingsApp').once();
            mocks.helpers.expects('ensureDeviceLocale').withExactArgs(adb, opts.language, opts.locale).once();
            mocks.helpers.expects('setMockLocationApp').withExactArgs(adb, 'io.appium.settings').once();
            mocks.helpers.expects('pushUnlock').withExactArgs(adb).once();
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initDevice(adb, opts));

          case 9:
            mocks.helpers.verify();
            mocks.adb.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not install settings app and mock location on emulator', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { avd: "avd" };

            mocks.adb.expects('waitForDevice').once();
            mocks.adb.expects('startLogcat').once();
            mocks.helpers.expects('pushSettingsApp').never();
            mocks.helpers.expects('ensureDeviceLocale').withArgs(adb).once();
            mocks.helpers.expects('setMockLocationApp').never();
            mocks.helpers.expects('pushUnlock').withExactArgs(adb).once();
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initDevice(adb, opts));

          case 9:
            mocks.helpers.verify();
            mocks.adb.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return defaultIME if unicodeKeyboard is setted to true', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { unicodeKeyboard: true };

            mocks.adb.expects('waitForDevice').once();
            mocks.adb.expects('startLogcat').once();
            mocks.helpers.expects('pushSettingsApp').once();
            mocks.helpers.expects('ensureDeviceLocale').once();
            mocks.helpers.expects('setMockLocationApp').once();
            mocks.helpers.expects('initUnicodeKeyboard').withExactArgs(adb).once().returns("defaultIME");
            mocks.helpers.expects('pushUnlock').withExactArgs(adb).once();
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initDevice(adb, opts).should.become("defaultIME"));

          case 10:
            mocks.helpers.verify();
            mocks.adb.verify();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return undefined if unicodeKeyboard is setted to false', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { unicodeKeyboard: false };

            mocks.adb.expects('waitForDevice').once();
            mocks.adb.expects('startLogcat').once();
            mocks.helpers.expects('pushSettingsApp').once();
            mocks.helpers.expects('ensureDeviceLocale').once();
            mocks.helpers.expects('setMockLocationApp').once();
            mocks.helpers.expects('initUnicodeKeyboard').never();
            mocks.helpers.expects('pushUnlock').withExactArgs(adb).once();
            context$3$0.t0 = should.not;
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initDevice(adb, opts));

          case 11:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.exist.call(context$3$0.t0, context$3$0.t1);

            mocks.helpers.verify();
            mocks.adb.verify();

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not push unlock app if unlockType is defined', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { unlockType: "unlock_type" };

            mocks.adb.expects('waitForDevice').once();
            mocks.adb.expects('startLogcat').once();
            mocks.helpers.expects('pushSettingsApp').once();
            mocks.helpers.expects('ensureDeviceLocale').once();
            mocks.helpers.expects('setMockLocationApp').once();
            mocks.helpers.expects('initUnicodeKeyboard').never();
            mocks.helpers.expects('pushUnlock').never();
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_libAndroidHelpers2['default'].initDevice(adb, opts));

          case 10:
            mocks.helpers.verify();
            mocks.adb.verify();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
  describe('removeNullProperties', function () {
    it('should ignore null properties', function callee$2$0() {
      var test;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            test = { foo: null, bar: true };

            _libAndroidHelpers2['default'].removeNullProperties(test);
            _lodash2['default'].keys(test).length.should.equal(1);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should ignore undefined properties', function callee$2$0() {
      var test;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            test = { foo: undefined, bar: true };

            _libAndroidHelpers2['default'].removeNullProperties(test);
            _lodash2['default'].keys(test).length.should.equal(1);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not ignore falsy properties like 0 and false', function callee$2$0() {
      var test;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            test = { foo: false, bar: true, zero: 0 };

            _libAndroidHelpers2['default'].removeNullProperties(test);
            _lodash2['default'].keys(test).length.should.equal(3);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('truncateDecimals', function () {
    it('should use floor when number is positive', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].truncateDecimals(12.345, 2).should.equal(12.34);

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use ceil when number is negative', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].truncateDecimals(-12.345, 2).should.equal(-12.34);

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getChromePkg', function () {
    it('should return pakage for chromium', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].getChromePkg('chromium').should.deep.equal({ pkg: 'org.chromium.chrome.shell', activity: '.ChromeShellActivity' });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return pakage for chromebeta', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].getChromePkg('chromebeta').should.deep.equal({ pkg: 'com.chrome.beta', activity: 'com.google.android.apps.chrome.Main' });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return pakage for browser', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].getChromePkg('browser').should.deep.equal({ pkg: 'com.android.browser', activity: 'com.android.browser.BrowserActivity' });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return pakage for chromium-browser', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].getChromePkg('chromium-browser').should.deep.equal({ pkg: 'org.chromium.chrome', activity: 'com.google.android.apps.chrome.Main' });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return pakage for chromium-webview', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libAndroidHelpers2['default'].getChromePkg('chromium-webview').should.deep.equal({ pkg: 'org.chromium.webview_shell', activity: 'org.chromium.webview_shell.WebViewBrowserActivity' });

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#parseArray', function () {
    it('should parse array string to array', function () {
      _libAndroidHelpers2['default'].parseArray('["a", "b", "c"]').should.eql(['a', 'b', 'c']);
    });
    it('should parse a simple string to one item array', function () {
      _libAndroidHelpers2['default'].parseArray('abc').should.eql(['abc']);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
