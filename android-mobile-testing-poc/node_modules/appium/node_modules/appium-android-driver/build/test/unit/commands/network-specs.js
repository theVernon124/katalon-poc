'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var driver = undefined;
var adb = undefined;
var sandbox = _sinon2['default'].sandbox.create();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Network', function () {
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          driver = new _2['default']();
          adb = new _appiumAdb2['default']();
          driver.adb = adb;
          sandbox.stub(adb);
          sandbox.stub(driver, 'isEmulator');
          sandbox.stub(driver, 'wrapBootstrapDisconnect').callsFake(function callee$2$0(fn) {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(fn());

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
          sandbox.stub(_bluebird2['default'], 'delay');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('getNetworkConnection', function () {
    beforeEach(function () {
      adb.isAirplaneModeOn.returns(false);
      adb.isDataOn.returns(false);
      sandbox.stub(driver, 'isWifiOn').returns(false);
    });
    it('should determine nothing enabled', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getNetworkConnection().should.eventually.equal(0));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine airplane mode is on', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isAirplaneModeOn.returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkConnection().should.eventually.equal(1));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine wifi is on', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.isWifiOn.returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkConnection().should.eventually.equal(2));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine data is on', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isDataOn.returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getNetworkConnection().should.eventually.equal(4));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine wifi and data are on', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.isWifiOn.returns(true);
            adb.isDataOn.returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getNetworkConnection().should.eventually.equal(6));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isWifiOn', function () {
    it('should return wifi state', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isWifiOn.returns('wifi_state');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isWifiOn().should.become('wifi_state'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setNetworkConnection', function () {
    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'setWifiState');
            driver.isEmulator.returns(false);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should turn off wifi and data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkConnection').returns(6);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setNetworkConnection(0));

          case 3:
            adb.setAirplaneMode.called.should.be['false'];
            adb.broadcastAirplaneMode.called.should.be['false'];
            driver.setWifiState.calledWithExactly(false).should.be['true'];
            adb.setDataState.calledWithExactly(false, false).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should turn on and broadcast airplane mode', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkConnection').returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setNetworkConnection(1));

          case 3:
            adb.setAirplaneMode.calledWithExactly(true).should.be['true'];
            adb.broadcastAirplaneMode.calledWithExactly(true).should.be['true'];
            driver.setWifiState.called.should.be['false'];
            adb.setDataState.called.should.be['false'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should turn on wifi', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkConnection').returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setNetworkConnection(2));

          case 3:
            adb.setAirplaneMode.called.should.be['false'];
            adb.broadcastAirplaneMode.called.should.be['false'];
            driver.setWifiState.calledWithExactly(true).should.be['true'];
            adb.setDataState.called.should.be['false'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should turn on data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkConnection').returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setNetworkConnection(4));

          case 3:
            adb.setAirplaneMode.called.should.be['false'];
            adb.broadcastAirplaneMode.called.should.be['false'];
            driver.setWifiState.called.should.be['false'];
            adb.setDataState.calledWithExactly(true, false).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should turn on data and wifi', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'getNetworkConnection').returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setNetworkConnection(6));

          case 3:
            adb.setAirplaneMode.called.should.be['false'];
            adb.broadcastAirplaneMode.called.should.be['false'];
            driver.setWifiState.calledWithExactly(true).should.be['true'];
            adb.setDataState.calledWithExactly(true, false).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setWifiState', function () {
    it('should set wifi state', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.isEmulator.returns('is_emu');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setWifiState('wifi_state'));

          case 3:
            adb.setWifiState.calledWithExactly('wifi_state', 'is_emu').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('toggleData', function () {
    it('should toggle data', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isDataOn.returns(false);
            driver.isEmulator.returns('is_emu');
            adb.setWifiAndData.returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleData());

          case 5:
            adb.setWifiAndData.calledWithExactly({ data: true }, 'is_emu').should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('toggleWiFi', function () {
    it('should toggle wifi', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isWifiOn.returns(false);
            driver.isEmulator.returns('is_emu');
            adb.setWifiAndData.returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleWiFi());

          case 5:
            adb.setWifiAndData.calledWithExactly({ wifi: true }, 'is_emu').should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('toggleFlightMode', function () {
    it('should toggle flight mode', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.isAirplaneModeOn.returns(false);
            adb.setAirplaneMode.returns('');
            adb.broadcastAirplaneMode.returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleFlightMode());

          case 5:
            adb.setAirplaneMode.calledWithExactly(true).should.be['true'];
            adb.broadcastAirplaneMode.calledWithExactly(true).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setGeoLocation', function () {
    it('should set location', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.setGeoLocation.withArgs('location', 'is_emu').returns('res');
            driver.isEmulator.returns('is_emu');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.setGeoLocation('location').should.become('res'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('toggleLocationSettings', function () {
    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'toggleSetting');

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error for API<16', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.getApiLevel.returns(15);
            driver.isEmulator.returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.toggleLocationServices().should.eventually.be.rejectedWith(/implemented/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should generate the correct sequence of keys for API 16', function callee$2$0() {
      var sequence;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sequence = [19, 19, 20];

            adb.getApiLevel.returns(16);
            driver.isEmulator.returns(false);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleLocationServices());

          case 5:
            driver.toggleSetting.calledWith('LOCATION_SOURCE_SETTINGS', sequence).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should generate the correct sequence of keys for API >= 19', function callee$2$0() {
      var sequence;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sequence = [22, 22, 19];

            adb.getApiLevel.returns(19);
            driver.isEmulator.returns(false);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleLocationServices());

          case 5:
            adb.keyevent.calledWithExactly(19).should.be['true'];
            driver.toggleSetting.calledWith('LOCATION_SOURCE_SETTINGS', sequence).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set gps for emulators', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.getApiLevel.returns(19);
            driver.isEmulator.returns(true);
            adb.getLocationProviders.returns(['wifi']);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.toggleLocationServices());

          case 5:
            adb.toggleGPSLocationProvider.calledWithExactly(true).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('toggleSetting', function () {
    beforeEach(function () {
      sandbox.stub(driver, 'doKey').returns('');
      sandbox.stub(driver, 'openSettingsActivity').returns('');
      adb.getFocusedPackageAndActivity.returns({ appPackage: 'fpkg', appActivity: 'fact' });
    });
    it('should toggle setting', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.toggleSetting('set', [61, 72]));

          case 2:
            driver.doKey.getCall(0).args[0].should.be.equal(61);
            driver.doKey.getCall(1).args[0].should.be.equal(72);
            driver.doKey.getCall(2).args[0].should.be.equal(23);
            driver.doKey.getCall(3).args[0].should.be.equal(22);
            driver.doKey.getCall(4).args[0].should.be.equal(23);
            driver.openSettingsActivity.calledWithExactly('set').should.be['true'];
            adb.waitForNotActivity.calledTwice.should.be['true'];
            adb.waitForNotActivity.alwaysCalledWith('fpkg', 'fact').should.be['true'];
            adb.back.calledOnce.should.be['true'];

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use default key sequence', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.toggleSetting('set', null));

          case 2:
            driver.doKey.getCall(0).args[0].should.be.equal(19);
            driver.doKey.getCall(1).args[0].should.be.equal(19);
            driver.doKey.getCall(2).args[0].should.be.equal(20);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should skip errors from adb.waitForNotActivity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.waitForNotActivity.throws();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.toggleSetting('set', null).should.be.fulfilled);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('doKey', function () {
    it('should send key event', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.doKey(55));

          case 2:
            adb.keyevent.calledWithExactly(55).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('wrapBootstrapDisconnect', function () {
    it('should restart adb and start bootstrap', function callee$2$0() {
      var fn;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.wrapBootstrapDisconnect.restore();
            fn = sandbox.stub();

            driver.bootstrap = sandbox.stub();
            driver.bootstrap.start = sandbox.stub();
            driver.opts = { appPackage: 'pkg', disableAndroidWatchers: 'daw', acceptSslCerts: 'acert' };
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.wrapBootstrapDisconnect(fn));

          case 7:
            _sinon2['default'].assert.callOrder(fn, adb.restart, driver.bootstrap.start);
            driver.bootstrap.calledWithExactly('pkg', 'daw', 'acert');
            driver.bootstrap.ignoreUnexpectedShutdown.should.be['false'];

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
