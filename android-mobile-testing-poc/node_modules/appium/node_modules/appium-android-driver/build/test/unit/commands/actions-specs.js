'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumSupport = require('appium-support');

var support = _interopRequireWildcard(_appiumSupport);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _libCommandsActions = require('../../../lib/commands/actions');

var _libCommandsActions2 = _interopRequireDefault(_libCommandsActions);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var driver = undefined;
var sandbox = _sinon2['default'].sandbox.create();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Actions', function () {
  beforeEach(function () {
    driver = new _2['default']();
    driver.adb = new _appiumAdb2['default']();
    driver.bootstrap = new _appiumAndroidBootstrap2['default']();
    sandbox.stub(driver.bootstrap, 'sendAction');
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('keyevent', function () {
    it('shoudle be able to execute keyevent via pressKeyCode', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'pressKeyCode');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.keyevent('66', 'meta'));

          case 3:
            driver.pressKeyCode.calledWithExactly('66', 'meta').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'pressKeyCode');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.keyevent('66'));

          case 3:
            driver.pressKeyCode.calledWithExactly('66', null).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pressKeyCode', function () {
    it('shoudle be able to press key code', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.pressKeyCode('66', 'meta'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('pressKeyCode', { keycode: '66', metastate: 'meta' }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.pressKeyCode('66'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('pressKeyCode', { keycode: '66', metastate: null }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('longPressKeyCode', function () {
    it('shoudle be able to press key code', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.longPressKeyCode('66', 'meta'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('longPressKeyCode', { keycode: '66', metastate: 'meta' }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set metastate to null by default', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.longPressKeyCode('66'));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('longPressKeyCode', { keycode: '66', metastate: null }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getOrientation', function () {
    it('shoudle be able to get orientation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.bootstrap.sendAction.withArgs('orientation', { naturalOrientation: false }).returns('landscape');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getOrientation().should.become('LANDSCAPE'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('orientation', { naturalOrientation: false }).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setOrientation', function () {
    it('shoudle be able to set orientation', function callee$2$0() {
      var opts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            opts = { orientation: 'SOMESCAPE', naturalOrientation: false };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setOrientation('somescape'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('orientation', opts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fakeFlick', function () {
    it('shoudle be able to do fake flick', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.fakeFlick(12, 34));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('flick', { xSpeed: 12, ySpeed: 34 }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fakeFlickElement', function () {
    it('shoudle be able to do fake flick on element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.fakeFlickElement(5000, 56, 78, 1.32));

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('element:flick', { xoffset: 56, yoffset: 78, speed: 1.32, elementId: 5000 }).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('swipe', function () {
    it('should swipe an element', function () {
      var swipeOpts = { startX: 10, startY: 11, endX: 20, endY: 22,
        steps: 3, elementId: 'someElementId' };
      driver.swipe(10, 11, 20, 22, 0.1, null, 'someElementId');
      driver.bootstrap.sendAction.calledWithExactly('element:swipe', swipeOpts).should.be['true'];
    });
    it('should swipe without an element', function () {
      driver.swipe(0, 0, 1, 1, 0, 1);
      driver.bootstrap.sendAction.calledWith('swipe').should.be['true'];
    });
    it('should set start point to (0.5;0.5) if startX and startY are "null"', function callee$2$0() {
      var swipeOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            swipeOpts = { startX: 0.5, startY: 0.5, endX: 0, endY: 0, steps: 0 };

            sandbox.stub(driver, 'doSwipe');
            driver.swipe('null', 'null', 0, 0, 0);
            driver.doSwipe.calledWithExactly(swipeOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pinchClose', function () {
    it('should be able to pinch in element', function callee$2$0() {
      var pinchOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pinchOpts = { direction: 'in', elementId: 'el01', percent: 0.5, steps: 5 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.pinchClose(null, null, null, null, null, 0.5, 5, 'el01'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:pinch', pinchOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pinchOpen', function () {
    it('should be able to pinch out element', function callee$2$0() {
      var pinchOpts;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pinchOpts = { direction: 'out', elementId: 'el01', percent: 0.5, steps: 5 };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.pinchOpen(null, null, null, null, null, 0.5, 5, 'el01'));

          case 3:
            driver.bootstrap.sendAction.calledWithExactly('element:pinch', pinchOpts).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('flick', function () {
    it('should call fakeFlickElement if element is passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'fakeFlickElement');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.flick('elem', null, null, 1, 2, 3));

          case 3:
            driver.fakeFlickElement.calledWith('elem', 1, 2, 3).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should call fakeFlick if element is not passed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'fakeFlick');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.flick(null, 1, 2));

          case 3:
            driver.fakeFlick.calledWith(1, 2).should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('drag', function () {
    var dragOpts = {
      elementId: 'elem1', destElId: 'elem2',
      startX: 1, startY: 2, endX: 3, endY: 4, steps: 1
    };
    it('should drag an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.drag(1, 2, 3, 4, 0.02, null, 'elem1', 'elem2');
            driver.bootstrap.sendAction.calledWithExactly('element:drag', dragOpts).should.be['true'];

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should drag without an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            dragOpts.elementId = null;
            driver.drag(1, 2, 3, 4, 0.02, null, null, 'elem2');
            driver.bootstrap.sendAction.calledWithExactly('drag', dragOpts).should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('lock', function () {
    it('should call adb.lock()', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'lock');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.lock());

          case 3:
            driver.adb.lock.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('isLocked', function () {
    it('should call adb.isScreenLocked()', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'isScreenLocked').returns('lock_status');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.isLocked().should.become('lock_status'));

          case 3:
            driver.adb.isScreenLocked.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('openNotifications', function () {
    it('should be able to open notifications', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.openNotifications());

          case 2:
            driver.bootstrap.sendAction.calledWithExactly('openNotification').should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('setLocation', function () {
    it('should be able to set location', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendTelnetCommand');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.setLocation('lat', 'long'));

          case 3:
            driver.adb.sendTelnetCommand.calledWithExactly('geo fix long lat').should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pullFile', function () {
    it('should be able to pull file from device', function callee$2$0() {
      var localFile;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'pull');
            sandbox.stub(support.fs, 'readFile').withArgs(localFile).returns('appium');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.pullFile('remote_path').should.become('YXBwaXVt'));

          case 8:
            driver.adb.pull.calledWithExactly('remote_path', localFile).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to pull file located in application container from the device', function callee$2$0() {
      var localFile, packageId, remotePath, tmpPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            packageId = 'com.myapp';
            remotePath = 'path/in/container';
            tmpPath = '/data/local/tmp/container';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'pull');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'readFile').withArgs(localFile).returns('appium');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.pullFile('@' + packageId + '/' + remotePath).should.become('YXBwaXVt'));

          case 12:
            driver.adb.pull.calledWithExactly(tmpPath, localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'chmod 777 \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['cp', '-f', '/data/data/' + packageId + '/' + remotePath, tmpPath]).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['rm', '-f', tmpPath]).should.be['true'];

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('pushFile', function () {
    it('should be able to push file to device', function callee$2$0() {
      var localFile, content;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            content = 'appium';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'push');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'writeFile');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.pushFile('remote_path', 'YXBwaXVt'));

          case 10:
            support.fs.writeFile.calledWithExactly(localFile, content, 'binary').should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.push.calledWithExactly(localFile, 'remote_path').should.be['true'];

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to push file located in application container to the device', function callee$2$0() {
      var localFile, content, packageId, remotePath, tmpPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            localFile = 'local/tmp_file';
            content = 'appium';
            packageId = 'com.myapp';
            remotePath = 'path/in/container';
            tmpPath = '/data/local/tmp/container';

            sandbox.stub(_temp2['default'], 'path').returns(localFile);
            sandbox.stub(driver.adb, 'push');
            sandbox.stub(driver.adb, 'shell');
            sandbox.stub(support.fs, 'writeFile');
            sandbox.stub(support.fs, 'exists').withArgs(localFile).returns(true);
            sandbox.stub(support.fs, 'unlink');
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.pushFile('@' + packageId + '/' + remotePath, 'YXBwaXVt'));

          case 13:
            support.fs.writeFile.calledWithExactly(localFile, content, 'binary').should.be['true'];
            driver.adb.push.calledWithExactly(localFile, tmpPath).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'mkdir -p \'/data/data/' + packageId + '/path/in\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'touch \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['run-as', packageId, 'chmod 777 \'/data/data/' + packageId + '/' + remotePath + '\'']).should.be['true'];
            driver.adb.shell.calledWithExactly(['cp', '-f', tmpPath, '/data/data/' + packageId + '/' + remotePath]).should.be['true'];
            support.fs.unlink.calledWithExactly(localFile).should.be['true'];
            driver.adb.shell.calledWithExactly(['rm', '-f', tmpPath]).should.be['true'];

          case 21:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('pullFolder', function () {
    var zippedDir = '/mock/path/to/zipped';
    var unzippedDir = '/mock/path/to/unzipped';
    var tempDir = '/mock/path/to/temp-dir';
    var tempPathStub = undefined;

    before(function () {
      var _mockFS;

      // Create in-memory mock file system for file writes
      (0, _mockFs2['default'])((_mockFS = {}, _defineProperty(_mockFS, zippedDir, {}), _defineProperty(_mockFS, unzippedDir, {}), _defineProperty(_mockFS, tempDir, {}), _mockFS));

      // Stub temp.path to use an in-memory filepath
      tempPathStub = _sinon2['default'].stub(_temp2['default'], 'path').returns(tempDir);
    });

    after(function () {
      tempPathStub.restore();
      _mockFs2['default'].restore();
    });

    it('should pull a folder and return base64 zip', function callee$2$0() {
      var adbPullStub, pull, zippedBase64;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adbPullStub = undefined;

            pull = function pull(ignore, localPath) {
              return _regeneratorRuntime.async(function pull$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(localPath, 'a.txt'), 'hello world', { flags: 'w' }));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(localPath, 'b.txt'), 'foobar', { flags: 'w' }));

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            };

            if (!driver.adb) {
              driver.adb = { pull: pull };
            } else {
              adbPullStub = _sinon2['default'].stub(driver.adb, 'pull').callsFake(pull);
            }

            // Call 'driver.pullFolder' and zip the base64 contents to a .zip file
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.pullFolder('/does/not/matter'));

          case 5:
            zippedBase64 = context$3$0.sent;

            (typeof zippedBase64).should.equal('string');
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(support.fs.writeFile(_path2['default'].resolve(zippedDir, 'zipped.zip'), zippedBase64, { encoding: 'base64', flags: 'w' }));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(support.zip.extractAllTo(_path2['default'].resolve(zippedDir, 'zipped.zip'), unzippedDir));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(support.fs.readFile(_path2['default'].resolve(unzippedDir, 'a.txt'), 'utf8').should.eventually.equal('hello world'));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(support.fs.readFile(_path2['default'].resolve(unzippedDir, 'b.txt'), 'utf8').should.eventually.equal('foobar'));

          case 15:

            // Restore stub
            if (adbPullStub) {
              adbPullStub.restore();
            } else {
              delete driver.adb;
            }

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('fingerprint', function () {
    it('should call fingerprint adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'fingerprint');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.fingerprint(1111));

          case 4:
            driver.adb.fingerprint.calledWithExactly(1111).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'fingerprint');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.fingerprint(1111).should.be.rejectedWith('fingerprint method is only available for emulators'));

          case 4:
            driver.adb.fingerprint.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('sendSMS', function () {
    it('should call sendSMS adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendSMS');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.sendSMS(4509, 'Hello Appium'));

          case 4:
            driver.adb.sendSMS.calledWithExactly(4509, 'Hello Appium').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'sendSMS');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.sendSMS(4509, 'Hello Appium').should.be.rejectedWith('sendSMS method is only available for emulators'));

          case 4:
            driver.adb.sendSMS.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmCall', function () {
    it('should call gsmCall adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmCall');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmCall(4509, 'call'));

          case 4:
            driver.adb.gsmCall.calledWithExactly(4509, 'call').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmCall');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmCall(4509, 'call').should.be.rejectedWith('gsmCall method is only available for emulators'));

          case 4:
            driver.adb.gsmCall.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmSignal', function () {
    it('should call gsmSignal adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmSignal');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmSignal(3));

          case 4:
            driver.adb.gsmSignal.calledWithExactly(3).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmSignal');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmSignal(3).should.be.rejectedWith('gsmSignal method is only available for emulators'));

          case 4:
            driver.adb.gsmSignal.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('gsmVoice', function () {
    it('should call gsmVoice adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmVoice');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmVoice('roaming'));

          case 4:
            driver.adb.gsmVoice.calledWithExactly('roaming').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'gsmVoice');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.gsmVoice('roaming').should.be.rejectedWith('gsmVoice method is only available for emulators'));

          case 4:
            driver.adb.gsmVoice.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('powerAC', function () {
    it('should call powerAC adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerAC');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerAC('off'));

          case 4:
            driver.adb.powerAC.calledWithExactly('off').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerAC');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerAC('roaming').should.be.rejectedWith('powerAC method is only available for emulators'));

          case 4:
            driver.adb.powerAC.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('powerCapacity', function () {
    it('should call powerCapacity adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerCapacity');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerCapacity(5));

          case 4:
            driver.adb.powerCapacity.calledWithExactly(5).should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'powerCapacity');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.powerCapacity(5).should.be.rejectedWith('powerCapacity method is only available for emulators'));

          case 4:
            driver.adb.powerCapacity.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('networkSpeed', function () {
    it('should call networkSpeed adb command for emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'networkSpeed');
            sandbox.stub(driver, 'isEmulator').returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.networkSpeed('gsm'));

          case 4:
            driver.adb.networkSpeed.calledWithExactly('gsm').should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw exception for real device', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver.adb, 'networkSpeed');
            sandbox.stub(driver, 'isEmulator').returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.networkSpeed('gsm').should.be.rejectedWith('networkSpeed method is only available for emulators'));

          case 4:
            driver.adb.networkSpeed.notCalled.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshotDataWithAdbShell', function () {
    var defaultDir = '/data/local/tmp/';
    var png = '/path/sc.png';
    var localFile = 'local_file';
    beforeEach(function () {
      sandbox.stub(_temp2['default'], 'path');
      sandbox.stub(support.fs, 'exists');
      sandbox.stub(support.fs, 'unlink');
      sandbox.stub(driver.adb, 'shell');
      sandbox.stub(driver.adb, 'pull');
      sandbox.stub(_path2['default'].posix, 'resolve');
      sandbox.stub(_jimp2['default'], 'read');
      sandbox.stub(driver.adb, 'fileSize');
      _temp2['default'].path.returns(localFile);
      support.fs.exists.withArgs(localFile).returns(true);
      support.fs.unlink.withArgs(localFile).returns(true);
      _path2['default'].posix.resolve.withArgs(defaultDir, 'screenshot.png').returns(png);
      driver.adb.fileSize.withArgs(png).returns(1);
      _jimp2['default'].read.withArgs(localFile).returns('screenshoot_context');
    });
    it('should be able to get screenshot via adb shell', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, {}).should.become('screenshoot_context'));

          case 2:
            driver.adb.shell.calledWithExactly(['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png]).should.be['true'];
            driver.adb.pull.calledWithExactly(png, localFile).should.be['true'];
            _jimp2['default'].read.calledWithExactly(localFile).should.be['true'];
            support.fs.exists.calledTwice.should.be['true'];
            support.fs.unlink.calledTwice.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be possible to change default png dir', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _path2['default'].posix.resolve.withArgs('/custom/path/tmp/', 'screenshot.png').returns(png);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, { androidScreenshotPath: '/custom/path/tmp/' }).should.become('screenshoot_context'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if size of the screenshot is zero', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.fileSize.withArgs(png).returns(0);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbShell(driver.adb, {}).should.be.rejectedWith('equals to zero'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshotDataWithAdbExecOut', function () {
    it('should be able to take screenshot via exec-out', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            sandbox.stub(_jimp2['default'], 'read');
            teen_process.exec.returns({ stdout: 'stdout', stderr: '' });
            driver.adb.executable.path = 'path/to/adb';
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb));

          case 6:
            teen_process.exec.calledWithExactly(driver.adb.executable.path, driver.adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), { encoding: 'binary', isBuffer: true }).should.be['true'];
            _jimp2['default'].read.calledWithExactly('stdout').should.be['true'];

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if size of the screenshot is zero', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ stdout: '', stderr: '' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned no data'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if code is not 0', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ code: 1, stdout: '', stderr: '' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned error, code: \'1\', stderr: \'\''));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if stderr is not empty', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(teen_process, 'exec');
            teen_process.exec.returns({ code: 0, stdout: '', stderr: 'Oops' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_libCommandsActions2['default'].getScreenshotDataWithAdbExecOut(driver.adb).should.be.rejectedWith('Screenshot returned error, code: \'0\', stderr: \'Oops\''));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getScreenshot', function () {
    var image = undefined;
    beforeEach(function () {
      image = new _jimp2['default'](1, 1);
      sandbox.stub(driver.adb, 'getApiLevel');
      sandbox.stub(driver.adb, 'getScreenOrientation');
      sandbox.stub(driver, 'getScreenshotDataWithAdbExecOut');
      sandbox.stub(driver, 'getScreenshotDataWithAdbShell');
      sandbox.stub(image, 'getBuffer').callsFake(function (mime, cb) {
        // eslint-disable-line promise/prefer-await-to-callbacks
        return cb.call(this, null, Buffer.from('appium'));
      });
      sandbox.stub(image, 'rotate');
      driver.adb.getScreenOrientation.returns(2);
      image.rotate.withArgs(-180).returns(image);
    });
    it('should be able to take screenshot via exec-out (API level > 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(24);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 4:
            driver.getScreenshotDataWithAdbExecOut.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbShell.notCalled.should.be['true'];
            image.getBuffer.calledWith(_jimp2['default'].MIME_PNG).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to take screenshot via adb shell (API level <= 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(20);
            driver.getScreenshotDataWithAdbShell.withArgs(driver.adb, driver.opts).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 4:
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbExecOut.notCalled.should.be['true'];
            image.getBuffer.calledWith(_jimp2['default'].MIME_PNG).should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should tries to take screenshot via adb shell if exec-out failed (API level > 20)', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(24);
            driver.getScreenshotDataWithAdbExecOut.throws();
            driver.getScreenshotDataWithAdbShell.withArgs(driver.adb, driver.opts).returns(image);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.become('YXBwaXVt'));

          case 5:
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];
            driver.getScreenshotDataWithAdbShell.calledOnce.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw error if adb shell failed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(20);
            driver.getScreenshotDataWithAdbShell.throws();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.be.rejectedWith('Cannot get screenshot'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should rotate image if API level < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(22);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 4:
            driver.adb.getScreenOrientation.calledOnce.should.be['true'];
            image.rotate.calledOnce.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not rotate image if API level >= 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.adb.getApiLevel.returns(23);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 4:
            driver.adb.getScreenOrientation.notCalled.should.be['true'];
            image.rotate.notCalled.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not throws error if rotate image failed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            image.rotate.resetBehavior();
            image.rotate.throws();
            driver.adb.getApiLevel.returns(22);
            driver.getScreenshotDataWithAdbExecOut.withArgs(driver.adb).returns(image);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.getScreenshot().should.be.fulfilled);

          case 6:
            image.rotate.threw().should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// Stub in driver.adb and make it pull a folder with two files

// Extract the zip file and verify it's contents
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jb21tYW5kcy9hY3Rpb25zLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3FCQUMzQixPQUFPOzs7O3NDQUNILDBCQUEwQjs7OztvQkFDL0IsTUFBTTs7OztzQkFDSixTQUFTOzs7O2dCQUNGLFVBQVU7Ozs7NkJBQ1gsZ0JBQWdCOztJQUE3QixPQUFPOztvQkFDRixNQUFNOzs7O3lCQUNQLFlBQVk7Ozs7b0JBQ1gsTUFBTTs7OztrQ0FDSCwrQkFBK0I7Ozs7NEJBQ3JCLGNBQWM7O0lBQWhDLFlBQVk7O0FBRXhCLElBQUksTUFBTSxZQUFBLENBQUM7QUFDWCxJQUFJLE9BQU8sR0FBRyxtQkFBTSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDckMsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsU0FBUyxFQUFFLFlBQVk7QUFDOUIsWUFBVSxDQUFDLFlBQVk7QUFDckIsVUFBTSxHQUFHLG1CQUFtQixDQUFDO0FBQzdCLFVBQU0sQ0FBQyxHQUFHLEdBQUcsNEJBQVMsQ0FBQztBQUN2QixVQUFNLENBQUMsU0FBUyxHQUFHLHlDQUFlLENBQUM7QUFDbkMsV0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0dBQzlDLENBQUMsQ0FBQztBQUNILFdBQVMsQ0FBQyxZQUFZO0FBQ3BCLFdBQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNuQixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsVUFBVSxFQUFFLFlBQVk7QUFDL0IsTUFBRSxDQUFDLHNEQUFzRCxFQUFFOzs7O0FBQ3pELG1CQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQzs7NkNBQy9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FB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LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IEJvb3RzdHJhcCBmcm9tICdhcHBpdW0tYW5kcm9pZC1ib290c3RyYXAnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbW9ja0ZTIGZyb20gJ21vY2stZnMnO1xuaW1wb3J0IEFuZHJvaWREcml2ZXIgZnJvbSAnLi4vLi4vLi4nO1xuaW1wb3J0ICogYXMgc3VwcG9ydCBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgdGVtcCBmcm9tICd0ZW1wJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5pbXBvcnQgamltcCBmcm9tICdqaW1wJztcbmltcG9ydCBoZWxwZXJzIGZyb20gJy4uLy4uLy4uL2xpYi9jb21tYW5kcy9hY3Rpb25zJztcbmltcG9ydCAqIGFzIHRlZW5fcHJvY2VzcyBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5sZXQgZHJpdmVyO1xubGV0IHNhbmRib3ggPSBzaW5vbi5zYW5kYm94LmNyZWF0ZSgpO1xuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ0FjdGlvbnMnLCBmdW5jdGlvbiAoKSB7XG4gIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgIGRyaXZlciA9IG5ldyBBbmRyb2lkRHJpdmVyKCk7XG4gICAgZHJpdmVyLmFkYiA9IG5ldyBBREIoKTtcbiAgICBkcml2ZXIuYm9vdHN0cmFwID0gbmV3IEJvb3RzdHJhcCgpO1xuICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYm9vdHN0cmFwLCAnc2VuZEFjdGlvbicpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdrZXlldmVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWRsZSBiZSBhYmxlIHRvIGV4ZWN1dGUga2V5ZXZlbnQgdmlhIHByZXNzS2V5Q29kZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdwcmVzc0tleUNvZGUnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5rZXlldmVudCgnNjYnLCAnbWV0YScpO1xuICAgICAgZHJpdmVyLnByZXNzS2V5Q29kZS5jYWxsZWRXaXRoRXhhY3RseSgnNjYnLCAnbWV0YScpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2V0IG1ldGFzdGF0ZSB0byBudWxsIGJ5IGRlZmF1bHQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAncHJlc3NLZXlDb2RlJyk7XG4gICAgICBhd2FpdCBkcml2ZXIua2V5ZXZlbnQoJzY2Jyk7XG4gICAgICBkcml2ZXIucHJlc3NLZXlDb2RlLmNhbGxlZFdpdGhFeGFjdGx5KCc2NicsIG51bGwpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3ByZXNzS2V5Q29kZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWRsZSBiZSBhYmxlIHRvIHByZXNzIGtleSBjb2RlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLnByZXNzS2V5Q29kZSgnNjYnLCAnbWV0YScpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgncHJlc3NLZXlDb2RlJywge2tleWNvZGU6ICc2NicsIG1ldGFzdGF0ZTogJ21ldGEnfSlcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2V0IG1ldGFzdGF0ZSB0byBudWxsIGJ5IGRlZmF1bHQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIucHJlc3NLZXlDb2RlKCc2NicpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgncHJlc3NLZXlDb2RlJywge2tleWNvZGU6ICc2NicsIG1ldGFzdGF0ZTogbnVsbH0pXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdsb25nUHJlc3NLZXlDb2RlJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91ZGxlIGJlIGFibGUgdG8gcHJlc3Mga2V5IGNvZGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIubG9uZ1ByZXNzS2V5Q29kZSgnNjYnLCAnbWV0YScpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgnbG9uZ1ByZXNzS2V5Q29kZScsIHtrZXljb2RlOiAnNjYnLCBtZXRhc3RhdGU6ICdtZXRhJ30pXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNldCBtZXRhc3RhdGUgdG8gbnVsbCBieSBkZWZhdWx0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLmxvbmdQcmVzc0tleUNvZGUoJzY2Jyk7XG4gICAgICBkcml2ZXIuYm9vdHN0cmFwLnNlbmRBY3Rpb25cbiAgICAgICAgLmNhbGxlZFdpdGhFeGFjdGx5KCdsb25nUHJlc3NLZXlDb2RlJywge2tleWNvZGU6ICc2NicsIG1ldGFzdGF0ZTogbnVsbH0pXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdnZXRPcmllbnRhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWRsZSBiZSBhYmxlIHRvIGdldCBvcmllbnRhdGlvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5ib290c3RyYXAuc2VuZEFjdGlvbi53aXRoQXJncygnb3JpZW50YXRpb24nLCB7bmF0dXJhbE9yaWVudGF0aW9uOiBmYWxzZX0pXG4gICAgICAgIC5yZXR1cm5zKCdsYW5kc2NhcGUnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5nZXRPcmllbnRhdGlvbigpLnNob3VsZC5iZWNvbWUoJ0xBTkRTQ0FQRScpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgnb3JpZW50YXRpb24nLCB7bmF0dXJhbE9yaWVudGF0aW9uOiBmYWxzZX0pXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdzZXRPcmllbnRhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWRsZSBiZSBhYmxlIHRvIHNldCBvcmllbnRhdGlvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBvcHRzID0ge29yaWVudGF0aW9uOiAnU09NRVNDQVBFJywgbmF0dXJhbE9yaWVudGF0aW9uOiBmYWxzZX07XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0T3JpZW50YXRpb24oJ3NvbWVzY2FwZScpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uLmNhbGxlZFdpdGhFeGFjdGx5KCdvcmllbnRhdGlvbicsIG9wdHMpXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdmYWtlRmxpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VkbGUgYmUgYWJsZSB0byBkbyBmYWtlIGZsaWNrJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLmZha2VGbGljaygxMiwgMzQpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgnZmxpY2snLCB7eFNwZWVkOiAxMiwgeVNwZWVkOiAzNH0pLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2Zha2VGbGlja0VsZW1lbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VkbGUgYmUgYWJsZSB0byBkbyBmYWtlIGZsaWNrIG9uIGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuZmFrZUZsaWNrRWxlbWVudCg1MDAwLCA1NiwgNzgsIDEuMzIpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uXG4gICAgICAgIC5jYWxsZWRXaXRoRXhhY3RseSgnZWxlbWVudDpmbGljaycsXG4gICAgICAgICAge3hvZmZzZXQ6IDU2LCB5b2Zmc2V0OiA3OCwgc3BlZWQ6IDEuMzIsIGVsZW1lbnRJZDogNTAwMH0pXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdzd2lwZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHN3aXBlIGFuIGVsZW1lbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc3dpcGVPcHRzID0ge3N0YXJ0WDogMTAsIHN0YXJ0WTogMTEsIGVuZFg6IDIwLCBlbmRZOiAyMixcbiAgICAgICAgICAgICAgICAgICAgICAgc3RlcHM6IDMsIGVsZW1lbnRJZDogJ3NvbWVFbGVtZW50SWQnfTtcbiAgICAgIGRyaXZlci5zd2lwZSgxMCwgMTEsIDIwLCAyMiwgMC4xLCBudWxsLCAnc29tZUVsZW1lbnRJZCcpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uLmNhbGxlZFdpdGhFeGFjdGx5KCdlbGVtZW50OnN3aXBlJywgc3dpcGVPcHRzKVxuICAgICAgICAuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzd2lwZSB3aXRob3V0IGFuIGVsZW1lbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIuc3dpcGUoMCwgMCwgMSwgMSwgMCwgMSk7XG4gICAgICBkcml2ZXIuYm9vdHN0cmFwLnNlbmRBY3Rpb24uY2FsbGVkV2l0aCgnc3dpcGUnKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNldCBzdGFydCBwb2ludCB0byAoMC41OzAuNSkgaWYgc3RhcnRYIGFuZCBzdGFydFkgYXJlIFwibnVsbFwiJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN3aXBlT3B0cyA9IHtzdGFydFg6IDAuNSwgc3RhcnRZOiAwLjUsIGVuZFg6IDAsIGVuZFk6IDAsIHN0ZXBzOiAwfTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdkb1N3aXBlJyk7XG4gICAgICBkcml2ZXIuc3dpcGUoJ251bGwnLCAnbnVsbCcsIDAsIDAsIDApO1xuICAgICAgZHJpdmVyLmRvU3dpcGUuY2FsbGVkV2l0aEV4YWN0bHkoc3dpcGVPcHRzKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdwaW5jaENsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBwaW5jaCBpbiBlbGVtZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHBpbmNoT3B0cyA9IHtkaXJlY3Rpb246ICdpbicsIGVsZW1lbnRJZDogJ2VsMDEnLCBwZXJjZW50OiAwLjUsIHN0ZXBzOiA1fTtcbiAgICAgIGF3YWl0IGRyaXZlci5waW5jaENsb3NlKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIDAuNSwgNSwgJ2VsMDEnKTtcbiAgICAgIGRyaXZlci5ib290c3RyYXAuc2VuZEFjdGlvbi5jYWxsZWRXaXRoRXhhY3RseSgnZWxlbWVudDpwaW5jaCcsIHBpbmNoT3B0cylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3BpbmNoT3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gcGluY2ggb3V0IGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcGluY2hPcHRzID0ge2RpcmVjdGlvbjogJ291dCcsIGVsZW1lbnRJZDogJ2VsMDEnLCBwZXJjZW50OiAwLjUsIHN0ZXBzOiA1fTtcbiAgICAgIGF3YWl0IGRyaXZlci5waW5jaE9wZW4obnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgMC41LCA1LCAnZWwwMScpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uLmNhbGxlZFdpdGhFeGFjdGx5KCdlbGVtZW50OnBpbmNoJywgcGluY2hPcHRzKVxuICAgICAgICAuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZmxpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGZha2VGbGlja0VsZW1lbnQgaWYgZWxlbWVudCBpcyBwYXNzZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnZmFrZUZsaWNrRWxlbWVudCcpO1xuICAgICAgYXdhaXQgZHJpdmVyLmZsaWNrKCdlbGVtJywgbnVsbCwgbnVsbCwgMSwgMiwgMyk7XG4gICAgICBkcml2ZXIuZmFrZUZsaWNrRWxlbWVudC5jYWxsZWRXaXRoKCdlbGVtJywgMSwgMiwgMykuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGZha2VGbGljayBpZiBlbGVtZW50IGlzIG5vdCBwYXNzZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnZmFrZUZsaWNrJyk7XG4gICAgICBhd2FpdCBkcml2ZXIuZmxpY2sobnVsbCwgMSwgMik7XG4gICAgICBkcml2ZXIuZmFrZUZsaWNrLmNhbGxlZFdpdGgoMSwgMikuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZHJhZycsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZHJhZ09wdHMgPSB7XG4gICAgICBlbGVtZW50SWQ6ICdlbGVtMScsIGRlc3RFbElkOiAnZWxlbTInLFxuICAgICAgc3RhcnRYOiAxLCBzdGFydFk6IDIsIGVuZFg6IDMsIGVuZFk6IDQsIHN0ZXBzOiAxXG4gICAgfTtcbiAgICBpdCgnc2hvdWxkIGRyYWcgYW4gZWxlbWVudCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5kcmFnKDEsIDIsIDMsIDQsIDAuMDIsIG51bGwsICdlbGVtMScsICdlbGVtMicpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uLmNhbGxlZFdpdGhFeGFjdGx5KCdlbGVtZW50OmRyYWcnLCBkcmFnT3B0cylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZHJhZyB3aXRob3V0IGFuIGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcmFnT3B0cy5lbGVtZW50SWQgPSBudWxsO1xuICAgICAgZHJpdmVyLmRyYWcoMSwgMiwgMywgNCwgMC4wMiwgbnVsbCwgbnVsbCwgJ2VsZW0yJyk7XG4gICAgICBkcml2ZXIuYm9vdHN0cmFwLnNlbmRBY3Rpb24uY2FsbGVkV2l0aEV4YWN0bHkoJ2RyYWcnLCBkcmFnT3B0cylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2xvY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGFkYi5sb2NrKCknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ2xvY2snKTtcbiAgICAgIGF3YWl0IGRyaXZlci5sb2NrKCk7XG4gICAgICBkcml2ZXIuYWRiLmxvY2suY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdpc0xvY2tlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgYWRiLmlzU2NyZWVuTG9ja2VkKCknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ2lzU2NyZWVuTG9ja2VkJykucmV0dXJucygnbG9ja19zdGF0dXMnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5pc0xvY2tlZCgpLnNob3VsZC5iZWNvbWUoJ2xvY2tfc3RhdHVzJyk7XG4gICAgICBkcml2ZXIuYWRiLmlzU2NyZWVuTG9ja2VkLmNhbGxlZE9uY2Uuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnb3Blbk5vdGlmaWNhdGlvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIG9wZW4gbm90aWZpY2F0aW9ucycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGRyaXZlci5vcGVuTm90aWZpY2F0aW9ucygpO1xuICAgICAgZHJpdmVyLmJvb3RzdHJhcC5zZW5kQWN0aW9uLmNhbGxlZFdpdGhFeGFjdGx5KCdvcGVuTm90aWZpY2F0aW9uJylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3NldExvY2F0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBzZXQgbG9jYXRpb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ3NlbmRUZWxuZXRDb21tYW5kJyk7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0TG9jYXRpb24oJ2xhdCcsICdsb25nJyk7XG4gICAgICBkcml2ZXIuYWRiLnNlbmRUZWxuZXRDb21tYW5kLmNhbGxlZFdpdGhFeGFjdGx5KCdnZW8gZml4IGxvbmcgbGF0JylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3B1bGxGaWxlJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBwdWxsIGZpbGUgZnJvbSBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbG9jYWxGaWxlID0gJ2xvY2FsL3RtcF9maWxlJztcbiAgICAgIHNhbmRib3guc3R1Yih0ZW1wLCAncGF0aCcpLnJldHVybnMobG9jYWxGaWxlKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAncHVsbCcpO1xuICAgICAgc2FuZGJveC5zdHViKHN1cHBvcnQuZnMsICdyZWFkRmlsZScpLndpdGhBcmdzKGxvY2FsRmlsZSkucmV0dXJucygnYXBwaXVtJyk7XG4gICAgICBzYW5kYm94LnN0dWIoc3VwcG9ydC5mcywgJ2V4aXN0cycpLndpdGhBcmdzKGxvY2FsRmlsZSkucmV0dXJucyh0cnVlKTtcbiAgICAgIHNhbmRib3guc3R1YihzdXBwb3J0LmZzLCAndW5saW5rJyk7XG4gICAgICBhd2FpdCBkcml2ZXIucHVsbEZpbGUoJ3JlbW90ZV9wYXRoJykuc2hvdWxkLmJlY29tZSgnWVhCd2FYVnQnKTtcbiAgICAgIGRyaXZlci5hZGIucHVsbC5jYWxsZWRXaXRoRXhhY3RseSgncmVtb3RlX3BhdGgnLCBsb2NhbEZpbGUpXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIHN1cHBvcnQuZnMudW5saW5rLmNhbGxlZFdpdGhFeGFjdGx5KGxvY2FsRmlsZSkuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gcHVsbCBmaWxlIGxvY2F0ZWQgaW4gYXBwbGljYXRpb24gY29udGFpbmVyIGZyb20gdGhlIGRldmljZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBsb2NhbEZpbGUgPSAnbG9jYWwvdG1wX2ZpbGUnO1xuICAgICAgY29uc3QgcGFja2FnZUlkID0gJ2NvbS5teWFwcCc7XG4gICAgICBjb25zdCByZW1vdGVQYXRoID0gJ3BhdGgvaW4vY29udGFpbmVyJztcbiAgICAgIGNvbnN0IHRtcFBhdGggPSAnL2RhdGEvbG9jYWwvdG1wL2NvbnRhaW5lcic7XG4gICAgICBzYW5kYm94LnN0dWIodGVtcCwgJ3BhdGgnKS5yZXR1cm5zKGxvY2FsRmlsZSk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ3B1bGwnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnc2hlbGwnKTtcbiAgICAgIHNhbmRib3guc3R1YihzdXBwb3J0LmZzLCAncmVhZEZpbGUnKS53aXRoQXJncyhsb2NhbEZpbGUpLnJldHVybnMoJ2FwcGl1bScpO1xuICAgICAgc2FuZGJveC5zdHViKHN1cHBvcnQuZnMsICdleGlzdHMnKS53aXRoQXJncyhsb2NhbEZpbGUpLnJldHVybnModHJ1ZSk7XG4gICAgICBzYW5kYm94LnN0dWIoc3VwcG9ydC5mcywgJ3VubGluaycpO1xuICAgICAgYXdhaXQgZHJpdmVyLnB1bGxGaWxlKGBAJHtwYWNrYWdlSWR9LyR7cmVtb3RlUGF0aH1gKS5zaG91bGQuYmVjb21lKCdZWEJ3YVhWdCcpO1xuICAgICAgZHJpdmVyLmFkYi5wdWxsLmNhbGxlZFdpdGhFeGFjdGx5KHRtcFBhdGgsIGxvY2FsRmlsZSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkcml2ZXIuYWRiLnNoZWxsLmNhbGxlZFdpdGhFeGFjdGx5KFsncnVuLWFzJywgcGFja2FnZUlkLCBgY2htb2QgNzc3ICcvZGF0YS9kYXRhLyR7cGFja2FnZUlkfS8ke3JlbW90ZVBhdGh9J2BdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIuc2hlbGwuY2FsbGVkV2l0aEV4YWN0bHkoWydjcCcsICctZicsIGAvZGF0YS9kYXRhLyR7cGFja2FnZUlkfS8ke3JlbW90ZVBhdGh9YCwgdG1wUGF0aF0pLnNob3VsZC5iZS50cnVlO1xuICAgICAgc3VwcG9ydC5mcy51bmxpbmsuY2FsbGVkV2l0aEV4YWN0bHkobG9jYWxGaWxlKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIuc2hlbGwuY2FsbGVkV2l0aEV4YWN0bHkoWydybScsICctZicsIHRtcFBhdGhdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3B1c2hGaWxlJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBwdXNoIGZpbGUgdG8gZGV2aWNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGxvY2FsRmlsZSA9ICdsb2NhbC90bXBfZmlsZSc7XG4gICAgICBsZXQgY29udGVudCA9ICdhcHBpdW0nO1xuICAgICAgc2FuZGJveC5zdHViKHRlbXAsICdwYXRoJykucmV0dXJucyhsb2NhbEZpbGUpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdwdXNoJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ3NoZWxsJyk7XG4gICAgICBzYW5kYm94LnN0dWIoc3VwcG9ydC5mcywgJ3dyaXRlRmlsZScpO1xuICAgICAgc2FuZGJveC5zdHViKHN1cHBvcnQuZnMsICdleGlzdHMnKS53aXRoQXJncyhsb2NhbEZpbGUpLnJldHVybnModHJ1ZSk7XG4gICAgICBzYW5kYm94LnN0dWIoc3VwcG9ydC5mcywgJ3VubGluaycpO1xuICAgICAgYXdhaXQgZHJpdmVyLnB1c2hGaWxlKCdyZW1vdGVfcGF0aCcsICdZWEJ3YVhWdCcpO1xuICAgICAgc3VwcG9ydC5mcy53cml0ZUZpbGUuY2FsbGVkV2l0aEV4YWN0bHkobG9jYWxGaWxlLCBjb250ZW50LCAnYmluYXJ5Jykuc2hvdWxkLmJlLnRydWU7XG4gICAgICBzdXBwb3J0LmZzLnVubGluay5jYWxsZWRXaXRoRXhhY3RseShsb2NhbEZpbGUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgZHJpdmVyLmFkYi5wdXNoLmNhbGxlZFdpdGhFeGFjdGx5KGxvY2FsRmlsZSwgJ3JlbW90ZV9wYXRoJykuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gcHVzaCBmaWxlIGxvY2F0ZWQgaW4gYXBwbGljYXRpb24gY29udGFpbmVyIHRvIHRoZSBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbG9jYWxGaWxlID0gJ2xvY2FsL3RtcF9maWxlJztcbiAgICAgIGxldCBjb250ZW50ID0gJ2FwcGl1bSc7XG4gICAgICBjb25zdCBwYWNrYWdlSWQgPSAnY29tLm15YXBwJztcbiAgICAgIGNvbnN0IHJlbW90ZVBhdGggPSAncGF0aC9pbi9jb250YWluZXInO1xuICAgICAgY29uc3QgdG1wUGF0aCA9ICcvZGF0YS9sb2NhbC90bXAvY29udGFpbmVyJztcbiAgICAgIHNhbmRib3guc3R1Yih0ZW1wLCAncGF0aCcpLnJldHVybnMobG9jYWxGaWxlKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAncHVzaCcpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdzaGVsbCcpO1xuICAgICAgc2FuZGJveC5zdHViKHN1cHBvcnQuZnMsICd3cml0ZUZpbGUnKTtcbiAgICAgIHNhbmRib3guc3R1YihzdXBwb3J0LmZzLCAnZXhpc3RzJykud2l0aEFyZ3MobG9jYWxGaWxlKS5yZXR1cm5zKHRydWUpO1xuICAgICAgc2FuZGJveC5zdHViKHN1cHBvcnQuZnMsICd1bmxpbmsnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5wdXNoRmlsZShgQCR7cGFja2FnZUlkfS8ke3JlbW90ZVBhdGh9YCwgJ1lYQndhWFZ0Jyk7XG4gICAgICBzdXBwb3J0LmZzLndyaXRlRmlsZS5jYWxsZWRXaXRoRXhhY3RseShsb2NhbEZpbGUsIGNvbnRlbnQsICdiaW5hcnknKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIucHVzaC5jYWxsZWRXaXRoRXhhY3RseShsb2NhbEZpbGUsIHRtcFBhdGgpLnNob3VsZC5iZS50cnVlO1xuICAgICAgZHJpdmVyLmFkYi5zaGVsbC5jYWxsZWRXaXRoRXhhY3RseShbJ3J1bi1hcycsIHBhY2thZ2VJZCwgYG1rZGlyIC1wICcvZGF0YS9kYXRhLyR7cGFja2FnZUlkfS9wYXRoL2luJ2BdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIuc2hlbGwuY2FsbGVkV2l0aEV4YWN0bHkoWydydW4tYXMnLCBwYWNrYWdlSWQsIGB0b3VjaCAnL2RhdGEvZGF0YS8ke3BhY2thZ2VJZH0vJHtyZW1vdGVQYXRofSdgXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkcml2ZXIuYWRiLnNoZWxsLmNhbGxlZFdpdGhFeGFjdGx5KFsncnVuLWFzJywgcGFja2FnZUlkLCBgY2htb2QgNzc3ICcvZGF0YS9kYXRhLyR7cGFja2FnZUlkfS8ke3JlbW90ZVBhdGh9J2BdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIuc2hlbGwuY2FsbGVkV2l0aEV4YWN0bHkoWydjcCcsICctZicsIHRtcFBhdGgsIGAvZGF0YS9kYXRhLyR7cGFja2FnZUlkfS8ke3JlbW90ZVBhdGh9YF0pLnNob3VsZC5iZS50cnVlO1xuICAgICAgc3VwcG9ydC5mcy51bmxpbmsuY2FsbGVkV2l0aEV4YWN0bHkobG9jYWxGaWxlKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5hZGIuc2hlbGwuY2FsbGVkV2l0aEV4YWN0bHkoWydybScsICctZicsIHRtcFBhdGhdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdwdWxsRm9sZGVyJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHppcHBlZERpciA9ICcvbW9jay9wYXRoL3RvL3ppcHBlZCc7XG4gICAgY29uc3QgdW56aXBwZWREaXIgPSAnL21vY2svcGF0aC90by91bnppcHBlZCc7XG4gICAgY29uc3QgdGVtcERpciA9ICcvbW9jay9wYXRoL3RvL3RlbXAtZGlyJztcbiAgICBsZXQgdGVtcFBhdGhTdHViO1xuXG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIENyZWF0ZSBpbi1tZW1vcnkgbW9jayBmaWxlIHN5c3RlbSBmb3IgZmlsZSB3cml0ZXNcbiAgICAgIG1vY2tGUyh7XG4gICAgICAgIFt6aXBwZWREaXJdOiB7fSxcbiAgICAgICAgW3VuemlwcGVkRGlyXToge30sXG4gICAgICAgIFt0ZW1wRGlyXToge30sXG4gICAgICB9KTtcblxuICAgICAgLy8gU3R1YiB0ZW1wLnBhdGggdG8gdXNlIGFuIGluLW1lbW9yeSBmaWxlcGF0aFxuICAgICAgdGVtcFBhdGhTdHViID0gc2lub24uc3R1Yih0ZW1wLCAncGF0aCcpLnJldHVybnModGVtcERpcik7XG4gICAgfSk7XG5cbiAgICBhZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICB0ZW1wUGF0aFN0dWIucmVzdG9yZSgpO1xuICAgICAgbW9ja0ZTLnJlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHVsbCBhIGZvbGRlciBhbmQgcmV0dXJuIGJhc2U2NCB6aXAnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBTdHViIGluIGRyaXZlci5hZGIgYW5kIG1ha2UgaXQgcHVsbCBhIGZvbGRlciB3aXRoIHR3byBmaWxlc1xuICAgICAgbGV0IGFkYlB1bGxTdHViO1xuICAgICAgY29uc3QgcHVsbCA9IGFzeW5jIGZ1bmN0aW9uIChpZ25vcmUsIGxvY2FsUGF0aCkge1xuICAgICAgICBhd2FpdCBzdXBwb3J0LmZzLndyaXRlRmlsZShwYXRoLnJlc29sdmUobG9jYWxQYXRoLCAnYS50eHQnKSwgJ2hlbGxvIHdvcmxkJywge2ZsYWdzOiAndyd9KTtcbiAgICAgICAgYXdhaXQgc3VwcG9ydC5mcy53cml0ZUZpbGUocGF0aC5yZXNvbHZlKGxvY2FsUGF0aCwgJ2IudHh0JyksICdmb29iYXInLCB7ZmxhZ3M6ICd3J30pO1xuICAgICAgfTtcbiAgICAgIGlmICghZHJpdmVyLmFkYikge1xuICAgICAgICBkcml2ZXIuYWRiID0ge3B1bGx9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRiUHVsbFN0dWIgPSBzaW5vbi5zdHViKGRyaXZlci5hZGIsICdwdWxsJykuY2FsbHNGYWtlKHB1bGwpO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsICdkcml2ZXIucHVsbEZvbGRlcicgYW5kIHppcCB0aGUgYmFzZTY0IGNvbnRlbnRzIHRvIGEgLnppcCBmaWxlXG4gICAgICBjb25zdCB6aXBwZWRCYXNlNjQgPSBhd2FpdCBkcml2ZXIucHVsbEZvbGRlcignL2RvZXMvbm90L21hdHRlcicpO1xuICAgICAgKHR5cGVvZiB6aXBwZWRCYXNlNjQpLnNob3VsZC5lcXVhbCgnc3RyaW5nJyk7XG4gICAgICBhd2FpdCBzdXBwb3J0LmZzLndyaXRlRmlsZShwYXRoLnJlc29sdmUoemlwcGVkRGlyLCAnemlwcGVkLnppcCcpLCB6aXBwZWRCYXNlNjQsIHtlbmNvZGluZzogJ2Jhc2U2NCcsIGZsYWdzOiAndyd9KTtcblxuICAgICAgLy8gRXh0cmFjdCB0aGUgemlwIGZpbGUgYW5kIHZlcmlmeSBpdCdzIGNvbnRlbnRzXG4gICAgICBhd2FpdCBzdXBwb3J0LnppcC5leHRyYWN0QWxsVG8ocGF0aC5yZXNvbHZlKHppcHBlZERpciwgJ3ppcHBlZC56aXAnKSwgdW56aXBwZWREaXIpO1xuICAgICAgYXdhaXQgc3VwcG9ydC5mcy5yZWFkRmlsZShwYXRoLnJlc29sdmUodW56aXBwZWREaXIsICdhLnR4dCcpLCAndXRmOCcpLnNob3VsZC5ldmVudHVhbGx5LmVxdWFsKCdoZWxsbyB3b3JsZCcpO1xuICAgICAgYXdhaXQgc3VwcG9ydC5mcy5yZWFkRmlsZShwYXRoLnJlc29sdmUodW56aXBwZWREaXIsICdiLnR4dCcpLCAndXRmOCcpLnNob3VsZC5ldmVudHVhbGx5LmVxdWFsKCdmb29iYXInKTtcblxuICAgICAgLy8gUmVzdG9yZSBzdHViXG4gICAgICBpZiAoYWRiUHVsbFN0dWIpIHtcbiAgICAgICAgYWRiUHVsbFN0dWIucmVzdG9yZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIGRyaXZlci5hZGI7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZmluZ2VycHJpbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGZpbmdlcnByaW50IGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnZmluZ2VycHJpbnQnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyh0cnVlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5maW5nZXJwcmludCgxMTExKTtcbiAgICAgIGRyaXZlci5hZGIuZmluZ2VycHJpbnQuY2FsbGVkV2l0aEV4YWN0bHkoMTExMSkuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBleGNlcHRpb24gZm9yIHJlYWwgZGV2aWNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdmaW5nZXJwcmludCcpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ2lzRW11bGF0b3InKS5yZXR1cm5zKGZhbHNlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5maW5nZXJwcmludCgxMTExKS5zaG91bGQuYmVcbiAgICAgICAgLnJlamVjdGVkV2l0aCgnZmluZ2VycHJpbnQgbWV0aG9kIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBlbXVsYXRvcnMnKTtcbiAgICAgIGRyaXZlci5hZGIuZmluZ2VycHJpbnQubm90Q2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ3NlbmRTTVMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIHNlbmRTTVMgYWRiIGNvbW1hbmQgZm9yIGVtdWxhdG9yJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdzZW5kU01TJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnModHJ1ZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuc2VuZFNNUyg0NTA5LCAnSGVsbG8gQXBwaXVtJyk7XG4gICAgICBkcml2ZXIuYWRiLnNlbmRTTVMuY2FsbGVkV2l0aEV4YWN0bHkoNDUwOSwgJ0hlbGxvIEFwcGl1bScpXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGV4Y2VwdGlvbiBmb3IgcmVhbCBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ3NlbmRTTVMnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyhmYWxzZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuc2VuZFNNUyg0NTA5LCAnSGVsbG8gQXBwaXVtJylcbiAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ3NlbmRTTVMgbWV0aG9kIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBlbXVsYXRvcnMnKTtcbiAgICAgIGRyaXZlci5hZGIuc2VuZFNNUy5ub3RDYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ3NtQ2FsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZ3NtQ2FsbCBhZGIgY29tbWFuZCBmb3IgZW11bGF0b3InLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ2dzbUNhbGwnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyh0cnVlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5nc21DYWxsKDQ1MDksICdjYWxsJyk7XG4gICAgICBkcml2ZXIuYWRiLmdzbUNhbGwuY2FsbGVkV2l0aEV4YWN0bHkoNDUwOSwgJ2NhbGwnKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGV4Y2VwdGlvbiBmb3IgcmVhbCBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ2dzbUNhbGwnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyhmYWxzZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuZ3NtQ2FsbCg0NTA5LCAnY2FsbCcpXG4gICAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKCdnc21DYWxsIG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICBkcml2ZXIuYWRiLmdzbUNhbGwubm90Q2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2dzbVNpZ25hbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZ3NtU2lnbmFsIGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnZ3NtU2lnbmFsJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnModHJ1ZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuZ3NtU2lnbmFsKDMpO1xuICAgICAgZHJpdmVyLmFkYi5nc21TaWduYWwuY2FsbGVkV2l0aEV4YWN0bHkoMylcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXhjZXB0aW9uIGZvciByZWFsIGRldmljZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnZ3NtU2lnbmFsJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnMoZmFsc2UpO1xuICAgICAgYXdhaXQgZHJpdmVyLmdzbVNpZ25hbCgzKVxuICAgICAgICAuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgnZ3NtU2lnbmFsIG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICBkcml2ZXIuYWRiLmdzbVNpZ25hbC5ub3RDYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ3NtVm9pY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGdzbVZvaWNlIGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnZ3NtVm9pY2UnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyh0cnVlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5nc21Wb2ljZSgncm9hbWluZycpO1xuICAgICAgZHJpdmVyLmFkYi5nc21Wb2ljZS5jYWxsZWRXaXRoRXhhY3RseSgncm9hbWluZycpXG4gICAgICAgIC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGV4Y2VwdGlvbiBmb3IgcmVhbCBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLmFkYiwgJ2dzbVZvaWNlJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnMoZmFsc2UpO1xuICAgICAgYXdhaXQgZHJpdmVyLmdzbVZvaWNlKCdyb2FtaW5nJylcbiAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ2dzbVZvaWNlIG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICBkcml2ZXIuYWRiLmdzbVZvaWNlLm5vdENhbGxlZC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdwb3dlckFDJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgY2FsbCBwb3dlckFDIGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAncG93ZXJBQycpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ2lzRW11bGF0b3InKS5yZXR1cm5zKHRydWUpO1xuICAgICAgYXdhaXQgZHJpdmVyLnBvd2VyQUMoJ29mZicpO1xuICAgICAgZHJpdmVyLmFkYi5wb3dlckFDLmNhbGxlZFdpdGhFeGFjdGx5KCdvZmYnKVxuICAgICAgICAuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBleGNlcHRpb24gZm9yIHJlYWwgZGV2aWNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdwb3dlckFDJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnMoZmFsc2UpO1xuICAgICAgYXdhaXQgZHJpdmVyLnBvd2VyQUMoJ3JvYW1pbmcnKVxuICAgICAgICAuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgncG93ZXJBQyBtZXRob2QgaXMgb25seSBhdmFpbGFibGUgZm9yIGVtdWxhdG9ycycpO1xuICAgICAgZHJpdmVyLmFkYi5wb3dlckFDLm5vdENhbGxlZC5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdwb3dlckNhcGFjaXR5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgY2FsbCBwb3dlckNhcGFjaXR5IGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAncG93ZXJDYXBhY2l0eScpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ2lzRW11bGF0b3InKS5yZXR1cm5zKHRydWUpO1xuICAgICAgYXdhaXQgZHJpdmVyLnBvd2VyQ2FwYWNpdHkoNSk7XG4gICAgICBkcml2ZXIuYWRiLnBvd2VyQ2FwYWNpdHkuY2FsbGVkV2l0aEV4YWN0bHkoNSlcbiAgICAgICAgLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXhjZXB0aW9uIGZvciByZWFsIGRldmljZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAncG93ZXJDYXBhY2l0eScpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ2lzRW11bGF0b3InKS5yZXR1cm5zKGZhbHNlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5wb3dlckNhcGFjaXR5KDUpXG4gICAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKCdwb3dlckNhcGFjaXR5IG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICBkcml2ZXIuYWRiLnBvd2VyQ2FwYWNpdHkubm90Q2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ25ldHdvcmtTcGVlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgbmV0d29ya1NwZWVkIGFkYiBjb21tYW5kIGZvciBlbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIuYWRiLCAnbmV0d29ya1NwZWVkJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnaXNFbXVsYXRvcicpLnJldHVybnModHJ1ZSk7XG4gICAgICBhd2FpdCBkcml2ZXIubmV0d29ya1NwZWVkKCdnc20nKTtcbiAgICAgIGRyaXZlci5hZGIubmV0d29ya1NwZWVkLmNhbGxlZFdpdGhFeGFjdGx5KCdnc20nKVxuICAgICAgICAuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBleGNlcHRpb24gZm9yIHJlYWwgZGV2aWNlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICduZXR3b3JrU3BlZWQnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdpc0VtdWxhdG9yJykucmV0dXJucyhmYWxzZSk7XG4gICAgICBhd2FpdCBkcml2ZXIubmV0d29ya1NwZWVkKCdnc20nKVxuICAgICAgICAuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgnbmV0d29ya1NwZWVkIG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgZW11bGF0b3JzJyk7XG4gICAgICBkcml2ZXIuYWRiLm5ldHdvcmtTcGVlZC5ub3RDYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiU2hlbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZGVmYXVsdERpciA9ICcvZGF0YS9sb2NhbC90bXAvJztcbiAgICBjb25zdCBwbmcgPSAnL3BhdGgvc2MucG5nJztcbiAgICBjb25zdCBsb2NhbEZpbGUgPSAnbG9jYWxfZmlsZSc7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBzYW5kYm94LnN0dWIodGVtcCwgJ3BhdGgnKTtcbiAgICAgIHNhbmRib3guc3R1YihzdXBwb3J0LmZzLCAnZXhpc3RzJyk7XG4gICAgICBzYW5kYm94LnN0dWIoc3VwcG9ydC5mcywgJ3VubGluaycpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdzaGVsbCcpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdwdWxsJyk7XG4gICAgICBzYW5kYm94LnN0dWIocGF0aC5wb3NpeCwgJ3Jlc29sdmUnKTtcbiAgICAgIHNhbmRib3guc3R1YihqaW1wLCAncmVhZCcpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdmaWxlU2l6ZScpO1xuICAgICAgdGVtcC5wYXRoLnJldHVybnMobG9jYWxGaWxlKTtcbiAgICAgIHN1cHBvcnQuZnMuZXhpc3RzLndpdGhBcmdzKGxvY2FsRmlsZSkucmV0dXJucyh0cnVlKTtcbiAgICAgIHN1cHBvcnQuZnMudW5saW5rLndpdGhBcmdzKGxvY2FsRmlsZSkucmV0dXJucyh0cnVlKTtcbiAgICAgIHBhdGgucG9zaXgucmVzb2x2ZS53aXRoQXJncyhkZWZhdWx0RGlyLCAnc2NyZWVuc2hvdC5wbmcnKS5yZXR1cm5zKHBuZyk7XG4gICAgICBkcml2ZXIuYWRiLmZpbGVTaXplLndpdGhBcmdzKHBuZykucmV0dXJucygxKTtcbiAgICAgIGppbXAucmVhZC53aXRoQXJncyhsb2NhbEZpbGUpLnJldHVybnMoJ3NjcmVlbnNob290X2NvbnRleHQnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHNjcmVlbnNob3QgdmlhIGFkYiBzaGVsbCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGhlbHBlcnMuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiU2hlbGwoZHJpdmVyLmFkYiwge30pXG4gICAgICAgIC5zaG91bGQuYmVjb21lKCdzY3JlZW5zaG9vdF9jb250ZXh0Jyk7XG4gICAgICBkcml2ZXIuYWRiLnNoZWxsLmNhbGxlZFdpdGhFeGFjdGx5KFsnL3N5c3RlbS9iaW4vcm0nLCBgJHtwbmd9O2BcbiAgICAgICAgLCAnL3N5c3RlbS9iaW4vc2NyZWVuY2FwJywgJy1wJywgcG5nXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkcml2ZXIuYWRiLnB1bGwuY2FsbGVkV2l0aEV4YWN0bHkocG5nLCBsb2NhbEZpbGUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgamltcC5yZWFkLmNhbGxlZFdpdGhFeGFjdGx5KGxvY2FsRmlsZSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBzdXBwb3J0LmZzLmV4aXN0cy5jYWxsZWRUd2ljZS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIHN1cHBvcnQuZnMudW5saW5rLmNhbGxlZFR3aWNlLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgYmUgcG9zc2libGUgdG8gY2hhbmdlIGRlZmF1bHQgcG5nIGRpcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhdGgucG9zaXgucmVzb2x2ZS53aXRoQXJncygnL2N1c3RvbS9wYXRoL3RtcC8nLCAnc2NyZWVuc2hvdC5wbmcnKS5yZXR1cm5zKHBuZyk7XG4gICAgICBhd2FpdCBoZWxwZXJzLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYlNoZWxsKGRyaXZlci5hZGJcbiAgICAgICAgLCB7YW5kcm9pZFNjcmVlbnNob3RQYXRoOiAnL2N1c3RvbS9wYXRoL3RtcC8nfSlcbiAgICAgICAgLnNob3VsZC5iZWNvbWUoJ3NjcmVlbnNob290X2NvbnRleHQnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGlmIHNpemUgb2YgdGhlIHNjcmVlbnNob3QgaXMgemVybycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5hZGIuZmlsZVNpemUud2l0aEFyZ3MocG5nKS5yZXR1cm5zKDApO1xuICAgICAgYXdhaXQgaGVscGVycy5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbChkcml2ZXIuYWRiLCB7fSlcbiAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ2VxdWFscyB0byB6ZXJvJyk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiRXhlY091dCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdGFrZSBzY3JlZW5zaG90IHZpYSBleGVjLW91dCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yih0ZWVuX3Byb2Nlc3MsICdleGVjJyk7XG4gICAgICBzYW5kYm94LnN0dWIoamltcCwgJ3JlYWQnKTtcbiAgICAgIHRlZW5fcHJvY2Vzcy5leGVjLnJldHVybnMoe3N0ZG91dDogJ3N0ZG91dCcsIHN0ZGVycjogJyd9KTtcbiAgICAgIGRyaXZlci5hZGIuZXhlY3V0YWJsZS5wYXRoID0gJ3BhdGgvdG8vYWRiJztcbiAgICAgIGF3YWl0IGhlbHBlcnMuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiRXhlY091dChkcml2ZXIuYWRiKTtcbiAgICAgIHRlZW5fcHJvY2Vzcy5leGVjLmNhbGxlZFdpdGhFeGFjdGx5KGRyaXZlci5hZGIuZXhlY3V0YWJsZS5wYXRoLFxuICAgICAgICBkcml2ZXIuYWRiLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3NcbiAgICAgICAgICAuY29uY2F0KFsnZXhlYy1vdXQnLCAnL3N5c3RlbS9iaW4vc2NyZWVuY2FwJywgJy1wJ10pLFxuICAgICAgICB7ZW5jb2Rpbmc6ICdiaW5hcnknLCBpc0J1ZmZlcjogdHJ1ZX0pLnNob3VsZC5iZS50cnVlO1xuICAgICAgamltcC5yZWFkLmNhbGxlZFdpdGhFeGFjdGx5KCdzdGRvdXQnKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGlmIHNpemUgb2YgdGhlIHNjcmVlbnNob3QgaXMgemVybycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yih0ZWVuX3Byb2Nlc3MsICdleGVjJyk7XG4gICAgICB0ZWVuX3Byb2Nlc3MuZXhlYy5yZXR1cm5zKHtzdGRvdXQ6ICcnLCBzdGRlcnI6ICcnfSk7XG4gICAgICBhd2FpdCBoZWxwZXJzLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQoZHJpdmVyLmFkYilcbiAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ1NjcmVlbnNob3QgcmV0dXJuZWQgbm8gZGF0YScpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgaWYgY29kZSBpcyBub3QgMCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yih0ZWVuX3Byb2Nlc3MsICdleGVjJyk7XG4gICAgICB0ZWVuX3Byb2Nlc3MuZXhlYy5yZXR1cm5zKHtjb2RlOiAxLCBzdGRvdXQ6ICcnLCBzdGRlcnI6ICcnfSk7XG4gICAgICBhd2FpdCBoZWxwZXJzLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQoZHJpdmVyLmFkYilcbiAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoYFNjcmVlbnNob3QgcmV0dXJuZWQgZXJyb3IsIGNvZGU6ICcxJywgc3RkZXJyOiAnJ2ApO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgaWYgc3RkZXJyIGlzIG5vdCBlbXB0eScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNhbmRib3guc3R1Yih0ZWVuX3Byb2Nlc3MsICdleGVjJyk7XG4gICAgICB0ZWVuX3Byb2Nlc3MuZXhlYy5yZXR1cm5zKHtjb2RlOiAwLCBzdGRvdXQ6ICcnLCBzdGRlcnI6ICdPb3BzJ30pO1xuICAgICAgYXdhaXQgaGVscGVycy5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJFeGVjT3V0KGRyaXZlci5hZGIpXG4gICAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKGBTY3JlZW5zaG90IHJldHVybmVkIGVycm9yLCBjb2RlOiAnMCcsIHN0ZGVycjogJ09vcHMnYCk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0U2NyZWVuc2hvdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgaW1hZ2U7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpbWFnZSA9IG5ldyBqaW1wKDEsIDEpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdnZXRBcGlMZXZlbCcpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlci5hZGIsICdnZXRTY3JlZW5PcmllbnRhdGlvbicpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ2dldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQnKTtcbiAgICAgIHNhbmRib3guc3R1Yihkcml2ZXIsICdnZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbCcpO1xuICAgICAgc2FuZGJveC5zdHViKGltYWdlLCAnZ2V0QnVmZmVyJykuY2FsbHNGYWtlKGZ1bmN0aW9uIChtaW1lLCBjYikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgICAgICByZXR1cm4gY2IuY2FsbCh0aGlzLCBudWxsLCBCdWZmZXIuZnJvbSgnYXBwaXVtJykpO1xuICAgICAgfSk7XG4gICAgICBzYW5kYm94LnN0dWIoaW1hZ2UsICdyb3RhdGUnKTtcbiAgICAgIGRyaXZlci5hZGIuZ2V0U2NyZWVuT3JpZW50YXRpb24ucmV0dXJucygyKTtcbiAgICAgIGltYWdlLnJvdGF0ZS53aXRoQXJncygtMTgwKS5yZXR1cm5zKGltYWdlKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdGFrZSBzY3JlZW5zaG90IHZpYSBleGVjLW91dCAoQVBJIGxldmVsID4gMjApJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLmFkYi5nZXRBcGlMZXZlbC5yZXR1cm5zKDI0KTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJFeGVjT3V0LndpdGhBcmdzKGRyaXZlci5hZGIpLnJldHVybnMoaW1hZ2UpO1xuICAgICAgYXdhaXQgZHJpdmVyLmdldFNjcmVlbnNob3QoKS5zaG91bGQuYmVjb21lKCdZWEJ3YVhWdCcpO1xuICAgICAgZHJpdmVyLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQuY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbC5ub3RDYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBpbWFnZS5nZXRCdWZmZXIuY2FsbGVkV2l0aChqaW1wLk1JTUVfUE5HKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdGFrZSBzY3JlZW5zaG90IHZpYSBhZGIgc2hlbGwgKEFQSSBsZXZlbCA8PSAyMCknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIuYWRiLmdldEFwaUxldmVsLnJldHVybnMoMjApO1xuICAgICAgZHJpdmVyLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYlNoZWxsLndpdGhBcmdzKGRyaXZlci5hZGIsIGRyaXZlci5vcHRzKS5yZXR1cm5zKGltYWdlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5nZXRTY3JlZW5zaG90KCkuc2hvdWxkLmJlY29tZSgnWVhCd2FYVnQnKTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbC5jYWxsZWRPbmNlLnNob3VsZC5iZS50cnVlO1xuICAgICAgZHJpdmVyLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQubm90Q2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgICAgaW1hZ2UuZ2V0QnVmZmVyLmNhbGxlZFdpdGgoamltcC5NSU1FX1BORykuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0cmllcyB0byB0YWtlIHNjcmVlbnNob3QgdmlhIGFkYiBzaGVsbCBpZiBleGVjLW91dCBmYWlsZWQgKEFQSSBsZXZlbCA+IDIwKScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5hZGIuZ2V0QXBpTGV2ZWwucmV0dXJucygyNCk7XG4gICAgICBkcml2ZXIuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiRXhlY091dC50aHJvd3MoKTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbC53aXRoQXJncyhkcml2ZXIuYWRiLCBkcml2ZXIub3B0cykucmV0dXJucyhpbWFnZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuZ2V0U2NyZWVuc2hvdCgpLnNob3VsZC5iZWNvbWUoJ1lYQndhWFZ0Jyk7XG4gICAgICBkcml2ZXIuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiU2hlbGwuY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJTaGVsbC5jYWxsZWRPbmNlLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgaWYgYWRiIHNoZWxsIGZhaWxlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5hZGIuZ2V0QXBpTGV2ZWwucmV0dXJucygyMCk7XG4gICAgICBkcml2ZXIuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiU2hlbGwudGhyb3dzKCk7XG4gICAgICBhd2FpdCBkcml2ZXIuZ2V0U2NyZWVuc2hvdCgpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ0Nhbm5vdCBnZXQgc2NyZWVuc2hvdCcpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcm90YXRlIGltYWdlIGlmIEFQSSBsZXZlbCA8IDIzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLmFkYi5nZXRBcGlMZXZlbC5yZXR1cm5zKDIyKTtcbiAgICAgIGRyaXZlci5nZXRTY3JlZW5zaG90RGF0YVdpdGhBZGJFeGVjT3V0LndpdGhBcmdzKGRyaXZlci5hZGIpLnJldHVybnMoaW1hZ2UpO1xuICAgICAgYXdhaXQgZHJpdmVyLmdldFNjcmVlbnNob3QoKTtcbiAgICAgIGRyaXZlci5hZGIuZ2V0U2NyZWVuT3JpZW50YXRpb24uY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGltYWdlLnJvdGF0ZS5jYWxsZWRPbmNlLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IHJvdGF0ZSBpbWFnZSBpZiBBUEkgbGV2ZWwgPj0gMjMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIuYWRiLmdldEFwaUxldmVsLnJldHVybnMoMjMpO1xuICAgICAgZHJpdmVyLmdldFNjcmVlbnNob3REYXRhV2l0aEFkYkV4ZWNPdXQud2l0aEFyZ3MoZHJpdmVyLmFkYikucmV0dXJucyhpbWFnZSk7XG4gICAgICBhd2FpdCBkcml2ZXIuZ2V0U2NyZWVuc2hvdCgpO1xuICAgICAgZHJpdmVyLmFkYi5nZXRTY3JlZW5PcmllbnRhdGlvbi5ub3RDYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBpbWFnZS5yb3RhdGUubm90Q2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IHRocm93cyBlcnJvciBpZiByb3RhdGUgaW1hZ2UgZmFpbGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgaW1hZ2Uucm90YXRlLnJlc2V0QmVoYXZpb3IoKTtcbiAgICAgIGltYWdlLnJvdGF0ZS50aHJvd3MoKTtcbiAgICAgIGRyaXZlci5hZGIuZ2V0QXBpTGV2ZWwucmV0dXJucygyMik7XG4gICAgICBkcml2ZXIuZ2V0U2NyZWVuc2hvdERhdGFXaXRoQWRiRXhlY091dC53aXRoQXJncyhkcml2ZXIuYWRiKS5yZXR1cm5zKGltYWdlKTtcbiAgICAgIGF3YWl0IGRyaXZlci5nZXRTY3JlZW5zaG90KCkuc2hvdWxkLmJlLmZ1bGZpbGxlZDtcbiAgICAgIGltYWdlLnJvdGF0ZS50aHJldygpLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
