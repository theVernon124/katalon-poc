'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _appiumBaseDriver = require('appium-base-driver');

var commands = {},
    helpers = {},
    extensions = {};

var WEBSOCKET_ENDPOINT = function WEBSOCKET_ENDPOINT(sessionId) {
  return _appiumBaseDriver.DEFAULT_WS_PATHNAME_PREFIX + '/session/' + sessionId + '/appium/device/logcat';
};

// https://github.com/SeleniumHQ/selenium/blob/0d425676b3c9df261dd641917f867d4d5ce7774d/java/client/src/org/openqa/selenium/logging/LogEntry.java
function toLogRecord(timestamp, level, message) {
  return {
    timestamp: timestamp,
    level: level,
    message: message
  };
}

extensions.supportedLogTypes = {
  logcat: {
    description: 'Logs for Android applications on real device and emulators via ADB',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.adb.getLogcatLogs());

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  bugreport: {
    description: '\'adb bugreport\' output for advanced issues diagnostic',
    getter: function getter(self) {
      var output, timestamp;
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.adb.bugreport());

          case 2:
            output = context$1$0.sent;
            timestamp = Date.now();
            return context$1$0.abrupt('return', output.split(_os2['default'].EOL).map(function (x) {
              return toLogRecord(timestamp, 'ALL', x);
            }));

          case 5:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  server: {
    description: 'Appium server logs',
    getter: function getter(self) {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to be able to get server logs');
      }
      var timestamp = Date.now();
      return _logger2['default'].unwrap().record.map(function (x) {
        return toLogRecord(timestamp, 'ALL', _lodash2['default'].isEmpty(x.prefix) ? x.message : '[' + x.prefix + '] ' + x.message);
      });
    }
  }
};

/**
 * Starts Android logcat broadcast websocket on the same host and port
 * where Appium server is running at `/ws/session/:sessionId:/appium/logcat` endpoint. The method
 * will return immediately if the web socket is already listening.
 *
 * Each connected webcoket listener will receive logcat log lines
 * as soon as they are visible to Appium.
 */
commands.mobileStartLogsBroadcast = function callee$0$0() {
  var pathname, wss;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathname = WEBSOCKET_ENDPOINT(this.sessionId);
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.server.getWebSocketHandlers(pathname));

      case 4:
        context$1$0.t1 = context$1$0.sent;

        if (context$1$0.t0.isEmpty.call(context$1$0.t0, context$1$0.t1)) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug('The logcat broadcasting web socket server is already listening at ' + pathname);
        return context$1$0.abrupt('return');

      case 8:

        _logger2['default'].info('Assigning logcat broadcasting web socket server to ' + pathname);
        // https://github.com/websockets/ws/blob/master/doc/ws.md
        wss = new _ws2['default'].Server({
          noServer: true
        });

        wss.on('connection', function (ws, req) {
          if (req) {
            var remoteIp = _lodash2['default'].isEmpty(req.headers['x-forwarded-for']) ? req.connection.remoteAddress : req.headers['x-forwarded-for'];
            _logger2['default'].debug('Established a new logcat listener web socket connection from ' + remoteIp);
          } else {
            _logger2['default'].debug('Established a new logcat listener web socket connection');
          }

          if (_lodash2['default'].isEmpty(_this2._logcatWebsocketListener)) {
            _this2._logcatWebsocketListener = function (logRecord) {
              if (ws && ws.readyState === _ws2['default'].OPEN) {
                ws.send(logRecord.message);
              }
            };
          }
          _this2.adb.setLogcatListener(_this2._logcatWebsocketListener);

          ws.on('close', function (code, reason) {
            if (!_lodash2['default'].isEmpty(_this2._logcatWebsocketListener)) {
              try {
                _this2.adb.removeLogcatListener(_this2._logcatWebsocketListener);
              } catch (ign) {}
              _this2._logcatWebsocketListener = null;
            }

            var closeMsg = 'Logcat listener web socket is closed.';
            if (!_lodash2['default'].isEmpty(code)) {
              closeMsg += ' Code: ' + code + '.';
            }
            if (!_lodash2['default'].isEmpty(reason)) {
              closeMsg += ' Reason: ' + reason + '.';
            }
            _logger2['default'].debug(closeMsg);
          });
        });
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.server.addWebSocketHandler(pathname, wss));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Stops the previously started logcat broadcasting wesocket server.
 * This method will return immediately if no server is running.
 */
commands.mobileStopLogsBroadcast = function callee$0$0() {
  var pathname;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathname = WEBSOCKET_ENDPOINT(this.sessionId);
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.server.getWebSocketHandlers(pathname));

      case 4:
        context$1$0.t1 = context$1$0.sent;

        if (!context$1$0.t0.isEmpty.call(context$1$0.t0, context$1$0.t1)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return');

      case 7:

        _logger2['default'].debug('Stopping the logcat broadcasting web socket server');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.server.removeWebSocketHandler(pathname));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxFQUFFO0FBQ3RCLHNCQUFRLGtCQUFnQixNQUFNLE1BQUcsQ0FBQzthQUNuQztBQUNELGdDQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztXQUNyQixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7O3lDQUNHLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQzs7Ozs7OztDQUNyRCxDQUFDOzs7Ozs7QUFNRixRQUFRLENBQUMsdUJBQXVCLEdBQUc7TUFDM0IsUUFBUTs7OztBQUFSLGdCQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzs7O3lDQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQzs7Ozs7NEJBQXhELE9BQU87Ozs7Ozs7OztBQUliLDRCQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDOzt5Q0FDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7Q0FDbkQsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9sb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnd3MnO1xuaW1wb3J0IHsgREVGQVVMVF9XU19QQVRITkFNRV9QUkVGSVggfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbnN0IFdFQlNPQ0tFVF9FTkRQT0lOVCA9IChzZXNzaW9uSWQpID0+IGAke0RFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYfS9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hcHBpdW0vZGV2aWNlL2xvZ2NhdGA7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWxlbml1bUhRL3NlbGVuaXVtL2Jsb2IvMGQ0MjU2NzZiM2M5ZGYyNjFkZDY0MTkxN2Y4NjdkNGQ1Y2U3Nzc0ZC9qYXZhL2NsaWVudC9zcmMvb3JnL29wZW5xYS9zZWxlbml1bS9sb2dnaW5nL0xvZ0VudHJ5LmphdmFcbmZ1bmN0aW9uIHRvTG9nUmVjb3JkICh0aW1lc3RhbXAsIGxldmVsLCBtZXNzYWdlKSB7XG4gIHJldHVybiB7XG4gICAgdGltZXN0YW1wLFxuICAgIGxldmVsLFxuICAgIG1lc3NhZ2UsXG4gIH07XG59XG5cbmV4dGVuc2lvbnMuc3VwcG9ydGVkTG9nVHlwZXMgPSB7XG4gIGxvZ2NhdDoge1xuICAgIGRlc2NyaXB0aW9uOiAnTG9ncyBmb3IgQW5kcm9pZCBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2UgYW5kIGVtdWxhdG9ycyB2aWEgQURCJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBzZWxmLmFkYi5nZXRMb2djYXRMb2dzKCksXG4gIH0sXG4gIGJ1Z3JlcG9ydDoge1xuICAgIGRlc2NyaXB0aW9uOiBgJ2FkYiBidWdyZXBvcnQnIG91dHB1dCBmb3IgYWR2YW5jZWQgaXNzdWVzIGRpYWdub3N0aWNgLFxuICAgIGdldHRlcjogYXN5bmMgKHNlbGYpID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHNlbGYuYWRiLmJ1Z3JlcG9ydCgpO1xuICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgIHJldHVybiBvdXRwdXQuc3BsaXQob3MuRU9MKVxuICAgICAgICAubWFwKCh4KSA9PiB0b0xvZ1JlY29yZCh0aW1lc3RhbXAsICdBTEwnLCB4KSk7XG4gICAgfSxcbiAgfSxcbiAgc2VydmVyOiB7XG4gICAgZGVzY3JpcHRpb246ICdBcHBpdW0gc2VydmVyIGxvZ3MnLFxuICAgIGdldHRlcjogKHNlbGYpID0+IHtcbiAgICAgIGlmICghc2VsZi5yZWxheGVkU2VjdXJpdHlFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbiBvcmRlciB0byBiZSBhYmxlIHRvIGdldCBzZXJ2ZXIgbG9ncycpO1xuICAgICAgfVxuICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgIHJldHVybiBsb2cudW53cmFwKCkucmVjb3JkXG4gICAgICAgIC5tYXAoKHgpID0+IHRvTG9nUmVjb3JkKHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FMTCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNFbXB0eSh4LnByZWZpeCkgPyB4Lm1lc3NhZ2UgOiBgWyR7eC5wcmVmaXh9XSAke3gubWVzc2FnZX1gKVxuICAgICAgICApO1xuICAgIH0sXG4gIH0sXG59O1xuXG4vKipcbiAqIFN0YXJ0cyBBbmRyb2lkIGxvZ2NhdCBicm9hZGNhc3Qgd2Vic29ja2V0IG9uIHRoZSBzYW1lIGhvc3QgYW5kIHBvcnRcbiAqIHdoZXJlIEFwcGl1bSBzZXJ2ZXIgaXMgcnVubmluZyBhdCBgL3dzL3Nlc3Npb24vOnNlc3Npb25JZDovYXBwaXVtL2xvZ2NhdGAgZW5kcG9pbnQuIFRoZSBtZXRob2RcbiAqIHdpbGwgcmV0dXJuIGltbWVkaWF0ZWx5IGlmIHRoZSB3ZWIgc29ja2V0IGlzIGFscmVhZHkgbGlzdGVuaW5nLlxuICpcbiAqIEVhY2ggY29ubmVjdGVkIHdlYmNva2V0IGxpc3RlbmVyIHdpbGwgcmVjZWl2ZSBsb2djYXQgbG9nIGxpbmVzXG4gKiBhcyBzb29uIGFzIHRoZXkgYXJlIHZpc2libGUgdG8gQXBwaXVtLlxuICovXG5jb21tYW5kcy5tb2JpbGVTdGFydExvZ3NCcm9hZGNhc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHBhdGhuYW1lID0gV0VCU09DS0VUX0VORFBPSU5UKHRoaXMuc2Vzc2lvbklkKTtcbiAgaWYgKCFfLmlzRW1wdHkoYXdhaXQgdGhpcy5zZXJ2ZXIuZ2V0V2ViU29ja2V0SGFuZGxlcnMocGF0aG5hbWUpKSkge1xuICAgIGxvZy5kZWJ1ZyhgVGhlIGxvZ2NhdCBicm9hZGNhc3Rpbmcgd2ViIHNvY2tldCBzZXJ2ZXIgaXMgYWxyZWFkeSBsaXN0ZW5pbmcgYXQgJHtwYXRobmFtZX1gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuaW5mbyhgQXNzaWduaW5nIGxvZ2NhdCBicm9hZGNhc3Rpbmcgd2ViIHNvY2tldCBzZXJ2ZXIgdG8gJHtwYXRobmFtZX1gKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvYmxvYi9tYXN0ZXIvZG9jL3dzLm1kXG4gIGNvbnN0IHdzcyA9IG5ldyBXZWJTb2NrZXQuU2VydmVyKHtcbiAgICBub1NlcnZlcjogdHJ1ZSxcbiAgfSk7XG4gIHdzcy5vbignY29ubmVjdGlvbicsICh3cywgcmVxKSA9PiB7XG4gICAgaWYgKHJlcSkge1xuICAgICAgY29uc3QgcmVtb3RlSXAgPSBfLmlzRW1wdHkocmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddKVxuICAgICAgICA/IHJlcS5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3NcbiAgICAgICAgOiByZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ107XG4gICAgICBsb2cuZGVidWcoYEVzdGFibGlzaGVkIGEgbmV3IGxvZ2NhdCBsaXN0ZW5lciB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gZnJvbSAke3JlbW90ZUlwfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZGVidWcoJ0VzdGFibGlzaGVkIGEgbmV3IGxvZ2NhdCBsaXN0ZW5lciB3ZWIgc29ja2V0IGNvbm5lY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAoXy5pc0VtcHR5KHRoaXMuX2xvZ2NhdFdlYnNvY2tldExpc3RlbmVyKSkge1xuICAgICAgdGhpcy5fbG9nY2F0V2Vic29ja2V0TGlzdGVuZXIgPSAobG9nUmVjb3JkKSA9PiB7XG4gICAgICAgIGlmICh3cyAmJiB3cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICAgIHdzLnNlbmQobG9nUmVjb3JkLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmFkYi5zZXRMb2djYXRMaXN0ZW5lcih0aGlzLl9sb2djYXRXZWJzb2NrZXRMaXN0ZW5lcik7XG5cbiAgICB3cy5vbignY2xvc2UnLCAoY29kZSwgcmVhc29uKSA9PiB7XG4gICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLl9sb2djYXRXZWJzb2NrZXRMaXN0ZW5lcikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmFkYi5yZW1vdmVMb2djYXRMaXN0ZW5lcih0aGlzLl9sb2djYXRXZWJzb2NrZXRMaXN0ZW5lcik7XG4gICAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICAgICAgdGhpcy5fbG9nY2F0V2Vic29ja2V0TGlzdGVuZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBsZXQgY2xvc2VNc2cgPSAnTG9nY2F0IGxpc3RlbmVyIHdlYiBzb2NrZXQgaXMgY2xvc2VkLic7XG4gICAgICBpZiAoIV8uaXNFbXB0eShjb2RlKSkge1xuICAgICAgICBjbG9zZU1zZyArPSBgIENvZGU6ICR7Y29kZX0uYDtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc0VtcHR5KHJlYXNvbikpIHtcbiAgICAgICAgY2xvc2VNc2cgKz0gYCBSZWFzb246ICR7cmVhc29ufS5gO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKGNsb3NlTXNnKTtcbiAgICB9KTtcbiAgfSk7XG4gIGF3YWl0IHRoaXMuc2VydmVyLmFkZFdlYlNvY2tldEhhbmRsZXIocGF0aG5hbWUsIHdzcyk7XG59O1xuXG4vKipcbiAqIFN0b3BzIHRoZSBwcmV2aW91c2x5IHN0YXJ0ZWQgbG9nY2F0IGJyb2FkY2FzdGluZyB3ZXNvY2tldCBzZXJ2ZXIuXG4gKiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBpbW1lZGlhdGVseSBpZiBubyBzZXJ2ZXIgaXMgcnVubmluZy5cbiAqL1xuY29tbWFuZHMubW9iaWxlU3RvcExvZ3NCcm9hZGNhc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHBhdGhuYW1lID0gV0VCU09DS0VUX0VORFBPSU5UKHRoaXMuc2Vzc2lvbklkKTtcbiAgaWYgKF8uaXNFbXB0eShhd2FpdCB0aGlzLnNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycyhwYXRobmFtZSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmRlYnVnKCdTdG9wcGluZyB0aGUgbG9nY2F0IGJyb2FkY2FzdGluZyB3ZWIgc29ja2V0IHNlcnZlcicpO1xuICBhd2FpdCB0aGlzLnNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVyKHBhdGhuYW1lKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7Il0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
