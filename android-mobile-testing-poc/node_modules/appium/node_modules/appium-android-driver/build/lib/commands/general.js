'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _androidHelpers = require('../android-helpers');

var _androidHelpers2 = _interopRequireDefault(_androidHelpers);

var _appiumSupport = require('appium-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _webviewHelpers = require('../webview-helpers');

var commands = {},
    helpers = {},
    extensions = {};

commands.keys = function callee$0$0(keys) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // Protocol sends an array; rethink approach
        keys = _lodash2['default'].isArray(keys) ? keys.join('') : keys;
        params = {
          text: keys,
          replace: false
        };

        if (this.opts.unicodeKeyboard) {
          params.unicodeKeyboard = true;
        }
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.doSendKeys(params));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doSendKeys = function callee$0$0(params) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('setText', params));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getDeviceTime = function callee$0$0() {
  var out;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Attempting to capture android device date and time');
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.adb.shell(['date']));

      case 4:
        out = context$1$0.sent;
        return context$1$0.abrupt('return', out.trim());

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].errorAndThrow('Could not capture device date and time: ' + context$1$0.t0);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 8]]);
};

commands.getPageSource = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('source'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.back = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('pressBack'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.isKeyboardShown = function callee$0$0() {
  var keyboardInfo;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isSoftKeyboardPresent());

      case 2:
        keyboardInfo = context$1$0.sent;
        return context$1$0.abrupt('return', keyboardInfo.isKeyboardShown);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.hideKeyboard = function callee$0$0() {
  var _ref, isKeyboardShown, canCloseKeyboard;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isSoftKeyboardPresent());

      case 2:
        _ref = context$1$0.sent;
        isKeyboardShown = _ref.isKeyboardShown;
        canCloseKeyboard = _ref.canCloseKeyboard;

        if (isKeyboardShown) {
          context$1$0.next = 7;
          break;
        }

        throw new Error("Soft keyboard not present, cannot hide keyboard");

      case 7:
        if (!canCloseKeyboard) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.back());

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
        _logger2['default'].info("Keyboard has no UI; no closing necessary");

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.openSettingsActivity = function callee$0$0(setting) {
  var _ref2, appPackage, appActivity;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.getFocusedPackageAndActivity());

      case 2:
        _ref2 = context$1$0.sent;
        appPackage = _ref2.appPackage;
        appActivity = _ref2.appActivity;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.adb.shell(['am', 'start', '-a', 'android.settings.' + setting]));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.adb.waitForNotActivity(appPackage, appActivity, 5000));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowSize = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('getDeviceSize'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// For W3C
commands.getWindowRect = function callee$0$0() {
  var _ref3, width, height;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 2:
        _ref3 = context$1$0.sent;
        width = _ref3.width;
        height = _ref3.height;
        return context$1$0.abrupt('return', {
          width: width,
          height: height,
          x: 0,
          y: 0
        });

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getCurrentActivity = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.getFocusedPackageAndActivity());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent.appActivity);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getCurrentPackage = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.getFocusedPackageAndActivity());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent.appPackage);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.background = function callee$0$0(seconds) {
  var _ref4, appPackage, appActivity, args;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(seconds < 0)) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.goToHome());

      case 3:
        return context$1$0.abrupt('return', true);

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adb.getFocusedPackageAndActivity());

      case 6:
        _ref4 = context$1$0.sent;
        appPackage = _ref4.appPackage;
        appActivity = _ref4.appActivity;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.adb.goToHome());

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(seconds * 1000));

      case 13:
        args = undefined;

        if (!(this._cachedActivityArgs && this._cachedActivityArgs[appPackage + '/' + appActivity])) {
          context$1$0.next = 18;
          break;
        }

        // the activity was started with `startActivity`, so use those args to restart
        args = this._cachedActivityArgs[appPackage + '/' + appActivity];
        context$1$0.next = 28;
        break;

      case 18:
        context$1$0.prev = 18;

        _logger2['default'].debug('Activating app \'' + appPackage + '\' in order to restore it');
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.activateApp(appPackage));

      case 22:
        return context$1$0.abrupt('return', true);

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](18);

      case 27:
        args = appPackage === this.opts.appPackage && appActivity === this.opts.appActivity || appPackage === this.opts.appWaitPackage && (this.opts.appWaitActivity || '').split(',').includes(appActivity) ? { // the activity is the original session activity, so use the original args
          pkg: this.opts.appPackage,
          activity: this.opts.appActivity,
          action: this.opts.intentAction,
          category: this.opts.intentCategory,
          flags: this.opts.intentFlags,
          waitPkg: this.opts.appWaitPackage,
          waitActivity: this.opts.appWaitActivity,
          optionalIntentArguments: this.opts.optionalIntentArguments,
          stopApp: false,
          user: this.opts.userProfile } : { // the activity was started some other way, so use defaults
          pkg: appPackage,
          activity: appActivity,
          waitPkg: appPackage,
          waitActivity: appActivity,
          stopApp: false };

      case 28:
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_appiumSupport.util.filterObject(args));

      case 30:
        args = context$1$0.sent;

        _logger2['default'].debug('Bringing application back to foreground with arguments: ' + JSON.stringify(args));
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(this.adb.startApp(args));

      case 34:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 25]]);
};

commands.getStrings = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (language) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.getDeviceLanguage());

      case 3:
        language = context$1$0.sent;

        _logger2['default'].info('No language specified, returning strings for: ' + language);

      case 5:
        if (!this.apkStrings[language]) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', this.apkStrings[language]);

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_androidHelpers2['default'].pushStrings(language, this.adb, this.opts));

      case 9:
        this.apkStrings[language] = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('updateStrings'));

      case 12:
        return context$1$0.abrupt('return', this.apkStrings[language]);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.launchApp = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.initAUT());

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.startAUT());

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.startActivity = function callee$0$0(appPackage, appActivity, appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags, optionalIntentArguments, dontStopAppOnReset) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Starting package \'' + appPackage + '\' and activity \'' + appActivity + '\'');

        // dontStopAppOnReset is both an argument here, and a desired capability
        // if the argument is set, use it, otherwise use the cap
        if (!_appiumSupport.util.hasValue(dontStopAppOnReset)) {
          dontStopAppOnReset = !!this.opts.dontStopAppOnReset;
        }

        args = {
          pkg: appPackage,
          activity: appActivity,
          waitPkg: appWaitPackage || appPackage,
          waitActivity: appWaitActivity || appActivity,
          action: intentAction,
          category: intentCategory,
          flags: intentFlags,
          optionalIntentArguments: optionalIntentArguments,
          stopApp: !dontStopAppOnReset
        };

        this._cachedActivityArgs = this._cachedActivityArgs || {};
        this._cachedActivityArgs[args.waitPkg + '/' + args.waitActivity] = args;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.adb.startApp(args));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.reset = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_androidHelpers2['default'].resetApp(this.adb, _Object$assign({}, this.opts, { fastReset: true })));

      case 2:
        // reset context since we don't know what kind on context we will end up after app launch.
        this.curContext = _webviewHelpers.NATIVE_WIN;

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.isChromeSession);

      case 5:
        if (!context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.t0 = this.startChromeSession();
        context$1$0.next = 10;
        break;

      case 9:
        context$1$0.t0 = this.startAUT();

      case 10:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.startAUT = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.startApp({
          pkg: this.opts.appPackage,
          activity: this.opts.appActivity,
          action: this.opts.intentAction,
          category: this.opts.intentCategory,
          flags: this.opts.intentFlags,
          waitPkg: this.opts.appWaitPackage,
          waitActivity: this.opts.appWaitActivity,
          waitDuration: this.opts.appWaitDuration,
          optionalIntentArguments: this.opts.optionalIntentArguments,
          stopApp: !this.opts.dontStopAppOnReset,
          user: this.opts.userProfile
        }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// we override setUrl to take an android URI which can be used for deep-linking
// inside an app, similar to starting an intent
commands.setUrl = function callee$0$0(uri) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.startUri(uri, this.opts.appPackage));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// closing app using force stop
commands.closeApp = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

      case 2:
        // reset context since we don't know what kind on context we will end up after app launch.
        this.curContext = _webviewHelpers.NATIVE_WIN;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.stopChromedriverProxies());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getDisplayDensity = function callee$0$0() {
  var out, val;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.shell(['getprop', 'ro.sf.lcd_density']));

      case 2:
        out = context$1$0.sent;

        if (!out) {
          context$1$0.next = 8;
          break;
        }

        val = parseInt(out, 10);

        if (isNaN(val)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', val);

      case 7:
        _logger2['default'].debug('Parsed density value was NaN: "' + out + '"');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.adb.shell(['getprop', 'qemu.sf.lcd_density']));

      case 10:
        out = context$1$0.sent;

        if (!out) {
          context$1$0.next = 16;
          break;
        }

        val = parseInt(out, 10);

        if (isNaN(val)) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', val);

      case 15:
        _logger2['default'].debug('Parsed density value was NaN: "' + out + '"');

      case 16:
        // couldn't get anything, so error out
        _logger2['default'].errorAndThrow('Failed to get display density property.');

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Parses the given window manager Surface string to get info.
 * @param line: To parse. This is assumed to be valid.
 * @return: Visibility and bounds of the Surface.
 */
function parseSurfaceLine(line) {
  // the surface bounds are in the format:
  // "rect=(0.0,1184.0) 768.0 x 96.0"
  //       ^ location   ^ size
  // cut out the stuff before the 'rect' and then split the numbers apart
  var bounds = line.split('rect=')[1].replace(/[\(\), x]+/g, ' ').trim().split(' ');

  return {
    visible: line.indexOf('shown=true') !== -1,
    x: parseFloat(bounds[0]),
    y: parseFloat(bounds[1]),
    width: parseFloat(bounds[2]),
    height: parseFloat(bounds[3])
  };
}

/**
 * Extracts status and navigation bar information from the window manager output.
 * @param lines: Output from dumpsys command
 * @return: Visibility and bounds info of status and navigation bar
 */
function parseWindows(lines) {
  var atStatusBar = false;
  var atNavBar = false;
  var statusBar = undefined;
  var navigationBar = undefined;
  // the window manager output looks like:
  // Window #1 ... WindowID
  //   A bunch of properties
  // Window #2 ... WindowID
  //   A bunch of properties
  lines.split('\n').forEach(function (line) {
    // the start of a new window section
    if (line.indexOf('  Window #') !== -1) {
      // determine which section we're in
      // only one will be true
      atStatusBar = line.indexOf('StatusBar') !== -1;
      atNavBar = line.indexOf('NavigationBar') !== -1;
      // don't need anything else. move to next line
      return;
    }
    // once we're in a window section, look for the surface data line
    if (line.indexOf('      Surface:') === -1) {
      return;
    }
    if (atStatusBar) {
      statusBar = parseSurfaceLine(line);
      atStatusBar = false;
    } else if (atNavBar) {
      navigationBar = parseSurfaceLine(line);
      atNavBar = false;
    }
  });

  if (!statusBar) {
    _logger2['default'].errorAndThrow('Failed to parse status bar information.');
  }
  if (!navigationBar) {
    _logger2['default'].errorAndThrow('Failed to parse navigation bar information.');
  }

  return { statusBar: statusBar, navigationBar: navigationBar };
}

commands.getSystemBars = function callee$0$0() {
  var out;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.shell(['dumpsys', 'window', 'windows']));

      case 2:
        out = context$1$0.sent;

        if (!out) {
          _logger2['default'].errorAndThrow('Did not get window manager output.');
        }
        return context$1$0.abrupt('return', parseWindows(out));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// for unit tests
exports.parseWindows = parseWindows;
exports.parseSurfaceLine = parseSurfaceLine;

// if user passes in a negative seconds value, interpret that as the instruction
// to not bring the app back at all

// Return cached strings

// TODO: This is mutating the current language, but it's how appium currently works

// first try the property for devices

// if the value is NaN, try getting the emulator property

// fallback to trying property for emulators
//# sourceMappingURL=data:application/json;charset=utf8;base64,
