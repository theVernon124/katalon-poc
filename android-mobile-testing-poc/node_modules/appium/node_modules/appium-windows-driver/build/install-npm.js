#!/usr/bin/env node

/* eslint-disable no-console */
/* eslint-disable promise/prefer-await-to-callbacks */

'use strict';

var fs = require('fs');
var path = require('path');
var system = require('appium-support').system;

function waitForDeps(cb) {
  // see if we can import the necessary code
  // try it a ridiculous (but finite) number of times
  var i = 0;
  function check() {
    i++;
    try {
      require('./build/lib/installer');
      cb();
    } catch (err) {
      if (err.message.indexOf("Cannot find module './build/lib/installer'") !== -1) {
        console.warn('Project does not appear to built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }
      console.warn('Error trying to install WinAppDriver MSI. Waiting and trying again.', err.message);
      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }
  check();
}

if (require.main === module) {
  (function () {
    if (!system.isWindows()) {
      console.warn("Not installing WinAppDriver since did not detect a Windows system");
      process.exit(0);
    }
    // check if cur dir exists
    var installScript = path.resolve(__dirname, 'build', 'lib', 'installer.js');
    waitForDeps(function (err) {
      if (err) {
        console.warn("Unable to import install script. Re-run `install appium-windows-driver` manually.");
        return;
      }
      fs.stat(installScript, function (err) {
        if (err) {
          console.warn("NOTE: Run 'gulp transpile' before using");
          return;
        }
        require('./build/lib/installer').setupWAD()['catch'](function (err) {
          console.error(err.message);
          console.error("WinAppDriver was not installed; please check your " + "system and re-run npm install if you need WinAppDriver");
        });
      });
    });
  })();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDOztBQUdoRCxTQUFTLFdBQVcsQ0FBRSxFQUFFLEVBQUU7OztBQUd4QixNQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixXQUFTLEtBQUssR0FBSTtBQUNoQixLQUFDLEVBQUUsQ0FBQztBQUNKLFFBQUk7QUFDRixhQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNqQyxRQUFFLEVBQUUsQ0FBQztLQUNOLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFDWixVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDNUUsZUFBTyxDQUFDLElBQUksQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ3pGLGVBQU8sRUFBRSxDQUFDLDRCQUE0QixHQUFHLEdBQUcsQ0FBQyxDQUFDO09BQy9DO0FBQ0QsYUFBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakcsVUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQ1osa0JBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDekIsTUFBTTtBQUNMLFVBQUUsQ0FBQyx3Q0FBd0MsR0FBRyxHQUFHLENBQUMsQ0FBQztPQUNwRDtLQUNGO0dBQ0Y7QUFDRCxPQUFLLEVBQUUsQ0FBQztDQUNUOztBQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7O0FBQzNCLFFBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUU7QUFDdkIsYUFBTyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO0FBQ2xGLGFBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakI7O0FBRUQsUUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM5RSxlQUFXLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDekIsVUFBSSxHQUFHLEVBQUU7QUFDUCxlQUFPLENBQUMsSUFBSSxDQUFDLG1GQUFtRixDQUFDLENBQUM7QUFDbEcsZUFBTztPQUNSO0FBQ0QsUUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDcEMsWUFBSSxHQUFHLEVBQUU7QUFDUCxpQkFBTyxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3hELGlCQUFPO1NBQ1I7QUFDRCxlQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBTSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQy9ELGlCQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzQixpQkFBTyxDQUFDLEtBQUssQ0FBQyxvREFBb0QsR0FDcEQsd0RBQXdELENBQUMsQ0FBQztTQUN6RSxDQUFDLENBQUM7T0FDSixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7O0NBQ0oiLCJmaWxlIjoiaW5zdGFsbC1ucG0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrcyAqL1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgc3lzdGVtID0gcmVxdWlyZSgnYXBwaXVtLXN1cHBvcnQnKS5zeXN0ZW07XG5cblxuZnVuY3Rpb24gd2FpdEZvckRlcHMgKGNiKSB7XG4gIC8vIHNlZSBpZiB3ZSBjYW4gaW1wb3J0IHRoZSBuZWNlc3NhcnkgY29kZVxuICAvLyB0cnkgaXQgYSByaWRpY3Vsb3VzIChidXQgZmluaXRlKSBudW1iZXIgb2YgdGltZXNcbiAgbGV0IGkgPSAwO1xuICBmdW5jdGlvbiBjaGVjayAoKSB7XG4gICAgaSsrO1xuICAgIHRyeSB7XG4gICAgICByZXF1aXJlKCcuL2J1aWxkL2xpYi9pbnN0YWxsZXInKTtcbiAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnLi9idWlsZC9saWIvaW5zdGFsbGVyJ1wiKSAhPT0gLTEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdQcm9qZWN0IGRvZXMgbm90IGFwcGVhciB0byBidWlsdCB5ZXQuIFBsZWFzZSBydW4gYGd1bHAgdHJhbnNwaWxlYCBmaXJzdC4nKTtcbiAgICAgICAgcmV0dXJuIGNiKCdDb3VsZCBub3QgaW5zdGFsbCBtb2R1bGU6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuKCdFcnJvciB0cnlpbmcgdG8gaW5zdGFsbCBXaW5BcHBEcml2ZXIgTVNJLiBXYWl0aW5nIGFuZCB0cnlpbmcgYWdhaW4uJywgZXJyLm1lc3NhZ2UpO1xuICAgICAgaWYgKGkgPD0gMjAwKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2hlY2ssIDEwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IoJ0NvdWxkIG5vdCBpbXBvcnQgaW5zdGFsbGF0aW9uIG1vZHVsZTogJyArIGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNoZWNrKCk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBpZiAoIXN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdCBpbnN0YWxsaW5nIFdpbkFwcERyaXZlciBzaW5jZSBkaWQgbm90IGRldGVjdCBhIFdpbmRvd3Mgc3lzdGVtXCIpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfVxuICAvLyBjaGVjayBpZiBjdXIgZGlyIGV4aXN0c1xuICBjb25zdCBpbnN0YWxsU2NyaXB0ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkJywgJ2xpYicsICdpbnN0YWxsZXIuanMnKTtcbiAgd2FpdEZvckRlcHMoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbXBvcnQgaW5zdGFsbCBzY3JpcHQuIFJlLXJ1biBgaW5zdGFsbCBhcHBpdW0td2luZG93cy1kcml2ZXJgIG1hbnVhbGx5LlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZnMuc3RhdChpbnN0YWxsU2NyaXB0LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5PVEU6IFJ1biAnZ3VscCB0cmFuc3BpbGUnIGJlZm9yZSB1c2luZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVxdWlyZSgnLi9idWlsZC9saWIvaW5zdGFsbGVyJykuc2V0dXBXQUQoKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiV2luQXBwRHJpdmVyIHdhcyBub3QgaW5zdGFsbGVkOyBwbGVhc2UgY2hlY2sgeW91ciBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgXCJzeXN0ZW0gYW5kIHJlLXJ1biBucG0gaW5zdGFsbCBpZiB5b3UgbmVlZCBXaW5BcHBEcml2ZXJcIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii4uIn0=
