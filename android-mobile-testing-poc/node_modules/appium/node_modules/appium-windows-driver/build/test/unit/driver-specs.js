require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  var isWindowsStub = undefined;
  before(function () {
    isWindowsStub = _sinon2['default'].stub(_appiumSupport.system, "isWindows").returns(true);
  });
  after(function () {
    isWindowsStub.restore();
  });

  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            _sinon2['default'].mock(driver).expects('startWinAppDriverSession').once().returns(_bluebird2['default'].resolve());
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 4:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    // TODO: Implement or delete
    //it('should set the default context', async function () {
    //  let driver = new SelendroidDriver({}, false);
    //  sinon.mock(driver).expects('checkAppPresent')
    //    .returns(Promise.resolve());
    //  sinon.mock(driver).expects('startSelendroidSession')
    //    .returns(Promise.resolve());
    //  await driver.createSession({});
    //  driver.curContext.should.equal('NATIVE_APP');
    //});
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    // TODO: Implement or delete
    //describe('#getProxyAvoidList', function () {
    //  it('should exist', function () {
    //    driver.getProxyAvoidList.should.be.an.instanceof(Function);
    //  });
    //  it('should return jwpProxyAvoid array', function () {
    //    let avoidList = driver.getProxyAvoidList('abc');
    //    avoidList.should.be.an.instanceof(Array);
    //    avoidList.should.eql(driver.jwpProxyAvoid);
    //  });
    //  it('should throw an error if session id is wrong', function () {
    //    (() => { driver.getProxyAvoidList('aaa'); }).should.throw;
    //  });
    //});

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9kcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0JBRTBCLE9BQU87Ozs7b0JBQ2hCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3FCQUMzQixPQUFPOzs7O3dCQUNYLFVBQVU7Ozs7NkJBQ0QsZ0JBQWdCOztBQUd2QyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWTtBQUNoQyxNQUFJLGFBQWEsWUFBQSxDQUFDO0FBQ2xCLFFBQU0sQ0FBQyxZQUFZO0FBQ2pCLGlCQUFhLEdBQUcsbUJBQU0sSUFBSSx3QkFBUyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDL0QsQ0FBQyxDQUFDO0FBQ0gsT0FBSyxDQUFDLFlBQVk7QUFDaEIsaUJBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUN6QixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFZO0FBQ2xDLE1BQUUsQ0FBQyx3Q0FBd0MsRUFBRSxZQUFZO0FBQ3ZELFVBQUksTUFBTSxHQUFHLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLFlBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3BCLFlBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBWTtBQUNwQyxNQUFFLENBQUMsc0JBQXNCLEVBQUU7VUFDckIsTUFBTTs7OztBQUFOLGtCQUFNLEdBQUcsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBQyxFQUFFLEtBQUssQ0FBQzs7QUFDdEQsK0JBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUNuRCxJQUFJLEVBQUUsQ0FDTixPQUFPLENBQUMsc0JBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQzs7NkNBQ2xCLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7OztBQUMxQyxrQkFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzlCLGtCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0tBQ3JDLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7O0dBWUosQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxVQUFVLEVBQUUsWUFBWTtBQUMvQixRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDLFlBQVk7QUFDakIsWUFBTSxHQUFHLGtCQUFrQixFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEMsWUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0FBQ0gsWUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQ25DLFFBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBWTtBQUM3QixjQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLG9CQUFvQixFQUFFLFlBQVk7QUFDbkMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7T0FDMUMsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsU0FBQyxZQUFNO0FBQUUsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FBRSxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUM7T0FDckQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCSCxZQUFRLENBQUMsV0FBVyxFQUFFLFlBQVk7QUFDaEMsUUFBRSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQzdCLGNBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNuRCxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsb0JBQW9CLEVBQUUsWUFBWTtBQUNuQyxjQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQUssQ0FBQztPQUN2QyxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsOENBQThDLEVBQUUsWUFBWTtBQUM3RCxTQUFDLFlBQU07QUFBRSxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQztPQUNsRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2RyaXZlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgV2luZG93c0RyaXZlciBmcm9tICcuLi8uLic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2RyaXZlci5qcycsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGlzV2luZG93c1N0dWI7XG4gIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgaXNXaW5kb3dzU3R1YiA9IHNpbm9uLnN0dWIoc3lzdGVtLCBcImlzV2luZG93c1wiKS5yZXR1cm5zKHRydWUpO1xuICB9KTtcbiAgYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgIGlzV2luZG93c1N0dWIucmVzdG9yZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY29uc3RydWN0b3InLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ2NhbGxzIEJhc2VEcml2ZXIgY29uc3RydWN0b3Igd2l0aCBvcHRzJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRyaXZlciA9IG5ldyBXaW5kb3dzRHJpdmVyKHsgZm9vOiAnYmFyJyB9KTtcbiAgICAgIGRyaXZlci5zaG91bGQuZXhpc3Q7XG4gICAgICBkcml2ZXIub3B0cy5mb28uc2hvdWxkLmVxdWFsKCdiYXInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZVNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBzZXQgc2Vzc2lvbklkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRyaXZlciA9IG5ldyBXaW5kb3dzRHJpdmVyKHsgYXBwOiAnbXlhcHAnfSwgZmFsc2UpO1xuICAgICAgc2lub24ubW9jayhkcml2ZXIpLmV4cGVjdHMoJ3N0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbicpXG4gICAgICAgIC5vbmNlKClcbiAgICAgICAgLnJldHVybnMoQi5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oeyBjYXA6ICdmb28nIH0pO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZC5zaG91bGQuZXhpc3Q7XG4gICAgICBkcml2ZXIuY2Fwcy5jYXAuc2hvdWxkLmVxdWFsKCdmb28nKTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IEltcGxlbWVudCBvciBkZWxldGVcbiAgICAvL2l0KCdzaG91bGQgc2V0IHRoZSBkZWZhdWx0IGNvbnRleHQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgLy8gIGxldCBkcml2ZXIgPSBuZXcgU2VsZW5kcm9pZERyaXZlcih7fSwgZmFsc2UpO1xuICAgIC8vICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnY2hlY2tBcHBQcmVzZW50JylcbiAgICAvLyAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgLy8gIHNpbm9uLm1vY2soZHJpdmVyKS5leHBlY3RzKCdzdGFydFNlbGVuZHJvaWRTZXNzaW9uJylcbiAgICAvLyAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgLy8gIGF3YWl0IGRyaXZlci5jcmVhdGVTZXNzaW9uKHt9KTtcbiAgICAvLyAgZHJpdmVyLmN1ckNvbnRleHQuc2hvdWxkLmVxdWFsKCdOQVRJVkVfQVBQJyk7XG4gICAgLy99KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Byb3h5aW5nJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkcml2ZXI7XG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlciA9IG5ldyBXaW5kb3dzRHJpdmVyKHt9LCBmYWxzZSk7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkID0gJ2FiYyc7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNwcm94eUFjdGl2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZSgnYWJjJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHsgZHJpdmVyLnByb3h5QWN0aXZlKCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiBJbXBsZW1lbnQgb3IgZGVsZXRlXG4gICAgLy9kZXNjcmliZSgnI2dldFByb3h5QXZvaWRMaXN0JywgZnVuY3Rpb24gKCkge1xuICAgIC8vICBpdCgnc2hvdWxkIGV4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgIGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgLy8gIH0pO1xuICAgIC8vICBpdCgnc2hvdWxkIHJldHVybiBqd3BQcm94eUF2b2lkIGFycmF5JywgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgIGxldCBhdm9pZExpc3QgPSBkcml2ZXIuZ2V0UHJveHlBdm9pZExpc3QoJ2FiYycpO1xuICAgIC8vICAgIGF2b2lkTGlzdC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAgLy8gICAgYXZvaWRMaXN0LnNob3VsZC5lcWwoZHJpdmVyLmp3cFByb3h5QXZvaWQpO1xuICAgIC8vICB9KTtcbiAgICAvLyAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiBzZXNzaW9uIGlkIGlzIHdyb25nJywgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICgoKSA9PiB7IGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdCgnYWFhJyk7IH0pLnNob3VsZC50aHJvdztcbiAgICAvLyAgfSk7XG4gICAgLy99KTtcblxuICAgIGRlc2NyaWJlKCcjY2FuUHJveHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGV4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIuY2FuUHJveHkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIuY2FuUHJveHkoJ2FiYycpLnNob3VsZC5iZS50cnVlO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHNlc3Npb24gaWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7IGRyaXZlci5jYW5Qcm94eSgnYWFhJyk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
