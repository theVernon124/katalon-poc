require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libWinappdriver = require('../../lib/winappdriver');

var _libWinappdriver2 = _interopRequireDefault(_libWinappdriver);

var _appiumTestSupport = require('appium-test-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildWinAppDriverOpts() {
  return {
    app: 'foo',
    host: 'localhost',
    port: 4723
  };
}

describe('WinAppDriverServer', function () {
  describe('#startSession', (0, _appiumTestSupport.withSandbox)({}, function (S) {
    var winAppDriver = new _libWinappdriver2['default'](buildWinAppDriverOpts());

    afterEach(function () {
      S.verify();
    });

    it('should start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            S.mocks.jwproxy = S.sandbox.mock(winAppDriver.jwproxy);
            S.mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_bluebird2['default'].resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(winAppDriver.startSession(caps));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC93aW5hcHBkcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7OytCQUNkLHdCQUF3Qjs7OztpQ0FDM0IscUJBQXFCOzt3QkFDbkMsVUFBVTs7OztBQUd4QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFNBQVMscUJBQXFCLEdBQUk7QUFDaEMsU0FBTztBQUNMLE9BQUcsRUFBRSxLQUFLO0FBQ1YsUUFBSSxFQUFFLFdBQVc7QUFDakIsUUFBSSxFQUFFLElBQUk7R0FDWCxDQUFDO0NBQ0g7O0FBRUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQVk7QUFDekMsVUFBUSxDQUFDLGVBQWUsRUFBRSxvQ0FBWSxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7QUFDckQsUUFBSSxZQUFZLEdBQUcsaUNBQXVCLHFCQUFxQixFQUFFLENBQUMsQ0FBQzs7QUFFbkUsYUFBUyxDQUFDLFlBQVk7QUFDcEIsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ1osQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyx3QkFBd0IsRUFBRTtVQUN2QixJQUFJOzs7O0FBQUosZ0JBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7O0FBQ3pCLGFBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2RCxhQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQ3RDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDaEUsT0FBTyxDQUFDLHNCQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7OzZDQUNsQixZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUN0QyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQztDQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvd2luYXBwZHJpdmVyLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IFdpbkFwcERyaXZlclNlcnZlciBmcm9tICcuLi8uLi9saWIvd2luYXBwZHJpdmVyJztcbmltcG9ydCB7IHdpdGhTYW5kYm94IH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZnVuY3Rpb24gYnVpbGRXaW5BcHBEcml2ZXJPcHRzICgpIHtcbiAgcmV0dXJuIHtcbiAgICBhcHA6ICdmb28nLFxuICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgIHBvcnQ6IDQ3MjNcbiAgfTtcbn1cblxuZGVzY3JpYmUoJ1dpbkFwcERyaXZlclNlcnZlcicsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJyNzdGFydFNlc3Npb24nLCB3aXRoU2FuZGJveCh7fSwgZnVuY3Rpb24gKFMpIHtcbiAgICBsZXQgd2luQXBwRHJpdmVyID0gbmV3IFdpbkFwcERyaXZlclNlcnZlcihidWlsZFdpbkFwcERyaXZlck9wdHMoKSk7XG5cbiAgICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgUy52ZXJpZnkoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3RhcnQgYSBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGNhcHMgPSB7IGZvbzogJ2JhcicgfTtcbiAgICAgIFMubW9ja3Muandwcm94eSA9IFMuc2FuZGJveC5tb2NrKHdpbkFwcERyaXZlci5qd3Byb3h5KTtcbiAgICAgIFMubW9ja3Muandwcm94eS5leHBlY3RzKFwiY29tbWFuZFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc2Vzc2lvblwiLCBcIlBPU1RcIiwgeyBkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzIH0pXG4gICAgICAgIC5yZXR1cm5zKEIucmVzb2x2ZSgpKTtcbiAgICAgIGF3YWl0IHdpbkFwcERyaXZlci5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgfSk7XG4gIH0pKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
