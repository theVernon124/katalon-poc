'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _validators = require('./validators');

var _errors = require('./errors');

var _routes = require('./routes');

var _basedriverHelpers = require('../basedriver/helpers');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _basedriverDriver = require('../basedriver/driver');

var _basedriverDriver2 = _interopRequireDefault(_basedriverDriver);

var mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');
var w3cLog = _appiumSupport.logger.getLogger('W3C');

var JSONWP_SUCCESS_STATUS_CODE = 0;
// TODO: Make this value configurable as a server side capability
var LOG_OBJ_LENGTH = 1024; // MAX LENGTH Logged to file / console

var MJSONWP_ELEMENT_KEY = 'ELEMENT';
var W3C_ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';

var Protocol = function Protocol() {
  _classCallCheck(this, Protocol);
};

function getLogByProtocol(driver) {
  return driver.isW3CProtocol() ? w3cLog : mjsonwpLog;
}

function isSessionCommand(command) {
  return !_lodash2['default'].includes(_routes.NO_SESSION_ID_COMMANDS, command);
}

function wrapParams(paramSets, jsonObj) {
  /* There are commands like performTouch which take a single parameter (primitive type or array).
   * Some drivers choose to pass this parameter as a value (eg. [action1, action2...]) while others to
   * wrap it within an object(eg' {gesture:  [action1, action2...]}), which makes it hard to validate.
   * The wrap option in the spec enforce wrapping before validation, so that all params are wrapped at
   * the time they are validated and later passed to the commands.
   */
  var res = jsonObj;
  if (_lodash2['default'].isArray(jsonObj) || !_lodash2['default'].isObject(jsonObj)) {
    res = {};
    res[paramSets.wrap] = jsonObj;
  }
  return res;
}

function unwrapParams(paramSets, jsonObj) {
  /* There are commands like setNetworkConnection which send parameters wrapped inside a key such as
   * "parameters". This function unwraps them (eg. {"parameters": {"type": 1}} becomes {"type": 1}).
   */
  var res = jsonObj;
  if (_lodash2['default'].isObject(jsonObj)) {
    // some clients, like ruby, don't wrap
    if (jsonObj[paramSets.unwrap]) {
      res = jsonObj[paramSets.unwrap];
    }
  }
  return res;
}

function checkParams(paramSets, jsonObj, protocol) {
  var requiredParams = [];
  var optionalParams = [];
  var receivedParams = _lodash2['default'].keys(jsonObj);

  if (paramSets) {
    if (paramSets.required) {
      // we might have an array of parameters,
      // or an array of arrays of parameters, so standardize
      if (!_lodash2['default'].isArray(_lodash2['default'].first(paramSets.required))) {
        requiredParams = [paramSets.required];
      } else {
        requiredParams = paramSets.required;
      }
    }
    // optional parameters are just an array
    if (paramSets.optional) {
      optionalParams = paramSets.optional;
    }

    // If a function was provided as the 'validate' key, it will here be called with
    // jsonObj as the param. If it returns something falsy, verification will be
    // considered to have passed. If it returns something else, that will be the
    // argument to an error which is thrown to the user
    if (paramSets.validate) {
      var message = paramSets.validate(jsonObj, protocol);
      if (message) {
        throw new _errors.errors.BadParametersError(message, jsonObj);
      }
    }
  }

  // if we have no required parameters, all is well
  if (requiredParams.length === 0) {
    return;
  }

  // some clients pass in the session id in the params
  if (optionalParams.indexOf('sessionId') === -1) {
    optionalParams.push('sessionId');
  }

  // some clients pass in an element id in the params
  if (optionalParams.indexOf('id') === -1) {
    optionalParams.push('id');
  }

  // go through the required parameters and check against our arguments
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(requiredParams), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var params = _step.value;

      if (_lodash2['default'].difference(receivedParams, params, optionalParams).length === 0 && _lodash2['default'].difference(params, receivedParams).length === 0) {
        // we have a set of parameters that is correct
        // so short-circuit
        return;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  throw new _errors.errors.BadParametersError(paramSets, receivedParams);
}

/*
 * This method takes 3 pieces of data: request parameters ('requestParams'),
 * a request JSON body ('jsonObj'), and 'payloadParams', which is the section
 * from the route definition for a particular endpoint which has instructions
 * on handling parameters. This method returns an array of arguments which will
 * be applied to a command.
 */
function makeArgs(requestParams, jsonObj, payloadParams, protocol) {
  // We want to pass the "url" parameters to the commands in reverse order
  // since the command will sometimes want to ignore, say, the sessionId.
  // This has the effect of putting sessionId last, which means in JS we can
  // omit it from the function signature if we're not going to use it.
  var urlParams = _lodash2['default'].keys(requestParams).reverse();

  // In the simple case, the required parameters are a basic array in
  // payloadParams.required, so start there. It's possible that there are
  // multiple optional sets of required params, though, so handle that case
  // too.
  var requiredParams = payloadParams.required;
  if (_lodash2['default'].isArray(_lodash2['default'].first(payloadParams.required))) {
    // If there are optional sets of required params, then we will have an
    // array of arrays in payloadParams.required, so loop through each set and
    // pick the one that matches which JSON params were actually sent. We've
    // already been through validation so we're guaranteed to find a match.
    var keys = _lodash2['default'].keys(jsonObj);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(payloadParams.required), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var params = _step2.value;

        if (_lodash2['default'].without.apply(_lodash2['default'], [params].concat(_toConsumableArray(keys))).length === 0) {
          requiredParams = params;
          break;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  // Now we construct our list of arguments which will be passed to the command
  var args = undefined;
  if (_lodash2['default'].isFunction(payloadParams.makeArgs)) {
    // In the route spec, a particular route might define a 'makeArgs' function
    // if it wants full control over how to turn JSON parameters into command
    // arguments. So we pass it the JSON parameters and it returns an array
    // which will be applied to the handling command. For example if it returns
    // [1, 2, 3], we will call `command(1, 2, 3, ...)` (url params are separate
    // from JSON params and get concatenated below).
    args = payloadParams.makeArgs(jsonObj, protocol);
  } else {
    // Otherwise, collect all the required and optional params and flatten them
    // into an argument array
    args = _lodash2['default'].flatten(requiredParams).map(function (p) {
      return jsonObj[p];
    });
    if (payloadParams.optional) {
      args = args.concat(_lodash2['default'].flatten(payloadParams.optional).map(function (p) {
        return jsonObj[p];
      }));
    }
  }
  // Finally, get our url params (session id, element id, etc...) on the end of
  // the list
  args = args.concat(urlParams.map(function (u) {
    return requestParams[u];
  }));
  return args;
}

function routeConfiguringFunction(driver) {
  if (!driver.sessionExists) {
    throw new Error('Drivers used with MJSONWP must implement `sessionExists`');
  }

  if (!(driver.executeCommand || driver.execute)) {
    throw new Error('Drivers used with MJSONWP must implement `executeCommand` or `execute`');
  }

  // return a function which will add all the routes to the driver
  return function (app) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _getIterator(_lodash2['default'].toPairs(_routes.METHOD_MAP)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _step3$value = _slicedToArray(_step3.value, 2);

        var path = _step3$value[0];
        var methods = _step3$value[1];
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = _getIterator(_lodash2['default'].toPairs(methods)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _step4$value = _slicedToArray(_step4.value, 2);

            var method = _step4$value[0];
            var spec = _step4$value[1];

            // set up the express route handler
            buildHandler(app, method, path, spec, driver, isSessionCommand(spec.command));
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  };
}

function buildHandler(app, method, path, spec, driver, isSessCmd) {
  var _this = this;

  var asyncHandler = function asyncHandler(req, res) {
    var jsonObj, httpResBody, httpStatus, newSessionId, isW3C, isMJSONWP, log, args, driverRes, parsedDriverRes, protocolLogger, actualErr, _getResponseForW3CError, _getResponseForW3CError2, _getResponseForJsonwpError, _getResponseForJsonwpError2, jsonwpRes, w3cRes;

    return _regeneratorRuntime.async(function asyncHandler$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          jsonObj = req.body;
          httpResBody = {};
          httpStatus = 200;
          newSessionId = undefined;
          isW3C = undefined;
          isMJSONWP = undefined;
          log = getLogByProtocol(driver);
          context$2$0.prev = 7;

          if (!(isSessCmd && !driver.sessionExists(req.params.sessionId))) {
            context$2$0.next = 10;
            break;
          }

          throw new _errors.errors.NoSuchDriverError();

        case 10:
          if (!(isSessCmd && driverShouldDoJwpProxy(driver, req, spec.command))) {
            context$2$0.next = 14;
            break;
          }

          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(doJwpProxy(driver, req, res));

        case 13:
          return context$2$0.abrupt('return');

        case 14:
          if (spec.command) {
            context$2$0.next = 16;
            break;
          }

          throw new _errors.errors.NotImplementedError();

        case 16:

          // wrap params if necessary
          if (spec.payloadParams && spec.payloadParams.wrap) {
            jsonObj = wrapParams(spec.payloadParams, jsonObj);
          }

          // unwrap params if necessary
          if (spec.payloadParams && spec.payloadParams.unwrap) {
            jsonObj = unwrapParams(spec.payloadParams, jsonObj);
          }

          // ensure that the json payload conforms to the spec
          checkParams(spec.payloadParams, jsonObj, driver.protocol);
          // ensure the session the user is trying to use is valid

          // turn the command and json payload into an argument list for
          // the driver methods
          args = makeArgs(req.params, jsonObj, spec.payloadParams || {}, driver.protocol);
          driverRes = undefined;

          // validate command args according to MJSONWP
          if (_validators.validators[spec.command]) {
            _validators.validators[spec.command].apply(_validators.validators, _toConsumableArray(args));
          }

          // run the driver command wrapped inside the argument validators
          log.debug('Calling ' + driver.constructor.name + '.' + spec.command + '() with args: ' + _lodash2['default'].truncate(JSON.stringify(args), { length: LOG_OBJ_LENGTH }));

          if (!driver.executeCommand) {
            context$2$0.next = 29;
            break;
          }

          context$2$0.next = 26;
          return _regeneratorRuntime.awrap(driver.executeCommand.apply(driver, [spec.command].concat(_toConsumableArray(args))));

        case 26:
          driverRes = context$2$0.sent;
          context$2$0.next = 32;
          break;

        case 29:
          context$2$0.next = 31;
          return _regeneratorRuntime.awrap(driver.execute.apply(driver, [spec.command].concat(_toConsumableArray(args))));

        case 31:
          driverRes = context$2$0.sent;

        case 32:

          // Get the protocol after executeCommand (when command is `createSession`, protocol is assigned within
          // createSession function)
          isW3C = driver.isW3CProtocol();
          isMJSONWP = driver.isMjsonwpProtocol();

          // If `executeCommand` was overridden and the method returns an object
          // with a protocol and value/error property, re-assign the protocol
          parsedDriverRes = parseProtocol(driverRes);

          if (!parsedDriverRes) {
            context$2$0.next = 41;
            break;
          }

          isW3C = parsedDriverRes.isW3C;
          isMJSONWP = parsedDriverRes.isMJSONWP;

          if (!parsedDriverRes.error) {
            context$2$0.next = 40;
            break;
          }

          throw parsedDriverRes.error;

        case 40:
          driverRes = parsedDriverRes.value;

        case 41:
          protocolLogger = isW3C ? w3cLog : mjsonwpLog;

          // unpack createSession response
          if (spec.command === 'createSession') {
            newSessionId = driverRes[0];
            if (isMJSONWP) {
              driverRes = driverRes[1];
            } else if (isW3C) {
              driverRes = {
                capabilities: driverRes[1]
              };
            }
          }

          // If the MJSONWP element key format (ELEMENT) was provided translate it to W3C element key format (element-6066-11e4-a52e-4f735466cecf)
          // and vice-versa
          if (driverRes) {
            if (isW3C) {
              driverRes = (0, _basedriverHelpers.renameKey)(driverRes, MJSONWP_ELEMENT_KEY, W3C_ELEMENT_KEY);
            } else {
              driverRes = (0, _basedriverHelpers.renameKey)(driverRes, W3C_ELEMENT_KEY, MJSONWP_ELEMENT_KEY);
            }
          }

          // convert undefined to null, but leave all other values the same
          if (_lodash2['default'].isUndefined(driverRes)) {
            driverRes = null;
          }

          // delete should not return anything even if successful
          if (spec.command === 'deleteSession') {
            protocolLogger.debug('Received response: ' + _lodash2['default'].truncate(JSON.stringify(driverRes), { length: LOG_OBJ_LENGTH }));
            protocolLogger.debug('But deleting session, so not returning');
            driverRes = null;
          }

          // if the status is not 0,  throw the appropriate error for status code.

          if (!_appiumSupport.util.hasValue(driverRes)) {
            context$2$0.next = 53;
            break;
          }

          if (!(_appiumSupport.util.hasValue(driverRes.status) && !isNaN(driverRes.status) && parseInt(driverRes.status, 10) !== 0)) {
            context$2$0.next = 51;
            break;
          }

          throw (0, _errors.errorFromMJSONWPStatusCode)(driverRes.status, driverRes.value);

        case 51:
          if (!(_lodash2['default'].isPlainObject(driverRes.value) && driverRes.value.error)) {
            context$2$0.next = 53;
            break;
          }

          throw (0, _errors.errorFromW3CJsonCode)(driverRes.value.error, driverRes.value.message);

        case 53:

          // Response status should be the status set by the driver response.
          if (!isW3C) {
            httpResBody.status = _lodash2['default'].isNil(driverRes) || _lodash2['default'].isUndefined(driverRes.status) ? JSONWP_SUCCESS_STATUS_CODE : driverRes.status;
          }
          httpResBody.value = driverRes;
          protocolLogger.debug('Responding to client with driver.' + spec.command + '() ' + ('result: ' + _lodash2['default'].truncate(JSON.stringify(driverRes), { length: LOG_OBJ_LENGTH })));
          context$2$0.next = 66;
          break;

        case 58:
          context$2$0.prev = 58;
          context$2$0.t0 = context$2$0['catch'](7);
          actualErr = context$2$0.t0;

          if (_lodash2['default'].isUndefined(isMJSONWP)) {
            isMJSONWP = driver.isMjsonwpProtocol();
          }

          if (_lodash2['default'].isUndefined(isW3C)) {
            isW3C = driver.isW3CProtocol();
          }

          // Use the logger that's specific to this response
          protocolLogger = isW3C ? w3cLog : mjsonwpLog;

          if ((0, _errors.isErrorType)(context$2$0.t0, _errors.errors.ProxyRequestError)) {
            protocolLogger.error('Encountered internal error running command:  ' + JSON.stringify(context$2$0.t0) + ' ' + context$2$0.t0.stack);
            actualErr = context$2$0.t0.getActualError(driver.protocol);
          } else if (!isW3C && !((0, _errors.isErrorType)(context$2$0.t0, _errors.ProtocolError) || (0, _errors.isErrorType)(context$2$0.t0, _errors.errors.BadParametersError))) {
            protocolLogger.error('Encountered internal error running command: ' + context$2$0.t0.stack);
            actualErr = new _errors.errors.UnknownError(context$2$0.t0);
          }

          if (isW3C) {
            _getResponseForW3CError = (0, _errors.getResponseForW3CError)(actualErr);
            _getResponseForW3CError2 = _slicedToArray(_getResponseForW3CError, 2);
            httpStatus = _getResponseForW3CError2[0];
            httpResBody = _getResponseForW3CError2[1];
          } else if (isMJSONWP) {
            _getResponseForJsonwpError = (0, _errors.getResponseForJsonwpError)(actualErr);
            _getResponseForJsonwpError2 = _slicedToArray(_getResponseForJsonwpError, 2);
            httpStatus = _getResponseForJsonwpError2[0];
            httpResBody = _getResponseForJsonwpError2[1];
          } else {
            jsonwpRes = (0, _errors.getResponseForJsonwpError)(actualErr);
            w3cRes = (0, _errors.getResponseForW3CError)(actualErr);

            httpResBody = _extends({}, jsonwpRes[1], w3cRes[1]);

            // Use the JSONWP status code (which is usually 500)
            httpStatus = jsonwpRes[0];
          }

        case 66:

          // decode the response, which is either a string or json
          if (_lodash2['default'].isString(httpResBody)) {
            res.status(httpStatus).send(httpResBody);
          } else {
            if (newSessionId) {
              if (isW3C) {
                httpResBody.value.sessionId = newSessionId;
              } else {
                httpResBody.sessionId = newSessionId;
              }
            } else {
              httpResBody.sessionId = req.params.sessionId || null;
            }

            // Don't include sessionId in W3C responses
            if (isW3C) {
              delete httpResBody.sessionId;
            }
            res.status(httpStatus).json(httpResBody);
          }

        case 67:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[7, 58]]);
  };
  // add the method to the app
  app[method.toLowerCase()](path, function (req, res) {
    _bluebird2['default'].resolve(asyncHandler(req, res)).done();
  });
}

function driverShouldDoJwpProxy(driver, req, command) {
  // drivers need to explicitly say when the proxy is active
  if (!driver.proxyActive(req.params.sessionId)) {
    return false;
  }

  // we should never proxy deleteSession because we need to give the containing
  // driver an opportunity to clean itself up
  if (command === 'deleteSession') {
    return false;
  }

  // validate avoidance schema, and say we shouldn't proxy if anything in the
  // avoid list matches our req
  var proxyAvoidList = driver.getProxyAvoidList(req.params.sessionId);
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = _getIterator(proxyAvoidList), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var avoidSchema = _step5.value;

      if (!_lodash2['default'].isArray(avoidSchema) || avoidSchema.length !== 2) {
        throw new Error('Proxy avoidance must be a list of pairs');
      }

      var _avoidSchema = _slicedToArray(avoidSchema, 2);

      var avoidMethod = _avoidSchema[0];
      var avoidPathRegex = _avoidSchema[1];

      if (!_lodash2['default'].includes(['GET', 'POST', 'DELETE'], avoidMethod)) {
        throw new Error('Unrecognized proxy avoidance method \'' + avoidMethod + '\'');
      }
      if (!(avoidPathRegex instanceof RegExp)) {
        throw new Error('Proxy avoidance path must be a regular expression');
      }
      var normalizedUrl = req.originalUrl.replace(/^\/wd\/hub/, '');
      if (avoidMethod === req.method && avoidPathRegex.test(normalizedUrl)) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5['return']) {
        _iterator5['return']();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return true;
}

function doJwpProxy(driver, req, res) {
  var proxiedRes;
  return _regeneratorRuntime.async(function doJwpProxy$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        getLogByProtocol(driver).info('Driver proxy active, passing request on via HTTP proxy');

        // check that the inner driver has a proxy function

        if (driver.canProxy(req.params.sessionId)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Trying to proxy to a JSONWP server but driver is unable to proxy');

      case 3:
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(driver.executeCommand('proxyReqRes', req, res, req.params.sessionId));

      case 6:
        proxiedRes = context$1$0.sent;

        if (!(proxiedRes && proxiedRes.error)) {
          context$1$0.next = 9;
          break;
        }

        throw proxiedRes.error;

      case 9:
        context$1$0.next = 18;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](3);

        if (!(0, _errors.isErrorType)(context$1$0.t0, _errors.errors.ProxyRequestError)) {
          context$1$0.next = 17;
          break;
        }

        throw context$1$0.t0;

      case 17:
        throw new Error('Could not proxy. Proxy error: ' + context$1$0.t0.message);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 11]]);
}

/**
 * Check a driver command respond and see if the protocol and value was passed in
 * @param {Object} driverRes Response returned by `executeCommand` in an inner driver
 * @returns {?Object} Object of the form {isW3C, isMJSONWP, value|error} or null if it isn't parsable
 */
function parseProtocol(driverRes) {
  if (!_lodash2['default'].isPlainObject(driverRes) || !_lodash2['default'].isString(driverRes.protocol)) {
    return null;
  }

  var isW3C = driverRes.protocol === _basedriverDriver2['default'].DRIVER_PROTOCOL.W3C;
  var isMJSONWP = driverRes.protocol === _basedriverDriver2['default'].DRIVER_PROTOCOL.MJSONWP;

  if (_lodash2['default'].has(driverRes, 'value')) {
    return { isW3C: isW3C, isMJSONWP: isMJSONWP, value: driverRes.value };
  }

  if (_lodash2['default'].isError(driverRes.error)) {
    return { isW3C: isW3C, isMJSONWP: isMJSONWP, error: driverRes.error };
  }

  return null;
}

exports.Protocol = Protocol;
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.isSessionCommand = isSessionCommand;
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
exports.parseProtocol = parseProtocol;

// get the appropriate logger depending on the protocol that is being used

// if this is a session command but we don't have a session,
// error out early (especially before proxying)

// if the driver is currently proxying commands to another JSONWP
// server, bypass all our checks and assume the upstream server knows
// what it's doing. But keep this in the try/catch block so if proxying
// itself fails, we give a message to the client. Of course we only
// want to do these when we have a session command; the Appium driver
// must be responsible for start/stop session, etc...

// if a command is not in our method map, it's because we
// have no plans to ever implement it

// Use the logger that's specific to this response

// if anything goes wrong, figure out what our response should be
// based on the type of error that we encountered

// If it's unknown what the protocol is (like if it's `getStatus` prior to `createSession`), merge the responses
// together to be protocol-agnostic
// eslint-disable-line curly
//# sourceMappingURL=data:application/json;charset=utf8;base64,
