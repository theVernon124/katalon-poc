'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

commands.updateSettings = function callee$0$0(newSettings) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.settings) {
          _logger2['default'].errorAndThrow('Cannot update settings; settings object not found');
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.settings.update(newSettings));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSettings = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.settings) {
          _logger2['default'].errorAndThrow('Cannot get settings; settings object not found');
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.settings.getSettings());

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = commands;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL3NldHRpbmdzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7c0JBQWdCLFdBQVc7Ozs7QUFFM0IsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDOztBQUVsQixRQUFRLENBQUMsY0FBYyxHQUFHLG9CQUFnQixXQUFXOzs7O0FBQ25ELFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2xCLDhCQUFJLGFBQWEsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3hFOzt5Q0FDWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7Ozs7Ozs7Ozs7Q0FDL0MsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHOzs7O0FBQ3JCLFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO0FBQ2xCLDhCQUFJLGFBQWEsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ3JFOzt5Q0FDWSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTs7Ozs7Ozs7OztDQUN6QyxDQUFDOztxQkFFYSxRQUFRIiwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL3NldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMudXBkYXRlU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAobmV3U2V0dGluZ3MpIHtcbiAgaWYgKCF0aGlzLnNldHRpbmdzKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0Nhbm5vdCB1cGRhdGUgc2V0dGluZ3M7IHNldHRpbmdzIG9iamVjdCBub3QgZm91bmQnKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5zZXR0aW5ncy51cGRhdGUobmV3U2V0dGluZ3MpO1xufTtcblxuY29tbWFuZHMuZ2V0U2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5zZXR0aW5ncykge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdDYW5ub3QgZ2V0IHNldHRpbmdzOyBzZXR0aW5ncyBvYmplY3Qgbm90IGZvdW5kJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMuc2V0dGluZ3MuZ2V0U2V0dGluZ3MoKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
