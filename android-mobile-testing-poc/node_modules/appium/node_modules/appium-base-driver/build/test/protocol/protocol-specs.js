require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

require('../..');

// NOTE: For some reason this file needs to be imported to prevent a babel error

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libProtocolProtocol = require('../../lib/protocol/protocol');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        describe('#parseProtocol', function () {
          it('should parse {protocol: "MJSONWP"} as MJSONWP', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: undefined }).should.eql({ isW3C: false, isMJSONWP: true, value: undefined });
          });
          it('should parse {protocol: "W3C"} as W3C', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: undefined }).should.eql({ isW3C: true, isMJSONWP: false, value: undefined });
          });
          it('should parse {protocol: "MJSONWP", value: false} as MJSONWP with value: false', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: false }).should.eql({ isW3C: false, isMJSONWP: true, value: false });
          });
          it('should parse {protocol: "W3C", value: 0} as W3C with value: 0', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: 0 }).should.eql({ isW3C: true, isMJSONWP: false, value: 0 });
          });
          it('should parse {protocol: "MJSONWP", value: "string"}', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: "string" }).should.eql({ isW3C: false, isMJSONWP: true, value: "string" });
          });
          it('should parse {protocol: "W3C", value: {obj}}', function () {
            var value = { hello: 'world', goodbye: 'whirl' };
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: value }).should.eql({ isW3C: false, isMJSONWP: true, value: value });
          });
          it('should throw if {protocol: "MJSONWP", error}', function () {
            var error = new Error('some error');
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', error: error }).error.should.equal(error);
          });
        });

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJvdG9jb2wvcHJvdG9jb2wtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7UUFFTyxPQUFPOzs7O29CQUNHLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O21DQUNmLDZCQUE2Qjs7QUFFM0Qsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsVUFBVSxFQUFFOzs7OztBQUVuQixnQkFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQVk7QUFDckMsWUFBRSxDQUFDLCtDQUErQyxFQUFFLFlBQVk7QUFDOUQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7V0FDdEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQVk7QUFDdEQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7V0FDbEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLCtFQUErRSxFQUFFLFlBQVk7QUFDOUYsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7V0FDOUcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLCtEQUErRCxFQUFFLFlBQVk7QUFDOUUsb0RBQWMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7V0FDbEcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLHFEQUFxRCxFQUFFLFlBQVk7QUFDcEUsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7V0FDcEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsZ0JBQU0sS0FBSyxHQUFHLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUM7QUFDakQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBQyxDQUFDLENBQUM7V0FDaEcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsZ0JBQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3RDLG9EQUFjLEVBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztXQUNuRSxDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7Ozs7Ozs7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9wcm90b2NvbC9wcm90b2NvbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgJy4uLy4uJzsgLy8gTk9URTogRm9yIHNvbWUgcmVhc29uIHRoaXMgZmlsZSBuZWVkcyB0byBiZSBpbXBvcnRlZCB0byBwcmV2ZW50IGEgYmFiZWwgZXJyb3JcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHsgcGFyc2VQcm90b2NvbCB9IGZyb20gJy4uLy4uL2xpYi9wcm90b2NvbC9wcm90b2NvbCc7XG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdQcm90b2NvbCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICBkZXNjcmliZSgnI3BhcnNlUHJvdG9jb2wnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB7cHJvdG9jb2w6IFwiTUpTT05XUFwifSBhcyBNSlNPTldQJywgZnVuY3Rpb24gKCkge1xuICAgICAgcGFyc2VQcm90b2NvbCh7cHJvdG9jb2w6ICdNSlNPTldQJywgdmFsdWU6IHVuZGVmaW5lZH0pLnNob3VsZC5lcWwoe2lzVzNDOiBmYWxzZSwgaXNNSlNPTldQOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB7cHJvdG9jb2w6IFwiVzNDXCJ9IGFzIFczQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnVzNDJywgdmFsdWU6IHVuZGVmaW5lZH0pLnNob3VsZC5lcWwoe2lzVzNDOiB0cnVlLCBpc01KU09OV1A6IGZhbHNlLCB2YWx1ZTogdW5kZWZpbmVkfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB7cHJvdG9jb2w6IFwiTUpTT05XUFwiLCB2YWx1ZTogZmFsc2V9IGFzIE1KU09OV1Agd2l0aCB2YWx1ZTogZmFsc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBwYXJzZVByb3RvY29sKHtwcm90b2NvbDogJ01KU09OV1AnLCB2YWx1ZTogZmFsc2V9KS5zaG91bGQuZXFsKHtpc1czQzogZmFsc2UsIGlzTUpTT05XUDogdHJ1ZSwgdmFsdWU6IGZhbHNlfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB7cHJvdG9jb2w6IFwiVzNDXCIsIHZhbHVlOiAwfSBhcyBXM0Mgd2l0aCB2YWx1ZTogMCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnVzNDJywgdmFsdWU6IDB9KS5zaG91bGQuZXFsKHtpc1czQzogdHJ1ZSwgaXNNSlNPTldQOiBmYWxzZSwgdmFsdWU6IDB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJNSlNPTldQXCIsIHZhbHVlOiBcInN0cmluZ1wifScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnTUpTT05XUCcsIHZhbHVlOiBcInN0cmluZ1wifSkuc2hvdWxkLmVxbCh7aXNXM0M6IGZhbHNlLCBpc01KU09OV1A6IHRydWUsIHZhbHVlOiBcInN0cmluZ1wifSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB7cHJvdG9jb2w6IFwiVzNDXCIsIHZhbHVlOiB7b2JqfX0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHtoZWxsbzogJ3dvcmxkJywgZ29vZGJ5ZTogJ3doaXJsJ307XG4gICAgICBwYXJzZVByb3RvY29sKHtwcm90b2NvbDogJ01KU09OV1AnLCB2YWx1ZX0pLnNob3VsZC5lcWwoe2lzVzNDOiBmYWxzZSwgaXNNSlNPTldQOiB0cnVlLCB2YWx1ZX0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgaWYge3Byb3RvY29sOiBcIk1KU09OV1BcIiwgZXJyb3J9JywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ3NvbWUgZXJyb3InKTtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnVzNDJywgZXJyb3J9KS5lcnJvci5zaG91bGQuZXF1YWwoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
