'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libBasedriverHelpers = require('../../lib/basedriver/helpers');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

_chai2['default'].use(_chaiAsPromised2['default']);
var should = _chai2['default'].should();

describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _libBasedriverHelpers.isPackageOrBundle)('io.appium.testapp').should.be['true'];
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _libBasedriverHelpers.isPackageOrBundle)('foo').should.be['false'];
      (0, _libBasedriverHelpers.isPackageOrBundle)('/path/to/an.app').should.be['false'];
      (0, _libBasedriverHelpers.isPackageOrBundle)('/path/to/an.apk').should.be['false'];
    });
  });

  describe('#unzipFile', function () {
    var mockDir = 'path/to/mock/dir';
    before(function callee$2$0() {
      var fakeIOSAppZip;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // Start mock filesystem
            (0, _mockFs2['default'])(_defineProperty({}, mockDir, {}));

            // Write the base64 contents of FakeIOSApp.app.zip to the mock filesystem

            fakeIOSAppZip = 'UEsDBBQACAAIABF8/EYAAAAAAAAAAAAAAAAOABAARmFrZUlPU0FwcC5hcHBVWAwALwO4VQIDuFX1ARQAK8nILFYAorz8EoWi1MScnEqFxDyFxIICLgBQSwcIR93jPhoAAAAaAAAAUEsBAhUDFAAIAAgAEXz8Rkfd4z4aAAAAGgAAAA4ADAAAAAAAAAAAQKSBAAAAAEZha2VJT1NBcHAuYXBwVVgIAC8DuFUCA7hVUEsFBgAAAAABAAEASAAAAGYAAAAAAA==';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(mockDir, 'FakeIOSApp.app.zip'), fakeIOSAppZip, 'base64'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    after(function () {
      _mockFs2['default'].restore();
    });

    it('should unzip a .zip file (force isWindows to be true so we can test the internal zip library)', function callee$2$0() {
      var forceWindows;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            forceWindows = _sinon2['default'].stub(_appiumSupport.system, 'isWindows').returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libBasedriverHelpers.unzipFile)(_path2['default'].resolve(mockDir, 'FakeIOSApp.app.zip')));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(mockDir, 'FakeIOSApp.app'), 'utf8').should.eventually.deep.equal('this is not really an app\n'));

          case 5:
            forceWindows.restore();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#renameKey', function () {
    it('should translate key in an object', function () {
      (0, _libBasedriverHelpers.renameKey)({ 'foo': 'hello world' }, 'foo', 'bar').should.eql({ 'bar': 'hello world' });
    });
    it('should translate key in an object within an object', function () {
      (0, _libBasedriverHelpers.renameKey)({ 'key': { 'foo': 'hello world' } }, 'foo', 'bar').should.eql({ 'key': { 'bar': 'hello world' } });
    });
    it('should translate key in an object with an array', function () {
      (0, _libBasedriverHelpers.renameKey)([{ 'key': { 'foo': 'hello world' } }, { 'foo': 'HELLO WORLD' }], 'foo', 'bar').should.eql([{ 'key': { 'bar': 'hello world' } }, { 'bar': 'HELLO WORLD' }]);
    });
    it('should not do anything to primitives', function () {
      [0, 1, -1, true, false, null, undefined, "", "Hello World"].forEach(function (item) {
        should.equal((0, _libBasedriverHelpers.renameKey)(item), item);
      });
    });
    it('should rename keys on big complex objects', function () {
      var input = [{ 'foo': 'bar' }, {
        hello: {
          world: {
            'foo': 'BAR'
          }
        },
        foo: 'bahr'
      }, 'foo', null, 0];
      var expectedOutput = [{ 'FOO': 'bar' }, {
        hello: {
          world: {
            'FOO': 'BAR'
          }
        },
        FOO: 'bahr'
      }, 'foo', null, 0];
      (0, _libBasedriverHelpers.renameKey)(input, 'foo', 'FOO').should.deep.equal(expectedOutput);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
