'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

// for proxies

var _appiumAndroidDriver = require('appium-android-driver');

var _appiumAndroidDriver2 = _interopRequireDefault(_appiumAndroidDriver);

var _appiumIosDriver = require('appium-ios-driver');

var _appiumIosDriver2 = _interopRequireDefault(_appiumIosDriver);

var _appiumXcuitestDriver = require('appium-xcuitest-driver');

var _appiumXcuitestDriver2 = _interopRequireDefault(_appiumXcuitestDriver);

var _appiumMacDriver = require('appium-mac-driver');

var _appiumMacDriver2 = _interopRequireDefault(_appiumMacDriver);

// Add commands from the following location that should be mapped to existing drivers:
// https://github.com/appium/appium-base-driver/blob/master/lib/mjsonwp/routes.js

var TO_PROXY_COMMON = ['background', 'closeApp', 'getLog', 'getLogTypes', 'getOrientation', 'getStrings', 'launchApp', 'lock', 'removeApp', 'setOrientation'];

var TO_PROXY_IOS_ONLY = ['mobileShake'];

var TO_PROXY_ANDROID_ONLY = ['getNetworkConnection', 'isAppInstalled', 'isLocked', 'longPressKeyCode', 'pressKeyCode', 'setNetworkConnection', 'toggleLocationServices', 'unlock'];

var TO_PROXY_IOS = TO_PROXY_IOS_ONLY.concat(TO_PROXY_COMMON);
var TO_PROXY_ANDROID = TO_PROXY_ANDROID_ONLY.concat(TO_PROXY_COMMON);
var TO_PROXY_MAC = TO_PROXY_COMMON;

var MAX_RETRY_COUNT = 10;
var RETRY_BACKOFF = 3000;

var YouiEngineDriver = (function (_BaseDriver) {
  _inherits(YouiEngineDriver, _BaseDriver);

  _createClass(YouiEngineDriver, [{
    key: 'resetYouiEngine',
    value: function resetYouiEngine() {

      this.ready = false;
      this.socket = null;
      this.locatorStrategies = ['id', 'name', 'class name', 'accessibility id'];
      this.proxydriver = null;
      this.proxyAllowList = '';
    }
  }]);

  function YouiEngineDriver(opts, shouldValidateCaps) {
    _classCallCheck(this, YouiEngineDriver);

    _get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.desiredCapConstraints = _desiredCaps2['default'];
    this.settings = new _appiumBaseDriver.DeviceSettings({ 'TimeDilation': 1, 'SourceTreeFilter': '' }, this.onSettingsUpdate.bind(this));
    this.resetYouiEngine();
  }

  _createClass(YouiEngineDriver, [{
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      _get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'validateLocatorStrategy', this).call(this, strategy, false);
    }
  }, {
    key: 'createSession',
    value: function createSession(caps) {
      var _ref, _ref2, sessionId, appPlatform;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'createSession', this).call(this, caps));

          case 3:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            if (!(caps.platformName !== null)) {
              context$2$0.next = 24;
              break;
            }

            appPlatform = caps.platformName.toLowerCase();

            if (!(appPlatform === "ios")) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.startIOSSession(caps));

          case 11:
            context$2$0.next = 24;
            break;

          case 13:
            if (!(appPlatform === "android")) {
              context$2$0.next = 18;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.startAndroidSession(caps));

          case 16:
            context$2$0.next = 24;
            break;

          case 18:
            if (!(appPlatform === "mac")) {
              context$2$0.next = 23;
              break;
            }

            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.startMacSession(caps));

          case 21:
            context$2$0.next = 24;
            break;

          case 23:
            if (appPlatform === "yimac") {
              this.startYIMacSession(caps);
            }

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.connectSocket());

          case 26:
            return context$2$0.abrupt('return', [sessionId, this.opts]);

          case 29:
            context$2$0.prev = 29;
            context$2$0.t0 = context$2$0['catch'](0);
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 33:
            throw context$2$0.t0;

          case 34:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 29]]);
    }
  }, {
    key: 'onSettingsUpdate',
    value: function onSettingsUpdate(key, value) {
      return _regeneratorRuntime.async(function onSettingsUpdate$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(key === "TimeDilation")) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.setTimeDilation(value));

          case 3:
            context$2$0.next = 8;
            break;

          case 5:
            if (!(key === "SourceTreeFilter")) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.setSourceTreeFilter(value));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.ready = false;

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Deleting YouiEngine session");

            if (!(this.proxydriver !== null)) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.proxydriver.deleteSession());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'deleteSession', this).call(this));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.stop());

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'driverShouldDoProxyCmd',
    value: function driverShouldDoProxyCmd(command) {

      if (!this.proxydriver) return false;

      // only allow white listed commands
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(this.proxyAllowList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var allowedCommand = _step.value;

          if (allowedCommand === command) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var _proxydriver, result, _get2;

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(cmd === 'receiveAsyncResponse')) {
              context$2$0.next = 7;
              break;
            }

            _logger2['default'].debug('Executing YouiEngineDriver response \'' + cmd + '\'');
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.receiveAsyncResponse.apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
            if (!this.ready) {
              context$2$0.next = 20;
              break;
            }

            if (!this.driverShouldDoProxyCmd(cmd)) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug('Executing proxied WebDriver command \'' + cmd + '\'');

            // There are 2 CommandTimeout (YouiEngineDriver and proxy)
            // Only YouiEngineDriver CommandTimeout is used; Proxy is disabled
            // All proxy commands needs to reset the YouiEngineDriver CommandTimeout
            // Here we manually reset the YouiEngineDriver CommandTimeout for commands that goe to proxy.
            this.clearNewCommandTimeout();
            result = (_proxydriver = this.proxydriver).executeCommand.apply(_proxydriver, [cmd].concat(args));

            this.startNewCommandTimeout(cmd);
            return context$2$0.abrupt('return', result);

          case 16:
            _logger2['default'].debug('Executing YouiEngine WebDriver command \'' + cmd + '\'');
            return context$2$0.abrupt('return', (_get2 = _get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 18:
            context$2$0.next = 22;
            break;

          case 20:
            _logger2['default'].debug('Command Error \'' + cmd + '\'');
            throw new _appiumBaseDriver.errors.NoSuchDriverError('Driver is not ready, cannot execute ' + cmd + '.');

          case 22:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      // check with the base class, and return if it fails
      var res = _get(Object.getPrototypeOf(YouiEngineDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
      if (!res) return res;

      // using a proxy
      if (caps.platformName.toLowerCase() !== 'noproxy') {
        // make sure that the capabilities has youiEngineAppAddress
        if (!caps.youiEngineAppAddress) {
          var msg = 'The desired capabilities must include youiEngineAppAddress';
          _logger2['default'].errorAndThrow(msg);
        }
        // make sure that the capabilities has app
        if (!caps.app) {
          var msg = 'The desired capabilities must include app';
          _logger2['default'].errorAndThrow(msg);
        }

        //Android emulator with proxy
        if (caps.deviceName.toLowerCase() === 'android') {
          if (!caps.avd) {
            var msg = 'The desired capabilities must include avd';
            _logger2['default'].errorAndThrow(msg);
          }
        }
      }

      // finally, return true since the superclass check passed, as did this
      return true;
    }
  }, {
    key: 'setupNewIOSDriver',
    value: function setupNewIOSDriver(caps) {
      var iosArgs, iosdriver, majorVer, capsCopy;
      return _regeneratorRuntime.async(function setupNewIOSDriver$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            iosArgs = {
              javascriptEnabled: true
            };
            iosdriver = new _appiumIosDriver2['default'](iosArgs);

            // If iOS version is 10 or above we need to use XCUITestDriver (and Xcode 8+)
            if (caps.platformVersion) {
              majorVer = caps.platformVersion.toString().split(".")[0];

              if (parseInt(majorVer, 10) >= 10) {
                iosdriver = new _appiumXcuitestDriver2['default'](iosArgs);
              }
            }
            capsCopy = _lodash2['default'].cloneDeep(caps);

            // Disabling the proxy CommandTimeout in the iOS driver since we are now handling it in the YouiEngine Driver
            capsCopy.newCommandTimeout = 0;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(iosdriver.createSession(capsCopy));

          case 7:
            return context$2$0.abrupt('return', iosdriver);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startIOSSession',
    value: function startIOSSession(caps) {
      return _regeneratorRuntime.async(function startIOSSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info("Starting an IOS proxy session");
            this.proxyAllowList = TO_PROXY_IOS;

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.setupNewIOSDriver(caps));

          case 4:
            this.proxydriver = context$2$0.sent;

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupNewAndroidDriver',
    value: function setupNewAndroidDriver(caps) {
      var androidArgs, androiddriver, capsCopy;
      return _regeneratorRuntime.async(function setupNewAndroidDriver$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            androidArgs = {
              javascriptEnabled: true
            };
            androiddriver = new _appiumAndroidDriver2['default'](androidArgs);
            capsCopy = _lodash2['default'].cloneDeep(caps);

            // Disabling the proxy CommandTimeout in the Android driver since we are now handling it in the YouiEngine Driver
            capsCopy.newCommandTimeout = 0;

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(androiddriver.createSession(capsCopy));

          case 6:
            return context$2$0.abrupt('return', androiddriver);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startAndroidSession',
    value: function startAndroidSession(caps) {
      return _regeneratorRuntime.async(function startAndroidSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info("Starting an Android proxy session");
            this.proxyAllowList = TO_PROXY_ANDROID;

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.setupNewAndroidDriver(caps));

          case 4:
            this.proxydriver = context$2$0.sent;

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupNewMacDriver',
    value: function setupNewMacDriver(caps) {
      var macArgs, macdriver, capsCopy;
      return _regeneratorRuntime.async(function setupNewMacDriver$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            macArgs = {
              javascriptEnabled: true
            };
            macdriver = new _appiumMacDriver2['default'](macArgs);
            capsCopy = _lodash2['default'].cloneDeep(caps);

            // Disabling the proxy CommandTimeout in the proxied driver since we are now handling it in the YouiEngine Driver
            capsCopy.newCommandTimeout = 0;

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(macdriver.createSession(capsCopy));

          case 6:
            return context$2$0.abrupt('return', macdriver);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startMacSession',
    value: function startMacSession(caps) {
      return _regeneratorRuntime.async(function startMacSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info("Starting a Mac proxy session");
            this.proxyAllowList = TO_PROXY_MAC;

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.setupNewMacDriver(caps));

          case 4:
            this.proxydriver = context$2$0.sent;

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startYIMacSession',
    value: function startYIMacSession(caps) {

      _logger2['default'].info("Killing app if run");
      var shell = require('shelljs');
      var process_name = caps.app.substring(caps.app.lastIndexOf("/") + 1);
      shell.exec("killall " + process_name);

      _logger2['default'].info("Launching app");
      var child_process = require('child_process');
      child_process.exec(caps.app);
    }

    // SOCKETS
  }, {
    key: 'connectSocket',
    value: function connectSocket() {
      var retryCount, connected, connectedPromise;
      return _regeneratorRuntime.async(function connectSocket$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            retryCount = 0;
            connected = false;

          case 2:
            if (!(retryCount < MAX_RETRY_COUNT && !connected)) {
              context$2$0.next = 16;
              break;
            }

            if (!(retryCount > 0)) {
              context$2$0.next = 7;
              break;
            }

            _logger2['default'].info("Waiting " + RETRY_BACKOFF / 1000 + " seconds before trying...");
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(RETRY_BACKOFF));

          case 7:
            _logger2['default'].info("Attempt #" + (retryCount + 1));

            connectedPromise = new _bluebird2['default'](function (resolve) {
              var net = require('net');

              var HOST = _this.opts.youiEngineAppAddress;
              var PORT = 12345;

              _logger2['default'].info('Connecting to WebDriver: ' + HOST + ':' + PORT);

              _this.socket = new net.Socket();

              // Add an 'error' event handler for the client socket
              _this.socket.on('error', function (ex) {
                _logger2['default'].error(ex);
                _logger2['default'].error('Check that WebDriver is enabled in application, if a device ensure the proper IP address is used.');
                resolve(false);
              });
              // Add a 'close' event handler for the client socket
              _this.socket.on('close', function () {
                _logger2['default'].info('Connection closed');
              });
              // Add a 'timeout' event handler for the client socket
              _this.socket.on('timeout', function () {
                _logger2['default'].error('Connection timed out');
                resolve(false);
              });
              _this.socket.connect(PORT, HOST, function () {
                _logger2['default'].info('Connected');
                resolve(true);
              });
            });

            retryCount++;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(connectedPromise);

          case 12:
            connected = context$2$0.sent;

            if (!connected && retryCount === MAX_RETRY_COUNT - 1) {
              _logger2['default'].errorAndThrow("Failed to connect " + MAX_RETRY_COUNT + " times. Aborting.");
            }
            context$2$0.next = 2;
            break;

          case 16:
            retryCount = 0;
            this.ready = connected;

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // responses to the commands are BINARY
  }, {
    key: 'executeSocketCommand',
    value: function executeSocketCommand(cmd) {
      var cmdPromise;
      return _regeneratorRuntime.async(function executeSocketCommand$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.socket.writable) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].info("Socket is not writable. Trying to reconnect.");
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.connectSocket());

          case 4:
            cmdPromise = new _bluebird2['default'](function (resolve) {
              _logger2['default'].debug('COMMAND: ' + cmd);

              var totaldata = [];
              var endMarker = new Buffer("youiend");
              var socketClient = _this2.socket;

              var dataHandler = function dataHandler(data) {

                // determine if this includes an end parker
                // get last few values of buffer
                if (data.length >= endMarker.length) {
                  var dataend = new Buffer(endMarker.length);
                  var startIndex = data.length - endMarker.length;
                  data.copy(dataend, 0, startIndex, startIndex + endMarker.length);
                  //logger.debug('DATAEND' + dataend.toString());
                  if (dataend.equals(endMarker)) {
                    // remove data end
                    var lastData = data.slice(0, startIndex);
                    //logger.debug('LAST DATA: ' + lastData.toString());
                    totaldata.push(lastData);

                    //remove handler
                    socketClient.removeListener('data', dataHandler);

                    // resolve
                    resolve(Buffer.concat(totaldata));
                  } else {
                    totaldata.push(data);
                  }
                }
              };

              socketClient.write(cmd + "\n", "UTF8", function () {
                socketClient.on('data', dataHandler);
              });
            });
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(cmdPromise);

          case 7:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return YouiEngineDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {

  for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    YouiEngineDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports.YouiEngineDriver = YouiEngineDriver;

// setup proxies - if platformName is not empty, make it less case sensitive
//# sourceMappingURL=data:application/json;charset=utf8;base64,
