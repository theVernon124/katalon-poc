'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var webdriver = require('selenium-webdriver'),
    Key = webdriver.Key;

var commands = {};

commands.back = function callee$0$0() {
  var commandObject, commandJSON, data, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        commandObject = {
          name: 'sendkeys',
          args: [Key.ESCAPE]
        };
        commandJSON = JSON.stringify(commandObject);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeSocketCommand(commandJSON));

      case 4:
        data = context$1$0.sent;
        result = undefined;
        context$1$0.prev = 6;

        result = JSON.parse(data);
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        throw new Error("Bad response from sendkeys");

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10]]);
};
exports['default'] = commands;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uYXZpZ2F0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0NBQXVCLG9CQUFvQjs7c0JBQzdCLFFBQVE7Ozs7c0JBQ04sV0FBVzs7OztBQUczQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUM7SUFDNUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7O0FBRXJCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQTs7QUFFakIsUUFBUSxDQUFDLElBQUksR0FBRztNQUNWLGFBQWEsRUFJYixXQUFXLEVBRVgsSUFBSSxFQUVKLE1BQU07Ozs7QUFSTixxQkFBYSxHQUFHO0FBQ2xCLGNBQUksRUFBRSxVQUFVO0FBQ2hCLGNBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7U0FDbkI7QUFDRyxtQkFBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDOzt5Q0FFOUIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQzs7O0FBQW5ELFlBQUk7QUFFSixjQUFNOzs7QUFFUixjQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7OztjQUVwQixJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQzs7Ozs7OztDQUVoRCxDQUFBO3FCQUNjLFFBQVEiLCJmaWxlIjoibGliL2NvbW1hbmRzL25hdmlnYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG52YXIgd2ViZHJpdmVyID0gcmVxdWlyZSgnc2VsZW5pdW0td2ViZHJpdmVyJyksXG5cdEtleSA9IHdlYmRyaXZlci5LZXk7XG5cbmxldCBjb21tYW5kcyA9IHt9XG5cbmNvbW1hbmRzLmJhY2sgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb21tYW5kT2JqZWN0ID0ge1xuICAgIG5hbWU6ICdzZW5ka2V5cycsXG4gICAgYXJnczogW0tleS5FU0NBUEVdXG4gIH07XG4gIHZhciBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuXG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gc2VuZGtleXNcIik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
