require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            _sinon2['default'].mock(driver).expects('startAppiumForMacSession').once().returns(_bluebird2['default'].resolve());
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 4:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set sessionId (W3C)', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            driver.shouldValidateCaps = false;
            _sinon2['default'].mock(driver).expects('startAppiumForMacSession').once().returns(_bluebird2['default'].resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.createSession(null, null, {
              alwaysMatch: { cap: 'foo' },
              firstMatch: [{}]
            }));

          case 5:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9kcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0JBRXNCLE9BQU87Ozs7b0JBQ1osTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7cUJBQzNCLE9BQU87Ozs7d0JBQ1gsVUFBVTs7OztBQUd4QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWTtBQUNoQyxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQVk7QUFDbEMsTUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQVk7QUFDdkQsVUFBSSxNQUFNLEdBQUcsa0JBQWMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztBQUN6QyxZQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNwQixZQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7QUFDcEMsTUFBRSxDQUFDLHNCQUFzQixFQUFFO1VBQ3JCLE1BQU07Ozs7QUFBTixrQkFBTSxHQUFHLGtCQUFjLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxFQUFFLEtBQUssQ0FBQzs7QUFDakQsK0JBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUNqRCxJQUFJLEVBQUUsQ0FDTixPQUFPLENBQUMsc0JBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQzs7NkNBQ3BCLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUM7OztBQUN4QyxrQkFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzlCLGtCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0tBQ3JDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyw0QkFBNEIsRUFBRTtVQUMzQixNQUFNOzs7O0FBQU4sa0JBQU0sR0FBRyxrQkFBYyxFQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUMsRUFBRSxLQUFLLENBQUM7O0FBQ2pELGtCQUFNLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0FBQ2xDLCtCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FDakQsSUFBSSxFQUFFLENBQ04sT0FBTyxDQUFDLHNCQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7OzZDQUNwQixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7QUFDckMseUJBQVcsRUFBRSxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUM7QUFDekIsd0JBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQixDQUFDOzs7QUFDRixrQkFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzlCLGtCQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0tBQ3JDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsVUFBVSxFQUFFLFlBQVk7QUFDL0IsUUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFVBQU0sQ0FBQyxZQUFZO0FBQ2pCLFlBQU0sR0FBRyxrQkFBYyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEMsWUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0FBQ0gsWUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQ25DLFFBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBWTtBQUM3QixjQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLG9CQUFvQixFQUFFLFlBQVk7QUFDbkMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7T0FDMUMsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsU0FBQyxZQUFNO0FBQUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FBQyxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUM7T0FDbkQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOztBQUVILFlBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWTtBQUNoQyxRQUFFLENBQUMsY0FBYyxFQUFFLFlBQVk7QUFDN0IsY0FBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ25ELENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZO0FBQ25DLGNBQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO09BQ3ZDLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFZO0FBQzdELFNBQUMsWUFBTTtBQUFDLGdCQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQUUsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDO09BQ2pELENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvZHJpdmVyLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBNYWNEcml2ZXIgZnJvbSAnLi4vLi4nO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdkcml2ZXIuanMnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnY2FsbHMgQmFzZURyaXZlciBjb25zdHJ1Y3RvciB3aXRoIG9wdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZHJpdmVyID0gbmV3IE1hY0RyaXZlcih7Zm9vOiAnYmFyJ30pO1xuICAgICAgZHJpdmVyLnNob3VsZC5leGlzdDtcbiAgICAgIGRyaXZlci5vcHRzLmZvby5zaG91bGQuZXF1YWwoJ2JhcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlU2Vzc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHNldCBzZXNzaW9uSWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZHJpdmVyID0gbmV3IE1hY0RyaXZlcih7YXBwOiAnbXlhcHAnfSwgZmFsc2UpO1xuICAgICAgc2lub24ubW9jayhkcml2ZXIpLmV4cGVjdHMoJ3N0YXJ0QXBwaXVtRm9yTWFjU2Vzc2lvbicpXG4gICAgICAgICAgLm9uY2UoKVxuICAgICAgICAgIC5yZXR1cm5zKEIucmVzb2x2ZSgpKTtcbiAgICAgIGF3YWl0IGRyaXZlci5jcmVhdGVTZXNzaW9uKHtjYXA6ICdmb28nfSk7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkLnNob3VsZC5leGlzdDtcbiAgICAgIGRyaXZlci5jYXBzLmNhcC5zaG91bGQuZXF1YWwoJ2ZvbycpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2V0IHNlc3Npb25JZCAoVzNDKScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkcml2ZXIgPSBuZXcgTWFjRHJpdmVyKHthcHA6ICdteWFwcCd9LCBmYWxzZSk7XG4gICAgICBkcml2ZXIuc2hvdWxkVmFsaWRhdGVDYXBzID0gZmFsc2U7XG4gICAgICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnc3RhcnRBcHBpdW1Gb3JNYWNTZXNzaW9uJylcbiAgICAgICAgICAub25jZSgpXG4gICAgICAgICAgLnJldHVybnMoQi5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwge1xuICAgICAgICBhbHdheXNNYXRjaDoge2NhcDogJ2Zvbyd9LFxuICAgICAgICBmaXJzdE1hdGNoOiBbe31dLFxuICAgICAgfSk7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkLnNob3VsZC5leGlzdDtcbiAgICAgIGRyaXZlci5jYXBzLmNhcC5zaG91bGQuZXF1YWwoJ2ZvbycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJveHlpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRyaXZlcjtcbiAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyID0gbmV3IE1hY0RyaXZlcih7fSwgZmFsc2UpO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZCA9ICdhYmMnO1xuICAgIH0pO1xuICAgIGRlc2NyaWJlKCcjcHJveHlBY3RpdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGV4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIucHJveHlBY3RpdmUuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIucHJveHlBY3RpdmUoJ2FiYycpLnNob3VsZC5iZS50cnVlO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHNlc3Npb24gaWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7ZHJpdmVyLnByb3h5QWN0aXZlKCdhYWEnKTt9KS5zaG91bGQudGhyb3c7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCcjY2FuUHJveHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGV4aXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIuY2FuUHJveHkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkcml2ZXIuY2FuUHJveHkoJ2FiYycpLnNob3VsZC5iZS50cnVlO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHNlc3Npb24gaWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgoKSA9PiB7ZHJpdmVyLmNhblByb3h5KCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
