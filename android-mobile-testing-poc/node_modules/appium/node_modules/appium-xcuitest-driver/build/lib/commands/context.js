'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _appiumRemoteDebugger = require('appium-remote-debugger');

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.context);

// override, as appium-ios-driver's version uses UI Automation to close
extensions.closeAlertBeforeTest = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', true);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions._setContext = extensions.setContext;
extensions.setContext = function callee$0$0(name, callback, skipReadyCheck) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this._setContext(name, callback, skipReadyCheck));

      case 2:
        if (!(name && name !== _appiumIosDriver.NATIVE_WIN)) {
          context$1$0.next = 6;
          break;
        }

        if (!(this.logs && this.logs.safariConsole)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole)));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// the appium-ios-driver version of this function fails in CI,
// and the wrong webview is almost always retrieved
extensions._getLatestWebviewContextForTitle = extensions.getLatestWebviewContextForTitle;
extensions.getLatestWebviewContextForTitle = function callee$0$0(regExp) {
  var currentUrl, contexts, matchingCtx, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, ctx, url;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        currentUrl = this.getCurrentUrl();

        if (currentUrl) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this._getLatestWebviewContextForTitle(regExp));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getContextsAndViews());

      case 7:
        contexts = context$1$0.sent;
        matchingCtx = undefined;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(contexts);

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 24;
          break;
        }

        ctx = _step.value;

        if (!ctx.view) {
          context$1$0.next = 21;
          break;
        }

        url = ctx.view.url || '';

        if (!(url === this.getCurrentUrl())) {
          context$1$0.next = 21;
          break;
        }

        matchingCtx = ctx;
        return context$1$0.abrupt('break', 24);

      case 21:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 24:
        context$1$0.next = 30;
        break;

      case 26:
        context$1$0.prev = 26;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 30:
        context$1$0.prev = 30;
        context$1$0.prev = 31;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 33:
        context$1$0.prev = 33;

        if (!_didIteratorError) {
          context$1$0.next = 36;
          break;
        }

        throw _iteratorError;

      case 36:
        return context$1$0.finish(33);

      case 37:
        return context$1$0.finish(30);

      case 38:
        if (!matchingCtx) {
          context$1$0.next = 40;
          break;
        }

        return context$1$0.abrupt('return', matchingCtx.id);

      case 40:
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(this._getLatestWebviewContextForTitle(regExp));

      case 42:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[12, 26, 30, 38], [31,, 33, 37]]);
};

extensions.isWebContext = function () {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function () {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = function callee$0$0() {
  var socketPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.opts.device.getWebInspectorSocket());

      case 2:
        socketPath = context$1$0.sent;
        return context$1$0.abrupt('return', new _appiumRemoteDebugger.RemoteDebugger({
          bundleId: this.opts.bundleId,
          useNewSafari: this.useNewSafari(),
          pageLoadMs: this.pageLoadMs,
          platformVersion: this.opts.platformVersion,
          socketPath: socketPath
        }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = extensions;
module.exports = exports['default'];

// start safari console logging if the logs handler is active
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OzsrQkFBd0MsbUJBQW1COztvQ0FDNUIsd0JBQXdCOztBQUd2RCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRXBCLGVBQWMsVUFBVSxFQUFFLDZCQUFZLE9BQU8sQ0FBQyxDQUFDOzs7QUFHL0MsVUFBVSxDQUFDLG9CQUFvQixHQUFHOzs7OzRDQUN6QixJQUFJOzs7Ozs7O0NBQ1osQ0FBQzs7QUFFRixVQUFVLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7QUFDL0MsVUFBVSxDQUFDLFVBQVUsR0FBRyxvQkFBZ0IsSUFBSSxFQUFFLFFBQVEsRUFBRSxjQUFjOzs7Ozt5Q0FDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQzs7O2NBR2xELElBQUksSUFBSSxJQUFJLGdDQUFlLENBQUE7Ozs7O2NBQ3pCLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUE7Ozs7Ozt5Q0FDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7O0NBR3JHLENBQUM7Ozs7QUFJRixVQUFVLENBQUMsZ0NBQWdDLEdBQUcsVUFBVSxDQUFDLCtCQUErQixDQUFDO0FBQ3pGLFVBQVUsQ0FBQywrQkFBK0IsR0FBRyxvQkFBZ0IsTUFBTTtNQUM3RCxVQUFVLEVBS1YsUUFBUSxFQUNSLFdBQVcsa0ZBQ04sR0FBRyxFQUVKLEdBQUc7Ozs7O0FBVFAsa0JBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFOztZQUNoQyxVQUFVOzs7Ozs7eUNBQ0EsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozt5Q0FHdkMsSUFBSSxDQUFDLG1CQUFtQixFQUFFOzs7QUFBM0MsZ0JBQVE7QUFDUixtQkFBVzs7Ozs7aUNBQ0MsUUFBUTs7Ozs7Ozs7QUFBZixXQUFHOzthQUNOLEdBQUcsQ0FBQyxJQUFJOzs7OztBQUNOLFdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFOztjQUN4QixHQUFHLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBOzs7OztBQUM5QixtQkFBVyxHQUFHLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQUtwQixXQUFXOzs7Ozs0Q0FDTixXQUFXLENBQUMsRUFBRTs7Ozt5Q0FFVixJQUFJLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDOzs7Ozs7Ozs7O0NBQzNELENBQUM7O0FBRUYsVUFBVSxDQUFDLFlBQVksR0FBRyxZQUFZO0FBQ3BDLFNBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyw2QkFBWSxPQUFPLENBQUMsVUFBVSxDQUFDO0NBQ2hGLENBQUM7O0FBRUYsVUFBVSxDQUFDLFNBQVMsR0FBRyxZQUFZO0FBQ2pDLFNBQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0NBQzVCLENBQUM7O0FBRUYsVUFBVSxDQUFDLG9CQUFvQixHQUFHO01BQzFCLFVBQVU7Ozs7O3lDQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFOzs7QUFBM0Qsa0JBQVU7NENBQ1QseUNBQW1CO0FBQ3hCLGtCQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO0FBQzVCLHNCQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRTtBQUNqQyxvQkFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQzNCLHlCQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlO0FBQzFDLG9CQUFVLEVBQVYsVUFBVTtTQUNYLENBQUM7Ozs7Ozs7Q0FDSCxDQUFDOztxQkFHYSxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW9zQ29tbWFuZHMsIE5BVElWRV9XSU4gfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgeyBSZW1vdGVEZWJ1Z2dlciB9IGZyb20gJ2FwcGl1bS1yZW1vdGUtZGVidWdnZXInO1xuXG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaW9zQ29tbWFuZHMuY29udGV4dCk7XG5cbi8vIG92ZXJyaWRlLCBhcyBhcHBpdW0taW9zLWRyaXZlcidzIHZlcnNpb24gdXNlcyBVSSBBdXRvbWF0aW9uIHRvIGNsb3NlXG5leHRlbnNpb25zLmNsb3NlQWxlcnRCZWZvcmVUZXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4dGVuc2lvbnMuX3NldENvbnRleHQgPSBleHRlbnNpb25zLnNldENvbnRleHQ7XG5leHRlbnNpb25zLnNldENvbnRleHQgPSBhc3luYyBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIHNraXBSZWFkeUNoZWNrKSB7XG4gIGF3YWl0IHRoaXMuX3NldENvbnRleHQobmFtZSwgY2FsbGJhY2ssIHNraXBSZWFkeUNoZWNrKTtcblxuICAvLyBzdGFydCBzYWZhcmkgY29uc29sZSBsb2dnaW5nIGlmIHRoZSBsb2dzIGhhbmRsZXIgaXMgYWN0aXZlXG4gIGlmIChuYW1lICYmIG5hbWUgIT09IE5BVElWRV9XSU4pIHtcbiAgICBpZiAodGhpcy5sb2dzICYmIHRoaXMubG9ncy5zYWZhcmlDb25zb2xlKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlbW90ZS5zdGFydENvbnNvbGUodGhpcy5sb2dzLnNhZmFyaUNvbnNvbGUuYWRkTG9nTGluZS5iaW5kKHRoaXMubG9ncy5zYWZhcmlDb25zb2xlKSk7XG4gICAgfVxuICB9XG59O1xuXG4vLyB0aGUgYXBwaXVtLWlvcy1kcml2ZXIgdmVyc2lvbiBvZiB0aGlzIGZ1bmN0aW9uIGZhaWxzIGluIENJLFxuLy8gYW5kIHRoZSB3cm9uZyB3ZWJ2aWV3IGlzIGFsbW9zdCBhbHdheXMgcmV0cmlldmVkXG5leHRlbnNpb25zLl9nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlID0gZXh0ZW5zaW9ucy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlO1xuZXh0ZW5zaW9ucy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlID0gYXN5bmMgZnVuY3Rpb24gKHJlZ0V4cCkge1xuICBsZXQgY3VycmVudFVybCA9IHRoaXMuZ2V0Q3VycmVudFVybCgpO1xuICBpZiAoIWN1cnJlbnRVcmwpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fZ2V0TGF0ZXN0V2Vidmlld0NvbnRleHRGb3JUaXRsZShyZWdFeHApO1xuICB9XG5cbiAgbGV0IGNvbnRleHRzID0gYXdhaXQgdGhpcy5nZXRDb250ZXh0c0FuZFZpZXdzKCk7XG4gIGxldCBtYXRjaGluZ0N0eDtcbiAgZm9yIChsZXQgY3R4IG9mIGNvbnRleHRzKSB7XG4gICAgaWYgKGN0eC52aWV3KSB7XG4gICAgICBsZXQgdXJsID0gY3R4LnZpZXcudXJsIHx8ICcnO1xuICAgICAgaWYgKHVybCA9PT0gdGhpcy5nZXRDdXJyZW50VXJsKCkpIHtcbiAgICAgICAgbWF0Y2hpbmdDdHggPSBjdHg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobWF0Y2hpbmdDdHgpIHtcbiAgICByZXR1cm4gbWF0Y2hpbmdDdHguaWQ7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMuX2dldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGUocmVnRXhwKTtcbn07XG5cbmV4dGVuc2lvbnMuaXNXZWJDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLmN1ckNvbnRleHQgJiYgdGhpcy5jdXJDb250ZXh0ICE9PSBpb3NDb21tYW5kcy5jb250ZXh0Lk5BVElWRV9XSU47XG59O1xuXG5leHRlbnNpb25zLmlzV2VidmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaXNXZWJDb250ZXh0KCk7XG59O1xuXG5leHRlbnNpb25zLmdldE5ld1JlbW90ZURlYnVnZ2VyID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCBzb2NrZXRQYXRoID0gYXdhaXQgdGhpcy5vcHRzLmRldmljZS5nZXRXZWJJbnNwZWN0b3JTb2NrZXQoKTtcbiAgcmV0dXJuIG5ldyBSZW1vdGVEZWJ1Z2dlcih7XG4gICAgYnVuZGxlSWQ6IHRoaXMub3B0cy5idW5kbGVJZCxcbiAgICB1c2VOZXdTYWZhcmk6IHRoaXMudXNlTmV3U2FmYXJpKCksXG4gICAgcGFnZUxvYWRNczogdGhpcy5wYWdlTG9hZE1zLFxuICAgIHBsYXRmb3JtVmVyc2lvbjogdGhpcy5vcHRzLnBsYXRmb3JtVmVyc2lvbixcbiAgICBzb2NrZXRQYXRoLFxuICB9KTtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
