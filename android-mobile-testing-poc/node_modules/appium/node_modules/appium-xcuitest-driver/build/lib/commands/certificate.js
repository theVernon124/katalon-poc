'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _appiumIosDriver = require('appium-ios-driver');

var _appiumBaseDriver = require('appium-base-driver');

var _nodeSimctl = require('node-simctl');

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _teen_process = require('teen_process');

var extensions = {},
    commands = {};

var CONFIG_EXTENSION = 'mobileconfig';

function extractCommonName(certBuffer) {
  var tempCert, _ref, stdout, cnMatch;

  return _regeneratorRuntime.async(function extractCommonName$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.open({
          prefix: 'cert',
          suffix: '.cer'
        }));

      case 2:
        tempCert = context$1$0.sent;
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempCert.path, certBuffer.toString('latin-1'), 'latin-1'));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]));

      case 8:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        cnMatch = /\/CN=([^\s,]+)/.exec(stdout);

        if (!cnMatch) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', cnMatch[1]);

      case 13:
        throw new Error('There is no common name value in \'' + stdout + '\' output');

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](3);
        throw new Error('Cannot parse common name value from the certificate. Is it valid and base64-encoded? ' + ('Original error: ' + context$1$0.t0.message));

      case 19:
        context$1$0.prev = 19;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(tempCert.path));

      case 22:
        return context$1$0.finish(19);

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 16, 19, 23]]);
}

/**
 * Generates Apple's over-the-air configuration profile
 * for certificate deployment based on the given PEM certificate content.
 * Read https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/iPhoneOTAConfiguration/Introduction/Introduction.html
 * for more details on such profiles.
 *
 * @param {Buffer} certBuffer - The actual content of PEM certificate encoded into NodeJS buffer
 * @param {string} commonName - Certificate's common name
 * @returns {Object} The encoded structure of the given certificate, which is ready to be passed
 * as an argument to plist builder
 * @throws {Error} If the given certificate cannot be parsed
 */
function toMobileConfig(certBuffer, commonName) {
  var getUUID = function getUUID() {
    return _uuidJs2['default'].create().hex.toUpperCase();
  };
  var contentUuid = getUUID();
  return {
    PayloadContent: [{
      PayloadCertificateFileName: commonName + '.cer',
      PayloadContent: certBuffer,
      PayloadDescription: 'Adds a CA root certificate',
      PayloadDisplayName: commonName,
      PayloadIdentifier: 'com.apple.security.root.' + contentUuid,
      PayloadType: 'com.apple.security.root',
      PayloadUUID: contentUuid,
      PayloadVersion: 1
    }],
    PayloadDisplayName: commonName,
    PayloadIdentifier: _os2['default'].hostname().split('.')[0] + '.' + getUUID(),
    PayloadRemovalDisallowed: false,
    PayloadType: 'Configuration',
    PayloadUUID: getUUID(),
    PayloadVersion: 1
  };
}

function clickElement(driver, locator) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var element, _options$timeout, timeout, _options$skipIfInvisible, skipIfInvisible, lookupDelay;

  return _regeneratorRuntime.async(function clickElement$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        element = null;
        _options$timeout = options.timeout;
        timeout = _options$timeout === undefined ? 5000 : _options$timeout;
        _options$skipIfInvisible = options.skipIfInvisible;
        skipIfInvisible = _options$skipIfInvisible === undefined ? false : _options$skipIfInvisible;
        lookupDelay = 500;
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(timeout / lookupDelay, lookupDelay, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(driver.findNativeElementOrElements(locator.type, locator.value, false));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 9:
        element = context$1$0.sent;
        context$1$0.next = 17;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](6);

        if (!skipIfInvisible) {
          context$1$0.next = 16;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 16:
        throw new Error('Cannot find ' + JSON.stringify(locator) + ' within ' + timeout + 'ms timeout');

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(driver.nativeClick(element));

      case 19:
        return context$1$0.abrupt('return', true);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 12]]);
}

function installCertificateInPreferences(driver) {
  return _regeneratorRuntime.async(function installCertificateInPreferences$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Allow'
        }));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(2000));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Install'
        }));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1500));

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Install'
        }));

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: '-ios class chain',
          value: '**/XCUIElementTypeSheet/**/XCUIElementTypeButton[`label == \'Install\'`]'
        }));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Done'
        }));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function trustCertificateInPreferences(driver, name) {
  return _regeneratorRuntime.async(function trustCertificateInPreferences$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Return to Settings'
        }));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'General'
        }));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'About'
        }));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(300));

      case 8:
        context$1$0.t0 = _regeneratorRuntime;
        context$1$0.t1 = driver;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false));

      case 12:
        context$1$0.t2 = context$1$0.sent;
        context$1$0.t3 = {
          element: context$1$0.t2,
          direction: 'up'
        };
        context$1$0.t4 = context$1$0.t1.mobileSwipe.call(context$1$0.t1, context$1$0.t3);
        context$1$0.next = 17;
        return context$1$0.t0.awrap.call(context$1$0.t0, context$1$0.t4);

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: 'accessibility id',
          value: 'Certificate Trust Settings'
        }));

      case 19:
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(clickElement(driver, {
          type: '-ios class chain',
          value: '**/XCUIElementTypeCell[`label == \'' + name + '\'`]/**/XCUIElementTypeSwitch[`value == \'0\'`]',
          options: {
            timeout: 1000,
            skipIfInvisible: true
          }
        }));

      case 21:
        if (!context$1$0.sent) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(driver.postAcceptAlert());

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * @typedef {Object} CertificateInstallationOptions
 *
 * @property {!string} content - Base64-encoded content of the public certificate
 * @property {?string} commonName - Common name of the certificate. If this is not set
 *                                  then the script will try to parse it from the given
 *                                  certificate content.
 */

/**
 * Installs a custom certificate onto the device.
 * Since Apple provides no official way to do it via command line,
 * this method tries to wrap the certificate into .mobileconfig format
 * and then deploys the wrapped file to the internal HTTP server,
 * so one can open it with mobile Safari.
 * Then the algorithm goes through the profile installation procedure by
 * clicking the necessary buttons using WebDriverAgent.
 *
 * @param {CertificateInstallationOptions} opts
 * @returns {string} The content of the generated .mobileconfig file as
 * base64-encoded string. This config might be useful for debugging purposes.
 */
commands.mobileInstallCertificate = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var content, commonName, configName, configPath, certBuffer, cn, mobileConfig, _server$address, address, port, certUrl;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        content = opts.content;
        commonName = opts.commonName;

        if (!_lodash2['default'].isEmpty(content)) {
          context$1$0.next = 4;
          break;
        }

        throw new Error('Certificate content should not be empty');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(_appiumBaseDriver.STATIC_DIR));

      case 6:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('The static content root \'' + _appiumBaseDriver.STATIC_DIR + '\' ' + 'does not exist or is not accessible');

      case 8:
        configName = (Math.random() * 0x100000000 + 1).toString(36) + '.' + CONFIG_EXTENSION;
        configPath = _path2['default'].resolve(_appiumBaseDriver.STATIC_DIR, configName);
        certBuffer = Buffer.from(content, 'base64');
        context$1$0.t0 = commonName;

        if (context$1$0.t0) {
          context$1$0.next = 16;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(extractCommonName(certBuffer));

      case 15:
        context$1$0.t0 = context$1$0.sent;

      case 16:
        cn = context$1$0.t0;
        mobileConfig = toMobileConfig(certBuffer, cn);
        context$1$0.prev = 18;
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(configPath, mobileConfig, false, false));

      case 21:
        context$1$0.next = 26;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](18);
        throw new Error('Cannot store the generated config as \'' + configPath + '\'. ' + ('Original error: ' + context$1$0.t1.message));

      case 26:
        context$1$0.prev = 26;
        _server$address = this.server.address();
        address = _server$address.address;
        port = _server$address.port;
        certUrl = 'http://' + (address ? address : _os2['default'].hostname()) + (':' + (port ? port : 4723) + '/' + configName);
        context$1$0.prev = 31;

        if (!this.isRealDevice()) {
          context$1$0.next = 48;
          break;
        }

        context$1$0.prev = 33;
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(this.proxyCommand('/url', 'POST', { url: certUrl }));

      case 36:
        context$1$0.next = 46;
        break;

      case 38:
        context$1$0.prev = 38;
        context$1$0.t2 = context$1$0['catch'](33);

        if (!this.isWebContext()) {
          context$1$0.next = 45;
          break;
        }

        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(_appiumIosDriver.iosCommands.general.setUrl.call(this, certUrl));

      case 43:
        context$1$0.next = 46;
        break;

      case 45:
        throw context$1$0.t2;

      case 46:
        context$1$0.next = 50;
        break;

      case 48:
        context$1$0.next = 50;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, certUrl));

      case 50:
        context$1$0.next = 52;
        return _regeneratorRuntime.awrap(installCertificateInPreferences(this));

      case 52:
        context$1$0.next = 54;
        return _regeneratorRuntime.awrap(trustCertificateInPreferences(this, commonName));

      case 54:
        context$1$0.prev = 54;
        context$1$0.prev = 55;
        context$1$0.next = 58;
        return _regeneratorRuntime.awrap(this.activateApp(this.opts.bundleId));

      case 58:
        context$1$0.next = 63;
        break;

      case 60:
        context$1$0.prev = 60;
        context$1$0.t3 = context$1$0['catch'](55);

        _logger2['default'].warn('Cannot restore the application \'' + this.opts.bundleId + '\'. ' + ('Original error: ' + context$1$0.t3.message));

      case 63:
        return context$1$0.finish(54);

      case 64:
        context$1$0.next = 66;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(configPath));

      case 66:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 67:
        context$1$0.prev = 67;
        context$1$0.next = 70;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(configPath));

      case 70:
        return context$1$0.finish(67);

      case 71:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 23], [26,, 67, 71], [31,, 54, 64], [33, 38], [55, 60]]);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;

// Accept Safari alert

// Wait until Preferences are opened

// Go through Preferences wizard

// We need to click Install button on two different tabs
// The second one confirms the previous

// Accept sheet alert

// Finish adding certificate

// The command above does not always work on real devices
//# sourceMappingURL=data:application/json;charset=utf8;base64,
