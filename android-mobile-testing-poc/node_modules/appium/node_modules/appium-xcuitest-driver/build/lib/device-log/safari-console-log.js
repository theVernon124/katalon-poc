'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var MAX_LOG_ENTRIES_COUNT = 10000;

var log = _appiumSupport.logger.getLogger('SafariConsole');
log.warning = log.warn; // js console has `warning` level, so map to `warn`

var SafariConsoleLog = (function () {
  function SafariConsoleLog(showLogs) {
    _classCallCheck(this, SafariConsoleLog);

    this.showLogs = showLogs;
    this.logs = [];
    this.logIdxSinceLastRequest = 0;

    this.isCapturing = false;
  }

  _createClass(SafariConsoleLog, [{
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.isCapturing = true;

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.isCapturing = false;

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'addLogLine',
    value: function addLogLine(out) {
      if (this.isCapturing) {
        this.logs = this.logs || [];
        while (this.logs.length >= MAX_LOG_ENTRIES_COUNT) {
          this.logs.shift();
          if (this.logIdxSinceLastRequest > 0) {
            this.logIdxSinceLastRequest--;
          }
        }
        this.logs.push(out);
      }

      // format output like
      //     SafariConsole [WARNING][http://appium.io 2:13] Log something to warn
      if (this.showLogs) {
        var level = 'debug';
        if (out.level === 'warning' || out.level === 'error') {
          level = out.level;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(out.text.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var line = _step.value;

            // url is optional, so get formatting here
            var url = out.url ? out.url + ' ' : '';
            log[level]('[' + level.toUpperCase() + '][' + url + out.line + ':' + out.column + '] ' + line);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      var result;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.logs.length && this.logIdxSinceLastRequest < this.logs.length)) {
              context$2$0.next = 5;
              break;
            }

            result = _lodash2['default'].clone(this.logs);

            if (this.logIdxSinceLastRequest > 0) {
              result = result.slice(this.logIdxSinceLastRequest);
            }
            this.logIdxSinceLastRequest = this.logs.length;
            return context$2$0.abrupt('return', result);

          case 5:
            return context$2$0.abrupt('return', []);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', _lodash2['default'].clone(this.logs));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return SafariConsoleLog;
})();

exports.SafariConsoleLog = SafariConsoleLog;
exports['default'] = SafariConsoleLog;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7NkJBQ0MsZ0JBQWdCOztBQUd2QyxJQUFNLHFCQUFxQixHQUFHLEtBQUssQ0FBQzs7QUFFcEMsSUFBTSxHQUFHLEdBQUcsc0JBQU8sU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzlDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQzs7SUFFakIsZ0JBQWdCO0FBQ1IsV0FEUixnQkFBZ0IsQ0FDUCxRQUFRLEVBQUU7MEJBRG5CLGdCQUFnQjs7QUFFbEIsUUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsUUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZixRQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDOztBQUVoQyxRQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztHQUMxQjs7ZUFQRyxnQkFBZ0I7O1dBU0Q7Ozs7QUFDakIsZ0JBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDOzs7Ozs7O0tBQ3pCOzs7V0FFaUI7Ozs7QUFDaEIsZ0JBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOzs7Ozs7O0tBQzFCOzs7V0FFVSxvQkFBQyxHQUFHLEVBQUU7QUFDZixVQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDcEIsWUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUM1QixlQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLHFCQUFxQixFQUFFO0FBQ2hELGNBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDbEIsY0FBSSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxFQUFFO0FBQ25DLGdCQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztXQUMvQjtTQUNGO0FBQ0QsWUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDckI7Ozs7QUFJRCxVQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDakIsWUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3BCLFlBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7QUFDcEQsZUFBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7U0FDbkI7Ozs7OztBQUNELDRDQUFtQixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsNEdBQUU7Z0JBQTlCLElBQUk7OztBQUViLGdCQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFNLEdBQUcsQ0FBQyxHQUFHLFNBQU0sRUFBRSxDQUFDO0FBQ3pDLGVBQUcsQ0FBQyxLQUFLLENBQUMsT0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLFNBQUksR0FBRyxDQUFDLE1BQU0sVUFBSyxJQUFJLENBQUcsQ0FBQztXQUNqRjs7Ozs7Ozs7Ozs7Ozs7O09BQ0Y7S0FDRjs7O1dBRWE7VUFFTixNQUFNOzs7O2tCQURSLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTs7Ozs7QUFDaEUsa0JBQU0sR0FBRyxvQkFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7QUFDL0IsZ0JBQUksSUFBSSxDQUFDLHNCQUFzQixHQUFHLENBQUMsRUFBRTtBQUNuQyxvQkFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDcEQ7QUFDRCxnQkFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dEQUN4QyxNQUFNOzs7Z0RBRVIsRUFBRTs7Ozs7OztLQUNWOzs7V0FFZ0I7Ozs7Z0RBQ1Isb0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDMUI7OztTQTFERyxnQkFBZ0I7OztRQTZEYixnQkFBZ0IsR0FBaEIsZ0JBQWdCO3FCQUNWLGdCQUFnQiIsImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9zYWZhcmktY29uc29sZS1sb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IE1BWF9MT0dfRU5UUklFU19DT1VOVCA9IDEwMDAwO1xuXG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdTYWZhcmlDb25zb2xlJyk7XG5sb2cud2FybmluZyA9IGxvZy53YXJuOyAvLyBqcyBjb25zb2xlIGhhcyBgd2FybmluZ2AgbGV2ZWwsIHNvIG1hcCB0byBgd2FybmBcblxuY2xhc3MgU2FmYXJpQ29uc29sZUxvZyB7XG4gIGNvbnN0cnVjdG9yIChzaG93TG9ncykge1xuICAgIHRoaXMuc2hvd0xvZ3MgPSBzaG93TG9ncztcbiAgICB0aGlzLmxvZ3MgPSBbXTtcbiAgICB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPSAwO1xuXG4gICAgdGhpcy5pc0NhcHR1cmluZyA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDYXB0dXJlICgpIHtcbiAgICB0aGlzLmlzQ2FwdHVyaW5nID0gZmFsc2U7XG4gIH1cblxuICBhZGRMb2dMaW5lIChvdXQpIHtcbiAgICBpZiAodGhpcy5pc0NhcHR1cmluZykge1xuICAgICAgdGhpcy5sb2dzID0gdGhpcy5sb2dzIHx8IFtdO1xuICAgICAgd2hpbGUgKHRoaXMubG9ncy5sZW5ndGggPj0gTUFYX0xPR19FTlRSSUVTX0NPVU5UKSB7XG4gICAgICAgIHRoaXMubG9ncy5zaGlmdCgpO1xuICAgICAgICBpZiAodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID4gMCkge1xuICAgICAgICAgIHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ3MucHVzaChvdXQpO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBvdXRwdXQgbGlrZVxuICAgIC8vICAgICBTYWZhcmlDb25zb2xlIFtXQVJOSU5HXVtodHRwOi8vYXBwaXVtLmlvIDI6MTNdIExvZyBzb21ldGhpbmcgdG8gd2FyblxuICAgIGlmICh0aGlzLnNob3dMb2dzKSB7XG4gICAgICBsZXQgbGV2ZWwgPSAnZGVidWcnO1xuICAgICAgaWYgKG91dC5sZXZlbCA9PT0gJ3dhcm5pbmcnIHx8IG91dC5sZXZlbCA9PT0gJ2Vycm9yJykge1xuICAgICAgICBsZXZlbCA9IG91dC5sZXZlbDtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBvdXQudGV4dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgLy8gdXJsIGlzIG9wdGlvbmFsLCBzbyBnZXQgZm9ybWF0dGluZyBoZXJlXG4gICAgICAgIGNvbnN0IHVybCA9IG91dC51cmwgPyBgJHtvdXQudXJsfSBgIDogJyc7XG4gICAgICAgIGxvZ1tsZXZlbF0oYFske2xldmVsLnRvVXBwZXJDYXNlKCl9XVske3VybH0ke291dC5saW5lfToke291dC5jb2x1bW59XSAke2xpbmV9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0TG9ncyAoKSB7XG4gICAgaWYgKHRoaXMubG9ncy5sZW5ndGggJiYgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IDwgdGhpcy5sb2dzLmxlbmd0aCkge1xuICAgICAgbGV0IHJlc3VsdCA9IF8uY2xvbmUodGhpcy5sb2dzKTtcbiAgICAgIGlmICh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSh0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID0gdGhpcy5sb2dzLmxlbmd0aDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkge1xuICAgIHJldHVybiBfLmNsb25lKHRoaXMubG9ncyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU2FmYXJpQ29uc29sZUxvZyB9O1xuZXhwb3J0IGRlZmF1bHQgU2FmYXJpQ29uc29sZUxvZztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
